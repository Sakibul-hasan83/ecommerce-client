import {
  require_raf,
  require_tween_functions
} from "./chunk-KPOXEZDN.js";
import {
  require_react_dom
} from "./chunk-F5X6INBZ.js";
import {
  require_react
} from "./chunk-KMU3Z7QX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/tween-one/node_modules/style-utils/main.js
var require_main = __commonJS({
  "node_modules/tween-one/node_modules/style-utils/main.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.toCssLowerCase = toCssLowerCase;
    exports.toStyleUpperCase = toStyleUpperCase2;
    exports.toFixed = toFixed;
    exports.createMatrix = createMatrix;
    exports.checkStyleName = checkStyleName3;
    exports.getGsapType = getGsapType2;
    exports.parseColor = parseColor3;
    exports.parseShadow = parseShadow2;
    exports.getColor = getColor3;
    exports.isTransform = isTransform;
    exports.isConvert = isConvert2;
    exports.splitFilterToObject = splitFilterToObject2;
    exports.getMatrix = getMatrix;
    exports.getTransform = getTransform3;
    exports.stylesToCss = stylesToCss3;
    exports.getUnit = getUnit;
    exports.getValues = getValues;
    exports.findStyleByName = findStyleByName;
    exports.mergeStyle = mergeStyle;
    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridRow: true,
      gridColumn: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    var unquotedContentValueRegex = /^(normal|none|(\b(url\([^)]*\)|chapter_counter|attr\([^)]*\)|(no-)?(open|close)-quote|inherit)((\b\s*)|$|\s+))+)$/;
    var IE = (function() {
      if (typeof document === "undefined") {
        return false;
      }
      if (navigator && (navigator.userAgent.indexOf("MSIE 8.0") > 0 || navigator.userAgent.indexOf("MSIE 9.0") > 0)) {
        return true;
      }
      return false;
    })();
    var rnd = 1e5;
    var colorLookup = {
      aqua: [0, 255, 255, 1],
      lime: [0, 255, 0, 1],
      silver: [192, 192, 192, 1],
      black: [0, 0, 0, 1],
      maroon: [128, 0, 0, 1],
      teal: [0, 128, 128, 1],
      blue: [0, 0, 255, 1],
      navy: [0, 0, 128, 1],
      white: [255, 255, 255, 1],
      fuchsia: [255, 0, 255, 1],
      olive: [128, 128, 0, 1],
      yellow: [255, 255, 0, 1],
      orange: [255, 165, 0, 1],
      gray: [128, 128, 128, 1],
      purple: [128, 0, 128, 1],
      green: [0, 128, 0, 1],
      red: [255, 0, 0, 1],
      pink: [255, 192, 203, 1],
      cyan: [0, 255, 255, 1],
      transparent: [255, 255, 255, 0]
    };
    var DEG2RAD = Math.PI / 180;
    var RAD2DEG = 180 / Math.PI;
    var $cssList = {
      _lists: {
        transformsBase: ["translate", "translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ", "rotate"],
        transforms3D: ["translate3d", "translateZ", "scaleZ", "rotateX", "rotateY", "perspective"]
      },
      transformGroup: { translate: 1, translate3d: 1, scale: 1, scale3d: 1, rotate: 1, rotate3d: 1, skew: 1 },
      filter: ["grayScale", "sepia", "hueRotate", "invert", "brightness", "contrast", "blur"],
      filterConvert: { grayScale: "grayscale", hueRotate: "hue-rotate" }
    };
    $cssList._lists.transformsBase = !IE ? $cssList._lists.transformsBase.concat($cssList._lists.transforms3D) : $cssList._lists.transformsBase;
    var hexExp = exports.hexExp = /#([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3})/;
    var rgbAndHslExp = exports.rgbAndHslExp = /((rgb|hsl)[a]?)+\((?:\d|\.\d)+(?:(deg|\%|)),[\s+]?(?:\d|\.\d)+(?:(deg|\%|)),[\s+]?(?:\d|\.\d)+(?:(deg|%|))(,[\s+]?(?:\d|\.\d)+(?:(deg|\%|)))?\)/;
    var colorRegExp2 = exports.colorRegExp = /#([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3})|((rgb|hsl)[a]?)+\((?:\d|\.\d)+(?:(deg|\%)?),[\s+]?(?:\d|\.\d)+(?:(deg|\%)?),[\s+]?(?:\d|\.\d)+(?:(deg|%)?)(,[\s+]?(?:\d|\.\d)+(?:(deg|\%)?))?\)/;
    var colorNumExp = exports.colorNumExp = /(?:\d|\.\d)+(%?)/g;
    var cssList2 = exports.cssList = $cssList;
    function toCssLowerCase(d2) {
      return d2.replace(/[A-Z]/, function($1) {
        return "-" + $1.toLocaleLowerCase();
      });
    }
    function toStyleUpperCase2(d2) {
      return d2.replace(/-(.?)/g, function($1) {
        return $1.replace("-", "").toLocaleUpperCase();
      });
    }
    function toFixed(num, length2) {
      var _rnd = length2 ? Math.pow(10, length2) : rnd;
      var n2 = num | 0;
      var dec = num - n2;
      var fixed = num;
      if (dec) {
        var r2 = (dec * _rnd + (num < 0 ? -0.5 : 0.5) | 0) / _rnd;
        var t3 = r2 | 0;
        var str = r2.toString();
        var decStr = str.split(".")[1] || "";
        fixed = (num < 0 && !(n2 + t3) ? "-" : "") + (n2 + t3) + "." + decStr;
      }
      return parseFloat(fixed);
    }
    function createMatrix(style3) {
      if (typeof document === "undefined") {
        return null;
      }
      var matrixs = ["WebKitCSS", "MozCSS", "DOM", "MsCSS", "MSCSS", "OCSS", "CSS"].filter(function(key) {
        return key + "Matrix" in window;
      });
      if (matrixs.length) {
        return new window[matrixs[0] + "Matrix"](style3);
      }
      console.warn("Browsers do not support matrix.");
      return "";
    }
    function checkStyleName3(p2) {
      if (typeof document === "undefined") {
        return null;
      }
      var a2 = ["O", "Moz", "ms", "Ms", "Webkit"];
      if (p2 !== "filter" && p2 in document.body.style) {
        return p2;
      }
      var _p = p2.charAt(0).toUpperCase() + p2.substr(1);
      var prefixCss = a2.filter(function(key) {
        return "" + key + _p in document.body.style;
      });
      return prefixCss[0] ? "" + prefixCss[0] + _p : null;
    }
    function getGsapType2(_p) {
      var p2 = _p;
      p2 = p2 === "x" ? "translateX" : p2;
      p2 = p2 === "y" ? "translateY" : p2;
      p2 = p2 === "z" ? "translateZ" : p2;
      return p2;
    }
    var hueToRgb = function hueToRgb2(t1, t22, hue) {
      if (hue < 0) hue += 6;
      if (hue >= 6) hue -= 6;
      if (hue < 1) return (t22 - t1) * hue + t1;
      else if (hue < 3) return t22;
      else if (hue < 4) return (t22 - t1) * (4 - hue) + t1;
      else return t1;
    };
    function parseColor3(value) {
      var colorArray = colorLookup.transparent;
      var color = value;
      var r2 = void 0;
      var g2 = void 0;
      var b2 = void 0;
      if (!color) {
        colorArray = colorLookup.transparent;
      } else if (colorLookup[color]) {
        colorArray = colorLookup[color];
      } else if (typeof color === "number") {
        colorArray = [color >> 16, color >> 8 & 255, color & 255];
      } else {
        if (color.charAt(color.length - 1) === ",") {
          color = color.substr(0, color.length - 1);
        }
        if (color.match(hexExp)) {
          color = color.substr(1);
          if (color.length === 3) {
            r2 = color.charAt(0);
            g2 = color.charAt(1);
            b2 = color.charAt(2);
            color = "" + r2 + r2 + g2 + g2 + b2 + b2 + "ff";
          }
          if (color.length === 6) {
            color += "ff";
          }
          color = parseInt(color, 16);
          colorArray = [color >> 24 & 255, color >> 16 & 255, color >> 8 & 255, parseFloat(((color & 255) / 255).toFixed(2))];
        } else if (color.match(/^hsl/)) {
          colorArray = color.match(colorNumExp);
          var alpha = colorArray[3];
          alpha = typeof alpha === "string" && alpha.match("%") ? parseFloat(alpha) / 100 : parseFloat("" + (alpha || "1"));
          var hue = parseFloat(colorArray[0]) / 60;
          var sat = parseFloat(colorArray[1]) / 100;
          var light = parseFloat(colorArray[2]) / 100;
          var t22 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;
          var t1 = light * 2 - t22;
          r2 = Math.round(hueToRgb(t1, t22, hue + 2) * 255);
          g2 = Math.round(hueToRgb(t1, t22, hue) * 255);
          b2 = Math.round(hueToRgb(t1, t22, hue - 2) * 255);
          colorArray = [r2, g2, b2, alpha];
        } else {
          colorArray = color.match(colorNumExp) || colorLookup.transparent;
          colorArray = colorArray.map(function(c2) {
            return parseFloat(c2);
          });
          if (colorArray.length === 3) {
            colorArray.push(1);
          }
        }
      }
      return colorArray;
    }
    function parseShadow2(v2, key) {
      var textKey = key && toStyleUpperCase2(key);
      if (!v2) {
        if (textKey === "boxShadow") {
          return [0, 0, 0, 0, 0, 0, 0, 0];
        }
        return [0, 0, 0, 0, 0, 0, 0];
      }
      var vArr = v2.replace(/,\s+/gi, ",").split(/\s+/).filter(function(c2) {
        return c2;
      });
      var inset = vArr.indexOf("inset");
      if (inset >= 0) {
        vArr.splice(inset, 1);
      }
      var colorStr = vArr.find(function(c2) {
        return colorLookup[c2] || c2.match(/#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})|(rgb|hsl)+(?:a)?\((.*)\)/i);
      }) || "black";
      var colorIndex = vArr.indexOf(colorStr);
      vArr.splice(colorIndex, 1);
      var color = parseColor3(colorStr);
      color[3] = typeof color[3] === "number" ? color[3] : 1;
      if (textKey === "boxShadow" && vArr.length < 4) {
        vArr.push(0);
      }
      return vArr.concat(color, inset >= 0 ? ["inset"] : []);
    }
    function getColor3(v2) {
      var rgba = v2.length === 4 ? "rgba" : "rgb";
      var _vars = v2.map(function(d2, i2) {
        return i2 < 3 ? Math.round(d2) : d2;
      });
      return rgba + "(" + _vars.join(",") + ")";
    }
    function isTransform(p2) {
      return cssList2._lists.transformsBase.indexOf(p2) >= 0 ? "transform" : p2;
    }
    function isConvert2(p2) {
      var cssName = isTransform(p2);
      return cssList2.filter.indexOf(cssName) >= 0 ? "filter" : cssName;
    }
    function splitFilterToObject2(data) {
      if (data === "none" || !data || data === "") {
        return null;
      }
      var filter = data.replace(/\s+/g, "").split(")").filter(function(item) {
        return item;
      });
      var startData = {};
      filter.forEach(function(item) {
        var dataArr = item.split("(");
        startData[dataArr[0]] = dataArr[1];
      });
      return startData;
    }
    function getMatrix(t3) {
      var arr = t3.match(/(?:\-|\b)[\d\-\.e]+\b/gi);
      var m2 = {};
      if (arr.length === 6) {
        m2.m11 = parseFloat(arr[0]);
        m2.m12 = parseFloat(arr[1]);
        m2.m13 = 0;
        m2.m14 = 0;
        m2.m21 = parseFloat(arr[2]);
        m2.m22 = parseFloat(arr[3]);
        m2.m23 = 0;
        m2.m24 = 0;
        m2.m31 = 0;
        m2.m32 = 0;
        m2.m33 = 1;
        m2.m34 = 0;
        m2.m41 = parseFloat(arr[4]);
        m2.m42 = parseFloat(arr[5]);
        m2.m43 = 0;
        m2.m44 = 0;
      } else {
        arr.forEach(function(item, i2) {
          var ii = i2 % 4 + 1;
          var j2 = Math.floor(i2 / 4) + 1;
          m2["m" + j2 + ii] = parseFloat(item);
        });
      }
      return m2;
    }
    function transformNoMatrix(transform) {
      var tm = {};
      tm.translateX = 0;
      tm.translateY = 0;
      tm.translateZ = 0;
      tm.rotate = 0;
      tm.rotateX = 0;
      tm.rotateY = 0;
      tm.scaleX = 1;
      tm.scaleY = 1;
      tm.scaleZ = 1;
      tm.skewX = 0;
      tm.skewY = 0;
      tm.perspective = 0;
      (transform.trim().match(/(\w+)\([^\)]+\)/ig) || []).forEach(function(str) {
        var strArray = str.split("(");
        var key = strArray[0].trim();
        var value = strArray[1].replace(")", "").trim();
        if (value.match(/%|em|rem/ig)) {
          console.warn("value(" + value + ") must be absolute, not relative, has been converted to absolute.");
        }
        value = value.replace(/px|deg|\)/ig, "");
        if (cssList2.transformGroup[key] && key !== "rotate") {
          value = value.split(",").map(function(num) {
            return parseFloat(num);
          });
          if (key === "scale3d" || key === "translate3d") {
            ["X", "Y", "Z"].forEach(function(s2, i2) {
              var $key = key.substring(0, key.length - 2);
              tm["" + $key + s2] = value[i2] || tm["" + $key + s2];
            });
          } else if (key === "rotate3d") {
            tm.rotateX = value[0] && value[3] || tm.rotateX;
            tm.rotateY = value[1] && value[3] || tm.rotateY;
            tm.rotate = value[2] && value[3] || tm.rotate;
          } else {
            ["X", "Y"].forEach(function(s2, i2) {
              tm["" + key + s2] = value[i2] || tm["" + key + s2];
            });
          }
        } else {
          if (key === "rotateZ") {
            tm.rotate = parseFloat(value) || tm.rotate;
          } else {
            tm[key] = parseFloat(value) || tm[key];
          }
        }
      });
      return tm;
    }
    function getTransform3(transform) {
      var _transform = !transform || transform === "none" || transform === "" ? "matrix(1, 0, 0, 1, 0, 0)" : transform;
      if (!_transform.match("matrix")) {
        return transformNoMatrix(transform);
      }
      var m2 = getMatrix(_transform);
      var m11 = m2.m11;
      var m12 = m2.m12;
      var m13 = m2.m13;
      var m14 = m2.m14;
      var m21 = m2.m21;
      var m22 = m2.m22;
      var m23 = m2.m23;
      var m24 = m2.m24;
      var m31 = m2.m31;
      var m32 = m2.m32;
      var m33 = m2.m33;
      var m34 = m2.m34;
      var m43 = m2.m43;
      var t1 = void 0;
      var t22 = void 0;
      var t3 = void 0;
      var tm = {};
      var angle = Math.atan2(m23, m33);
      var skewX = Math.tan(m21);
      var skewY = Math.tan(m12);
      var cos = void 0;
      var sin = void 0;
      tm.rotateX = toFixed(angle * RAD2DEG) || 0;
      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = m21 * cos + m31 * sin;
        t22 = m22 * cos + m32 * sin;
        t3 = m23 * cos + m33 * sin;
        m31 = m21 * -sin + m31 * cos;
        m32 = m22 * -sin + m32 * cos;
        m33 = m23 * -sin + m33 * cos;
        m34 = m24 * -sin + m34 * cos;
        m21 = t1;
        m22 = t22;
        m23 = t3;
      }
      angle = Math.atan2(-m13, m33);
      tm.rotateY = toFixed(angle * RAD2DEG) || 0;
      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = m11 * cos - m31 * sin;
        t22 = m12 * cos - m32 * sin;
        t3 = m13 * cos - m33 * sin;
        m32 = m12 * sin + m32 * cos;
        m33 = m13 * sin + m33 * cos;
        m34 = m14 * sin + m34 * cos;
        m11 = t1;
        m12 = t22;
        m13 = t3;
      }
      angle = Math.atan2(m12, m11);
      tm.rotate = toFixed(angle * RAD2DEG) || 0;
      if (angle) {
        cos = Math.cos(angle);
        sin = Math.sin(angle);
        t1 = m11 * cos + m12 * sin;
        t22 = m21 * cos + m22 * sin;
        t3 = m31 * cos + m32 * sin;
        m12 = m12 * cos - m11 * sin;
        m22 = m22 * cos - m21 * sin;
        m32 = m32 * cos - m31 * sin;
        m11 = t1;
        m21 = t22;
        m31 = t3;
      }
      if (tm.rotateX && Math.abs(tm.rotateX) + Math.abs(tm.rotate) > 359.9) {
        tm.rotateX = tm.rotate = 0;
        tm.rotateY = 180 - tm.rotateY || 0;
      }
      tm.scaleX = toFixed(Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13));
      tm.scaleY = toFixed(Math.sqrt(m22 * m22 + m23 * m23));
      tm.scaleZ = toFixed(Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33));
      tm.skewX = skewX === -skewY ? 0 : skewX;
      tm.skewY = skewY === -skewX ? 0 : skewY;
      tm.perspective = m34 ? 1 / (m34 < 0 ? -m34 : m34) : 0;
      tm.translateX = m2.m41;
      tm.translateY = m2.m42;
      tm.translateZ = m43;
      return tm;
    }
    function stylesToCss3(key, value) {
      var _value = void 0;
      if (!isUnitlessNumber[key] && typeof value === "number") {
        _value = " " + value + "px";
      } else if (key === "content" && !unquotedContentValueRegex.test(value)) {
        _value = "'" + value.replace(/'/g, "\\'") + "'";
      }
      return _value || value;
    }
    function getUnit(p2, v2) {
      var currentUnit = v2 && v2.toString().replace(/[^a-z|%]/ig, "");
      var unit = "";
      if (p2.indexOf("translate") >= 0 || p2.indexOf("perspective") >= 0 || p2.indexOf("blur") >= 0) {
        unit = "px";
      } else if (p2.indexOf("skew") >= 0 || p2.indexOf("rotate") >= 0) {
        unit = "deg";
      }
      return currentUnit || unit;
    }
    function getValues(p2, d2, u2) {
      return p2 + "(" + d2 + (u2 || "") + ")";
    }
    function findStyleByName(cssArray, name) {
      var ret = null;
      if (cssArray) {
        cssArray.forEach(function(_cname) {
          if (ret) {
            return;
          }
          var cName = _cname.split("(")[0];
          var a2 = cName in cssList2.transformGroup && name.substring(0, name.length - 1).indexOf(cName) >= 0;
          var b2 = name in cssList2.transformGroup && cName.substring(0, cName.length - 1).indexOf(name) >= 0;
          var c2 = cName in cssList2.transformGroup && name in cssList2.transformGroup && (cName.substring(0, cName.length - 2) === name || name.substring(0, name.length - 2) === cName);
          if (cName === name || a2 || b2 || c2) {
            ret = _cname;
          }
        });
      }
      return ret;
    }
    function mergeStyle(current, change) {
      if (!current || current === "") {
        return change;
      }
      if (!change || change === "") {
        return current;
      }
      var _current = current.replace(/\s/g, "").split(")").filter(function(item) {
        return item !== "" && item;
      }).map(function(item) {
        return item + ")";
      });
      var _change = change.replace(/\s/g, "").split(")").filter(function(item) {
        return item !== "" && item;
      });
      _change.forEach(function(changeOnly) {
        var changeArr = changeOnly.split("(");
        var changeName = changeArr[0];
        var currentSame = findStyleByName(_current, changeName);
        if (!currentSame) {
          _current.push(changeOnly + ")");
        } else {
          var index = _current.indexOf(currentSame);
          _current[index] = changeOnly + ")";
        }
      });
      _current.forEach(function(item, i2) {
        if (item.indexOf("perspective") >= 0 && i2) {
          _current.splice(i2, 1);
          _current.unshift(item);
        }
      });
      return _current.join(" ").trim();
    }
  }
});

// node_modules/svgpath/lib/path_parse.js
var require_path_parse = __commonJS({
  "node_modules/svgpath/lib/path_parse.js"(exports, module) {
    "use strict";
    var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 };
    var SPECIAL_SPACES = [
      5760,
      6158,
      8192,
      8193,
      8194,
      8195,
      8196,
      8197,
      8198,
      8199,
      8200,
      8201,
      8202,
      8239,
      8287,
      12288,
      65279
    ];
    function isSpace(ch) {
      return ch === 10 || ch === 13 || ch === 8232 || ch === 8233 || // Line terminators
      // White spaces
      ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && SPECIAL_SPACES.indexOf(ch) >= 0;
    }
    function isCommand(code) {
      switch (code | 32) {
        case 109:
        case 122:
        case 108:
        case 104:
        case 118:
        case 99:
        case 115:
        case 113:
        case 116:
        case 97:
        case 114:
          return true;
      }
      return false;
    }
    function isArc(code) {
      return (code | 32) === 97;
    }
    function isDigit(code) {
      return code >= 48 && code <= 57;
    }
    function isDigitStart(code) {
      return code >= 48 && code <= 57 || /* 0..9 */
      code === 43 || /* + */
      code === 45 || /* - */
      code === 46;
    }
    function State(path) {
      this.index = 0;
      this.path = path;
      this.max = path.length;
      this.result = [];
      this.param = 0;
      this.err = "";
      this.segmentStart = 0;
      this.data = [];
    }
    function skipSpaces(state) {
      while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {
        state.index++;
      }
    }
    function scanFlag(state) {
      var ch = state.path.charCodeAt(state.index);
      if (ch === 48) {
        state.param = 0;
        state.index++;
        return;
      }
      if (ch === 49) {
        state.param = 1;
        state.index++;
        return;
      }
      state.err = "SvgPath: arc flag can be 0 or 1 only (at pos " + state.index + ")";
    }
    function scanParam(state) {
      var start = state.index, index = start, max = state.max, zeroFirst = false, hasCeiling = false, hasDecimal = false, hasDot = false, ch;
      if (index >= max) {
        state.err = "SvgPath: missed param (at pos " + index + ")";
        return;
      }
      ch = state.path.charCodeAt(index);
      if (ch === 43 || ch === 45) {
        index++;
        ch = index < max ? state.path.charCodeAt(index) : 0;
      }
      if (!isDigit(ch) && ch !== 46) {
        state.err = "SvgPath: param should start with 0..9 or `.` (at pos " + index + ")";
        return;
      }
      if (ch !== 46) {
        zeroFirst = ch === 48;
        index++;
        ch = index < max ? state.path.charCodeAt(index) : 0;
        if (zeroFirst && index < max) {
          if (ch && isDigit(ch)) {
            state.err = "SvgPath: numbers started with `0` such as `09` are illegal (at pos " + start + ")";
            return;
          }
        }
        while (index < max && isDigit(state.path.charCodeAt(index))) {
          index++;
          hasCeiling = true;
        }
        ch = index < max ? state.path.charCodeAt(index) : 0;
      }
      if (ch === 46) {
        hasDot = true;
        index++;
        while (isDigit(state.path.charCodeAt(index))) {
          index++;
          hasDecimal = true;
        }
        ch = index < max ? state.path.charCodeAt(index) : 0;
      }
      if (ch === 101 || ch === 69) {
        if (hasDot && !hasCeiling && !hasDecimal) {
          state.err = "SvgPath: invalid float exponent (at pos " + index + ")";
          return;
        }
        index++;
        ch = index < max ? state.path.charCodeAt(index) : 0;
        if (ch === 43 || ch === 45) {
          index++;
        }
        if (index < max && isDigit(state.path.charCodeAt(index))) {
          while (index < max && isDigit(state.path.charCodeAt(index))) {
            index++;
          }
        } else {
          state.err = "SvgPath: invalid float exponent (at pos " + index + ")";
          return;
        }
      }
      state.index = index;
      state.param = parseFloat(state.path.slice(start, index)) + 0;
    }
    function finalizeSegment(state) {
      var cmd, cmdLC;
      cmd = state.path[state.segmentStart];
      cmdLC = cmd.toLowerCase();
      var params = state.data;
      if (cmdLC === "m" && params.length > 2) {
        state.result.push([cmd, params[0], params[1]]);
        params = params.slice(2);
        cmdLC = "l";
        cmd = cmd === "m" ? "l" : "L";
      }
      if (cmdLC === "r") {
        state.result.push([cmd].concat(params));
      } else {
        while (params.length >= paramCounts[cmdLC]) {
          state.result.push([cmd].concat(params.splice(0, paramCounts[cmdLC])));
          if (!paramCounts[cmdLC]) {
            break;
          }
        }
      }
    }
    function scanSegment(state) {
      var max = state.max, cmdCode, is_arc, comma_found, need_params, i2;
      state.segmentStart = state.index;
      cmdCode = state.path.charCodeAt(state.index);
      is_arc = isArc(cmdCode);
      if (!isCommand(cmdCode)) {
        state.err = "SvgPath: bad command " + state.path[state.index] + " (at pos " + state.index + ")";
        return;
      }
      need_params = paramCounts[state.path[state.index].toLowerCase()];
      state.index++;
      skipSpaces(state);
      state.data = [];
      if (!need_params) {
        finalizeSegment(state);
        return;
      }
      comma_found = false;
      for (; ; ) {
        for (i2 = need_params; i2 > 0; i2--) {
          if (is_arc && (i2 === 3 || i2 === 4)) scanFlag(state);
          else scanParam(state);
          if (state.err.length) {
            finalizeSegment(state);
            return;
          }
          state.data.push(state.param);
          skipSpaces(state);
          comma_found = false;
          if (state.index < max && state.path.charCodeAt(state.index) === 44) {
            state.index++;
            skipSpaces(state);
            comma_found = true;
          }
        }
        if (comma_found) {
          continue;
        }
        if (state.index >= state.max) {
          break;
        }
        if (!isDigitStart(state.path.charCodeAt(state.index))) {
          break;
        }
      }
      finalizeSegment(state);
    }
    module.exports = function pathParse(svgPath) {
      var state = new State(svgPath);
      var max = state.max;
      skipSpaces(state);
      while (state.index < max && !state.err.length) {
        scanSegment(state);
      }
      if (state.result.length) {
        if ("mM".indexOf(state.result[0][0]) < 0) {
          state.err = "SvgPath: string should start with `M` or `m`";
          state.result = [];
        } else {
          state.result[0][0] = "M";
        }
      }
      return {
        err: state.err,
        segments: state.result
      };
    };
  }
});

// node_modules/svgpath/lib/matrix.js
var require_matrix = __commonJS({
  "node_modules/svgpath/lib/matrix.js"(exports, module) {
    "use strict";
    function combine2(m1, m2) {
      return [
        m1[0] * m2[0] + m1[2] * m2[1],
        m1[1] * m2[0] + m1[3] * m2[1],
        m1[0] * m2[2] + m1[2] * m2[3],
        m1[1] * m2[2] + m1[3] * m2[3],
        m1[0] * m2[4] + m1[2] * m2[5] + m1[4],
        m1[1] * m2[4] + m1[3] * m2[5] + m1[5]
      ];
    }
    function Matrix() {
      if (!(this instanceof Matrix)) {
        return new Matrix();
      }
      this.queue = [];
      this.cache = null;
    }
    Matrix.prototype.matrix = function(m2) {
      if (m2[0] === 1 && m2[1] === 0 && m2[2] === 0 && m2[3] === 1 && m2[4] === 0 && m2[5] === 0) {
        return this;
      }
      this.cache = null;
      this.queue.push(m2);
      return this;
    };
    Matrix.prototype.translate = function(tx, ty) {
      if (tx !== 0 || ty !== 0) {
        this.cache = null;
        this.queue.push([1, 0, 0, 1, tx, ty]);
      }
      return this;
    };
    Matrix.prototype.scale = function(sx, sy) {
      if (sx !== 1 || sy !== 1) {
        this.cache = null;
        this.queue.push([sx, 0, 0, sy, 0, 0]);
      }
      return this;
    };
    Matrix.prototype.rotate = function(angle, rx, ry) {
      var rad, cos, sin;
      if (angle !== 0) {
        this.translate(rx, ry);
        rad = angle * Math.PI / 180;
        cos = Math.cos(rad);
        sin = Math.sin(rad);
        this.queue.push([cos, sin, -sin, cos, 0, 0]);
        this.cache = null;
        this.translate(-rx, -ry);
      }
      return this;
    };
    Matrix.prototype.skewX = function(angle) {
      if (angle !== 0) {
        this.cache = null;
        this.queue.push([1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0]);
      }
      return this;
    };
    Matrix.prototype.skewY = function(angle) {
      if (angle !== 0) {
        this.cache = null;
        this.queue.push([1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0]);
      }
      return this;
    };
    Matrix.prototype.toArray = function() {
      if (this.cache) {
        return this.cache;
      }
      if (!this.queue.length) {
        this.cache = [1, 0, 0, 1, 0, 0];
        return this.cache;
      }
      this.cache = this.queue[0];
      if (this.queue.length === 1) {
        return this.cache;
      }
      for (var i2 = 1; i2 < this.queue.length; i2++) {
        this.cache = combine2(this.cache, this.queue[i2]);
      }
      return this.cache;
    };
    Matrix.prototype.calc = function(x2, y2, isRelative) {
      var m2;
      if (!this.queue.length) {
        return [x2, y2];
      }
      if (!this.cache) {
        this.cache = this.toArray();
      }
      m2 = this.cache;
      return [
        x2 * m2[0] + y2 * m2[2] + (isRelative ? 0 : m2[4]),
        x2 * m2[1] + y2 * m2[3] + (isRelative ? 0 : m2[5])
      ];
    };
    module.exports = Matrix;
  }
});

// node_modules/svgpath/lib/transform_parse.js
var require_transform_parse = __commonJS({
  "node_modules/svgpath/lib/transform_parse.js"(exports, module) {
    "use strict";
    var Matrix = require_matrix();
    var operations = {
      matrix: true,
      scale: true,
      rotate: true,
      translate: true,
      skewX: true,
      skewY: true
    };
    var CMD_SPLIT_RE = /\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/;
    var PARAMS_SPLIT_RE = /[\s,]+/;
    module.exports = function transformParse(transformString) {
      var matrix = new Matrix();
      var cmd, params;
      transformString.split(CMD_SPLIT_RE).forEach(function(item) {
        if (!item.length) {
          return;
        }
        if (typeof operations[item] !== "undefined") {
          cmd = item;
          return;
        }
        params = item.split(PARAMS_SPLIT_RE).map(function(i2) {
          return +i2 || 0;
        });
        switch (cmd) {
          case "matrix":
            if (params.length === 6) {
              matrix.matrix(params);
            }
            return;
          case "scale":
            if (params.length === 1) {
              matrix.scale(params[0], params[0]);
            } else if (params.length === 2) {
              matrix.scale(params[0], params[1]);
            }
            return;
          case "rotate":
            if (params.length === 1) {
              matrix.rotate(params[0], 0, 0);
            } else if (params.length === 3) {
              matrix.rotate(params[0], params[1], params[2]);
            }
            return;
          case "translate":
            if (params.length === 1) {
              matrix.translate(params[0], 0);
            } else if (params.length === 2) {
              matrix.translate(params[0], params[1]);
            }
            return;
          case "skewX":
            if (params.length === 1) {
              matrix.skewX(params[0]);
            }
            return;
          case "skewY":
            if (params.length === 1) {
              matrix.skewY(params[0]);
            }
            return;
        }
      });
      return matrix;
    };
  }
});

// node_modules/svgpath/lib/a2c.js
var require_a2c = __commonJS({
  "node_modules/svgpath/lib/a2c.js"(exports, module) {
    "use strict";
    var TAU2 = Math.PI * 2;
    function unit_vector_angle2(ux, uy, vx, vy) {
      var sign = ux * vy - uy * vx < 0 ? -1 : 1;
      var dot = ux * vx + uy * vy;
      if (dot > 1) {
        dot = 1;
      }
      if (dot < -1) {
        dot = -1;
      }
      return sign * Math.acos(dot);
    }
    function get_arc_center2(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {
      var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;
      var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;
      var rx_sq = rx * rx;
      var ry_sq = ry * ry;
      var x1p_sq = x1p * x1p;
      var y1p_sq = y1p * y1p;
      var radicant = rx_sq * ry_sq - rx_sq * y1p_sq - ry_sq * x1p_sq;
      if (radicant < 0) {
        radicant = 0;
      }
      radicant /= rx_sq * y1p_sq + ry_sq * x1p_sq;
      radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);
      var cxp = radicant * rx / ry * y1p;
      var cyp = radicant * -ry / rx * x1p;
      var cx = cos_phi * cxp - sin_phi * cyp + (x1 + x2) / 2;
      var cy = sin_phi * cxp + cos_phi * cyp + (y1 + y2) / 2;
      var v1x = (x1p - cxp) / rx;
      var v1y = (y1p - cyp) / ry;
      var v2x = (-x1p - cxp) / rx;
      var v2y = (-y1p - cyp) / ry;
      var theta1 = unit_vector_angle2(1, 0, v1x, v1y);
      var delta_theta = unit_vector_angle2(v1x, v1y, v2x, v2y);
      if (fs === 0 && delta_theta > 0) {
        delta_theta -= TAU2;
      }
      if (fs === 1 && delta_theta < 0) {
        delta_theta += TAU2;
      }
      return [cx, cy, theta1, delta_theta];
    }
    function approximate_unit_arc2(theta1, delta_theta) {
      var alpha = 4 / 3 * Math.tan(delta_theta / 4);
      var x1 = Math.cos(theta1);
      var y1 = Math.sin(theta1);
      var x2 = Math.cos(theta1 + delta_theta);
      var y2 = Math.sin(theta1 + delta_theta);
      return [x1, y1, x1 - y1 * alpha, y1 + x1 * alpha, x2 + y2 * alpha, y2 - x2 * alpha, x2, y2];
    }
    module.exports = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {
      var sin_phi = Math.sin(phi * TAU2 / 360);
      var cos_phi = Math.cos(phi * TAU2 / 360);
      var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;
      var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;
      if (x1p === 0 && y1p === 0) {
        return [];
      }
      if (rx === 0 || ry === 0) {
        return [];
      }
      rx = Math.abs(rx);
      ry = Math.abs(ry);
      var lambda = x1p * x1p / (rx * rx) + y1p * y1p / (ry * ry);
      if (lambda > 1) {
        rx *= Math.sqrt(lambda);
        ry *= Math.sqrt(lambda);
      }
      var cc = get_arc_center2(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);
      var result = [];
      var theta1 = cc[2];
      var delta_theta = cc[3];
      var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU2 / 4)), 1);
      delta_theta /= segments;
      for (var i2 = 0; i2 < segments; i2++) {
        result.push(approximate_unit_arc2(theta1, delta_theta));
        theta1 += delta_theta;
      }
      return result.map(function(curve) {
        for (var i3 = 0; i3 < curve.length; i3 += 2) {
          var x3 = curve[i3 + 0];
          var y3 = curve[i3 + 1];
          x3 *= rx;
          y3 *= ry;
          var xp = cos_phi * x3 - sin_phi * y3;
          var yp = sin_phi * x3 + cos_phi * y3;
          curve[i3 + 0] = xp + cc[0];
          curve[i3 + 1] = yp + cc[1];
        }
        return curve;
      });
    };
  }
});

// node_modules/svgpath/lib/ellipse.js
var require_ellipse = __commonJS({
  "node_modules/svgpath/lib/ellipse.js"(exports, module) {
    "use strict";
    var epsilon = 1e-10;
    var torad = Math.PI / 180;
    function Ellipse(rx, ry, ax) {
      if (!(this instanceof Ellipse)) {
        return new Ellipse(rx, ry, ax);
      }
      this.rx = rx;
      this.ry = ry;
      this.ax = ax;
    }
    Ellipse.prototype.transform = function(m2) {
      var c2 = Math.cos(this.ax * torad), s2 = Math.sin(this.ax * torad);
      var ma = [
        this.rx * (m2[0] * c2 + m2[2] * s2),
        this.rx * (m2[1] * c2 + m2[3] * s2),
        this.ry * (-m2[0] * s2 + m2[2] * c2),
        this.ry * (-m2[1] * s2 + m2[3] * c2)
      ];
      var J = ma[0] * ma[0] + ma[2] * ma[2], K = ma[1] * ma[1] + ma[3] * ma[3];
      var D = ((ma[0] - ma[3]) * (ma[0] - ma[3]) + (ma[2] + ma[1]) * (ma[2] + ma[1])) * ((ma[0] + ma[3]) * (ma[0] + ma[3]) + (ma[2] - ma[1]) * (ma[2] - ma[1]));
      var JK = (J + K) / 2;
      if (D < epsilon * JK) {
        this.rx = this.ry = Math.sqrt(JK);
        this.ax = 0;
        return this;
      }
      var L2 = ma[0] * ma[1] + ma[2] * ma[3];
      D = Math.sqrt(D);
      var l1 = JK + D / 2, l2 = JK - D / 2;
      this.ax = Math.abs(L2) < epsilon && Math.abs(l1 - K) < epsilon ? 90 : Math.atan(
        Math.abs(L2) > Math.abs(l1 - K) ? (l1 - J) / L2 : L2 / (l1 - K)
      ) * 180 / Math.PI;
      if (this.ax >= 0) {
        this.rx = Math.sqrt(l1);
        this.ry = Math.sqrt(l2);
      } else {
        this.ax += 90;
        this.rx = Math.sqrt(l2);
        this.ry = Math.sqrt(l1);
      }
      return this;
    };
    Ellipse.prototype.isDegenerate = function() {
      return this.rx < epsilon * this.ry || this.ry < epsilon * this.rx;
    };
    module.exports = Ellipse;
  }
});

// node_modules/svgpath/lib/svgpath.js
var require_svgpath = __commonJS({
  "node_modules/svgpath/lib/svgpath.js"(exports, module) {
    "use strict";
    var pathParse = require_path_parse();
    var transformParse = require_transform_parse();
    var matrix = require_matrix();
    var a2c = require_a2c();
    var ellipse = require_ellipse();
    function SvgPath(path) {
      if (!(this instanceof SvgPath)) {
        return new SvgPath(path);
      }
      var pstate = pathParse(path);
      this.segments = pstate.segments;
      this.err = pstate.err;
      this.__stack = [];
    }
    SvgPath.from = function(src) {
      if (typeof src === "string") return new SvgPath(src);
      if (src instanceof SvgPath) {
        var s2 = new SvgPath("");
        s2.err = src.err;
        s2.segments = src.segments.map(function(sgm) {
          return sgm.slice();
        });
        s2.__stack = src.__stack.map(function(m2) {
          return matrix().matrix(m2.toArray());
        });
        return s2;
      }
      throw new Error("SvgPath.from: invalid param type " + src);
    };
    SvgPath.prototype.__matrix = function(m2) {
      var self = this, i2;
      if (!m2.queue.length) {
        return;
      }
      this.iterate(function(s2, index, x2, y2) {
        var p2, result, name, isRelative;
        switch (s2[0]) {
          // Process 'assymetric' commands separately
          case "v":
            p2 = m2.calc(0, s2[1], true);
            result = p2[0] === 0 ? ["v", p2[1]] : ["l", p2[0], p2[1]];
            break;
          case "V":
            p2 = m2.calc(x2, s2[1], false);
            result = p2[0] === m2.calc(x2, y2, false)[0] ? ["V", p2[1]] : ["L", p2[0], p2[1]];
            break;
          case "h":
            p2 = m2.calc(s2[1], 0, true);
            result = p2[1] === 0 ? ["h", p2[0]] : ["l", p2[0], p2[1]];
            break;
          case "H":
            p2 = m2.calc(s2[1], y2, false);
            result = p2[1] === m2.calc(x2, y2, false)[1] ? ["H", p2[0]] : ["L", p2[0], p2[1]];
            break;
          case "a":
          case "A":
            var ma = m2.toArray();
            var e3 = ellipse(s2[1], s2[2], s2[3]).transform(ma);
            if (ma[0] * ma[3] - ma[1] * ma[2] < 0) {
              s2[5] = s2[5] ? "0" : "1";
            }
            p2 = m2.calc(s2[6], s2[7], s2[0] === "a");
            if (s2[0] === "A" && s2[6] === x2 && s2[7] === y2 || s2[0] === "a" && s2[6] === 0 && s2[7] === 0) {
              result = [s2[0] === "a" ? "l" : "L", p2[0], p2[1]];
              break;
            }
            if (e3.isDegenerate()) {
              result = [s2[0] === "a" ? "l" : "L", p2[0], p2[1]];
            } else {
              result = [s2[0], e3.rx, e3.ry, e3.ax, s2[4], s2[5], p2[0], p2[1]];
            }
            break;
          case "m":
            isRelative = index > 0;
            p2 = m2.calc(s2[1], s2[2], isRelative);
            result = ["m", p2[0], p2[1]];
            break;
          default:
            name = s2[0];
            result = [name];
            isRelative = name.toLowerCase() === name;
            for (i2 = 1; i2 < s2.length; i2 += 2) {
              p2 = m2.calc(s2[i2], s2[i2 + 1], isRelative);
              result.push(p2[0], p2[1]);
            }
        }
        self.segments[index] = result;
      }, true);
    };
    SvgPath.prototype.__evaluateStack = function() {
      var m2, i2;
      if (!this.__stack.length) {
        return;
      }
      if (this.__stack.length === 1) {
        this.__matrix(this.__stack[0]);
        this.__stack = [];
        return;
      }
      m2 = matrix();
      i2 = this.__stack.length;
      while (--i2 >= 0) {
        m2.matrix(this.__stack[i2].toArray());
      }
      this.__matrix(m2);
      this.__stack = [];
    };
    SvgPath.prototype.toString = function() {
      var result = "", prevCmd = "", cmdSkipped = false;
      this.__evaluateStack();
      for (var i2 = 0, len = this.segments.length; i2 < len; i2++) {
        var segment2 = this.segments[i2];
        var cmd = segment2[0];
        if (cmd !== prevCmd || cmd === "m" || cmd === "M") {
          if (cmd === "m" && prevCmd === "z") result += " ";
          result += cmd;
          cmdSkipped = false;
        } else {
          cmdSkipped = true;
        }
        for (var pos = 1; pos < segment2.length; pos++) {
          var val = segment2[pos];
          if (pos === 1) {
            if (cmdSkipped && val >= 0) result += " ";
          } else if (val >= 0) result += " ";
          result += val;
        }
        prevCmd = cmd;
      }
      return result;
    };
    SvgPath.prototype.translate = function(x2, y2) {
      this.__stack.push(matrix().translate(x2, y2 || 0));
      return this;
    };
    SvgPath.prototype.scale = function(sx, sy) {
      this.__stack.push(matrix().scale(sx, !sy && sy !== 0 ? sx : sy));
      return this;
    };
    SvgPath.prototype.rotate = function(angle, rx, ry) {
      this.__stack.push(matrix().rotate(angle, rx || 0, ry || 0));
      return this;
    };
    SvgPath.prototype.skewX = function(degrees) {
      this.__stack.push(matrix().skewX(degrees));
      return this;
    };
    SvgPath.prototype.skewY = function(degrees) {
      this.__stack.push(matrix().skewY(degrees));
      return this;
    };
    SvgPath.prototype.matrix = function(m2) {
      this.__stack.push(matrix().matrix(m2));
      return this;
    };
    SvgPath.prototype.transform = function(transformString) {
      if (!transformString.trim()) {
        return this;
      }
      this.__stack.push(transformParse(transformString));
      return this;
    };
    SvgPath.prototype.round = function(d2) {
      var contourStartDeltaX = 0, contourStartDeltaY = 0, deltaX = 0, deltaY = 0, l2;
      d2 = d2 || 0;
      this.__evaluateStack();
      this.segments.forEach(function(s2) {
        var isRelative = s2[0].toLowerCase() === s2[0];
        switch (s2[0]) {
          case "H":
          case "h":
            if (isRelative) {
              s2[1] += deltaX;
            }
            deltaX = s2[1] - s2[1].toFixed(d2);
            s2[1] = +s2[1].toFixed(d2);
            return;
          case "V":
          case "v":
            if (isRelative) {
              s2[1] += deltaY;
            }
            deltaY = s2[1] - s2[1].toFixed(d2);
            s2[1] = +s2[1].toFixed(d2);
            return;
          case "Z":
          case "z":
            deltaX = contourStartDeltaX;
            deltaY = contourStartDeltaY;
            return;
          case "M":
          case "m":
            if (isRelative) {
              s2[1] += deltaX;
              s2[2] += deltaY;
            }
            deltaX = s2[1] - s2[1].toFixed(d2);
            deltaY = s2[2] - s2[2].toFixed(d2);
            contourStartDeltaX = deltaX;
            contourStartDeltaY = deltaY;
            s2[1] = +s2[1].toFixed(d2);
            s2[2] = +s2[2].toFixed(d2);
            return;
          case "A":
          case "a":
            if (isRelative) {
              s2[6] += deltaX;
              s2[7] += deltaY;
            }
            deltaX = s2[6] - s2[6].toFixed(d2);
            deltaY = s2[7] - s2[7].toFixed(d2);
            s2[1] = +s2[1].toFixed(d2);
            s2[2] = +s2[2].toFixed(d2);
            s2[3] = +s2[3].toFixed(d2 + 2);
            s2[6] = +s2[6].toFixed(d2);
            s2[7] = +s2[7].toFixed(d2);
            return;
          default:
            l2 = s2.length;
            if (isRelative) {
              s2[l2 - 2] += deltaX;
              s2[l2 - 1] += deltaY;
            }
            deltaX = s2[l2 - 2] - s2[l2 - 2].toFixed(d2);
            deltaY = s2[l2 - 1] - s2[l2 - 1].toFixed(d2);
            s2.forEach(function(val, i2) {
              if (!i2) {
                return;
              }
              s2[i2] = +s2[i2].toFixed(d2);
            });
            return;
        }
      });
      return this;
    };
    SvgPath.prototype.iterate = function(iterator, keepLazyStack) {
      var segments = this.segments, replacements = {}, needReplace = false, lastX = 0, lastY = 0, countourStartX = 0, countourStartY = 0;
      var i2, j2, newSegments;
      if (!keepLazyStack) {
        this.__evaluateStack();
      }
      segments.forEach(function(s2, index) {
        var res = iterator(s2, index, lastX, lastY);
        if (Array.isArray(res)) {
          replacements[index] = res;
          needReplace = true;
        }
        var isRelative = s2[0] === s2[0].toLowerCase();
        switch (s2[0]) {
          case "m":
          case "M":
            lastX = s2[1] + (isRelative ? lastX : 0);
            lastY = s2[2] + (isRelative ? lastY : 0);
            countourStartX = lastX;
            countourStartY = lastY;
            return;
          case "h":
          case "H":
            lastX = s2[1] + (isRelative ? lastX : 0);
            return;
          case "v":
          case "V":
            lastY = s2[1] + (isRelative ? lastY : 0);
            return;
          case "z":
          case "Z":
            lastX = countourStartX;
            lastY = countourStartY;
            return;
          default:
            lastX = s2[s2.length - 2] + (isRelative ? lastX : 0);
            lastY = s2[s2.length - 1] + (isRelative ? lastY : 0);
        }
      });
      if (!needReplace) {
        return this;
      }
      newSegments = [];
      for (i2 = 0; i2 < segments.length; i2++) {
        if (typeof replacements[i2] !== "undefined") {
          for (j2 = 0; j2 < replacements[i2].length; j2++) {
            newSegments.push(replacements[i2][j2]);
          }
        } else {
          newSegments.push(segments[i2]);
        }
      }
      this.segments = newSegments;
      return this;
    };
    SvgPath.prototype.abs = function() {
      this.iterate(function(s2, index, x2, y2) {
        var name = s2[0], nameUC = name.toUpperCase(), i2;
        if (name === nameUC) {
          return;
        }
        s2[0] = nameUC;
        switch (name) {
          case "v":
            s2[1] += y2;
            return;
          case "a":
            s2[6] += x2;
            s2[7] += y2;
            return;
          default:
            for (i2 = 1; i2 < s2.length; i2++) {
              s2[i2] += i2 % 2 ? x2 : y2;
            }
        }
      }, true);
      return this;
    };
    SvgPath.prototype.rel = function() {
      this.iterate(function(s2, index, x2, y2) {
        var name = s2[0], nameLC = name.toLowerCase(), i2;
        if (name === nameLC) {
          return;
        }
        if (index === 0 && name === "M") {
          return;
        }
        s2[0] = nameLC;
        switch (name) {
          case "V":
            s2[1] -= y2;
            return;
          case "A":
            s2[6] -= x2;
            s2[7] -= y2;
            return;
          default:
            for (i2 = 1; i2 < s2.length; i2++) {
              s2[i2] -= i2 % 2 ? x2 : y2;
            }
        }
      }, true);
      return this;
    };
    SvgPath.prototype.unarc = function() {
      this.iterate(function(s2, index, x2, y2) {
        var new_segments, nextX, nextY, result = [], name = s2[0];
        if (name !== "A" && name !== "a") {
          return null;
        }
        if (name === "a") {
          nextX = x2 + s2[6];
          nextY = y2 + s2[7];
        } else {
          nextX = s2[6];
          nextY = s2[7];
        }
        new_segments = a2c(x2, y2, nextX, nextY, s2[4], s2[5], s2[1], s2[2], s2[3]);
        if (new_segments.length === 0) {
          return [[s2[0] === "a" ? "l" : "L", s2[6], s2[7]]];
        }
        new_segments.forEach(function(s3) {
          result.push(["C", s3[2], s3[3], s3[4], s3[5], s3[6], s3[7]]);
        });
        return result;
      });
      return this;
    };
    SvgPath.prototype.unshort = function() {
      var segments = this.segments;
      var prevControlX, prevControlY, prevSegment;
      var curControlX, curControlY;
      this.iterate(function(s2, idx, x2, y2) {
        var name = s2[0], nameUC = name.toUpperCase(), isRelative;
        if (!idx) {
          return;
        }
        if (nameUC === "T") {
          isRelative = name === "t";
          prevSegment = segments[idx - 1];
          if (prevSegment[0] === "Q") {
            prevControlX = prevSegment[1] - x2;
            prevControlY = prevSegment[2] - y2;
          } else if (prevSegment[0] === "q") {
            prevControlX = prevSegment[1] - prevSegment[3];
            prevControlY = prevSegment[2] - prevSegment[4];
          } else {
            prevControlX = 0;
            prevControlY = 0;
          }
          curControlX = -prevControlX;
          curControlY = -prevControlY;
          if (!isRelative) {
            curControlX += x2;
            curControlY += y2;
          }
          segments[idx] = [
            isRelative ? "q" : "Q",
            curControlX,
            curControlY,
            s2[1],
            s2[2]
          ];
        } else if (nameUC === "S") {
          isRelative = name === "s";
          prevSegment = segments[idx - 1];
          if (prevSegment[0] === "C") {
            prevControlX = prevSegment[3] - x2;
            prevControlY = prevSegment[4] - y2;
          } else if (prevSegment[0] === "c") {
            prevControlX = prevSegment[3] - prevSegment[5];
            prevControlY = prevSegment[4] - prevSegment[6];
          } else {
            prevControlX = 0;
            prevControlY = 0;
          }
          curControlX = -prevControlX;
          curControlY = -prevControlY;
          if (!isRelative) {
            curControlX += x2;
            curControlY += y2;
          }
          segments[idx] = [
            isRelative ? "c" : "C",
            curControlX,
            curControlY,
            s2[1],
            s2[2],
            s2[3],
            s2[4]
          ];
        }
      });
      return this;
    };
    module.exports = SvgPath;
  }
});

// node_modules/svgpath/index.js
var require_svgpath2 = __commonJS({
  "node_modules/svgpath/index.js"(exports, module) {
    "use strict";
    module.exports = require_svgpath();
  }
});

// node_modules/earcut/src/earcut.js
var require_earcut = __commonJS({
  "node_modules/earcut/src/earcut.js"(exports, module) {
    "use strict";
    module.exports = earcut2;
    module.exports.default = earcut2;
    function earcut2(data, holeIndices, dim) {
      dim = dim || 2;
      var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];
      if (!outerNode || outerNode.next === outerNode.prev) return triangles;
      var minX, minY, maxX, maxY, x2, y2, invSize;
      if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
      if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for (var i2 = dim; i2 < outerLen; i2 += dim) {
          x2 = data[i2];
          y2 = data[i2 + 1];
          if (x2 < minX) minX = x2;
          if (y2 < minY) minY = y2;
          if (x2 > maxX) maxX = x2;
          if (y2 > maxY) maxY = y2;
        }
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 32767 / invSize : 0;
      }
      earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
      return triangles;
    }
    function linkedList(data, start, end, dim, clockwise) {
      var i2, last;
      if (clockwise === signedArea(data, start, end, dim) > 0) {
        for (i2 = start; i2 < end; i2 += dim) last = insertNode(i2, data[i2], data[i2 + 1], last);
      } else {
        for (i2 = end - dim; i2 >= start; i2 -= dim) last = insertNode(i2, data[i2], data[i2 + 1], last);
      }
      if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
      }
      return last;
    }
    function filterPoints(start, end) {
      if (!start) return start;
      if (!end) end = start;
      var p2 = start, again;
      do {
        again = false;
        if (!p2.steiner && (equals(p2, p2.next) || area(p2.prev, p2, p2.next) === 0)) {
          removeNode(p2);
          p2 = end = p2.prev;
          if (p2 === p2.next) break;
          again = true;
        } else {
          p2 = p2.next;
        }
      } while (again || p2 !== end);
      return end;
    }
    function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
      if (!ear) return;
      if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
      var stop = ear, prev, next;
      while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
          triangles.push(prev.i / dim | 0);
          triangles.push(ear.i / dim | 0);
          triangles.push(next.i / dim | 0);
          removeNode(ear);
          ear = next.next;
          stop = next.next;
          continue;
        }
        ear = next;
        if (ear === stop) {
          if (!pass) {
            earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
          } else if (pass === 1) {
            ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
            earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
          } else if (pass === 2) {
            splitEarcut(ear, triangles, dim, minX, minY, invSize);
          }
          break;
        }
      }
    }
    function isEar(ear) {
      var a2 = ear.prev, b2 = ear, c2 = ear.next;
      if (area(a2, b2, c2) >= 0) return false;
      var ax = a2.x, bx = b2.x, cx = c2.x, ay = a2.y, by = b2.y, cy = c2.y;
      var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
      var p2 = c2.next;
      while (p2 !== a2) {
        if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
        p2 = p2.next;
      }
      return true;
    }
    function isEarHashed(ear, minX, minY, invSize) {
      var a2 = ear.prev, b2 = ear, c2 = ear.next;
      if (area(a2, b2, c2) >= 0) return false;
      var ax = a2.x, bx = b2.x, cx = c2.x, ay = a2.y, by = b2.y, cy = c2.y;
      var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
      var minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
      var p2 = ear.prevZ, n2 = ear.nextZ;
      while (p2 && p2.z >= minZ && n2 && n2.z <= maxZ) {
        if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a2 && p2 !== c2 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
        p2 = p2.prevZ;
        if (n2.x >= x0 && n2.x <= x1 && n2.y >= y0 && n2.y <= y1 && n2 !== a2 && n2 !== c2 && pointInTriangle(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0) return false;
        n2 = n2.nextZ;
      }
      while (p2 && p2.z >= minZ) {
        if (p2.x >= x0 && p2.x <= x1 && p2.y >= y0 && p2.y <= y1 && p2 !== a2 && p2 !== c2 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
        p2 = p2.prevZ;
      }
      while (n2 && n2.z <= maxZ) {
        if (n2.x >= x0 && n2.x <= x1 && n2.y >= y0 && n2.y <= y1 && n2 !== a2 && n2 !== c2 && pointInTriangle(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0) return false;
        n2 = n2.nextZ;
      }
      return true;
    }
    function cureLocalIntersections(start, triangles, dim) {
      var p2 = start;
      do {
        var a2 = p2.prev, b2 = p2.next.next;
        if (!equals(a2, b2) && intersects(a2, p2, p2.next, b2) && locallyInside(a2, b2) && locallyInside(b2, a2)) {
          triangles.push(a2.i / dim | 0);
          triangles.push(p2.i / dim | 0);
          triangles.push(b2.i / dim | 0);
          removeNode(p2);
          removeNode(p2.next);
          p2 = start = b2;
        }
        p2 = p2.next;
      } while (p2 !== start);
      return filterPoints(p2);
    }
    function splitEarcut(start, triangles, dim, minX, minY, invSize) {
      var a2 = start;
      do {
        var b2 = a2.next.next;
        while (b2 !== a2.prev) {
          if (a2.i !== b2.i && isValidDiagonal(a2, b2)) {
            var c2 = splitPolygon(a2, b2);
            a2 = filterPoints(a2, a2.next);
            c2 = filterPoints(c2, c2.next);
            earcutLinked(a2, triangles, dim, minX, minY, invSize, 0);
            earcutLinked(c2, triangles, dim, minX, minY, invSize, 0);
            return;
          }
          b2 = b2.next;
        }
        a2 = a2.next;
      } while (a2 !== start);
    }
    function eliminateHoles(data, holeIndices, outerNode, dim) {
      var queue = [], i2, len, start, end, list;
      for (i2 = 0, len = holeIndices.length; i2 < len; i2++) {
        start = holeIndices[i2] * dim;
        end = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
      }
      queue.sort(compareX);
      for (i2 = 0; i2 < queue.length; i2++) {
        outerNode = eliminateHole(queue[i2], outerNode);
      }
      return outerNode;
    }
    function compareX(a2, b2) {
      return a2.x - b2.x;
    }
    function eliminateHole(hole, outerNode) {
      var bridge = findHoleBridge(hole, outerNode);
      if (!bridge) {
        return outerNode;
      }
      var bridgeReverse = splitPolygon(bridge, hole);
      filterPoints(bridgeReverse, bridgeReverse.next);
      return filterPoints(bridge, bridge.next);
    }
    function findHoleBridge(hole, outerNode) {
      var p2 = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m2;
      do {
        if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
          var x2 = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
          if (x2 <= hx && x2 > qx) {
            qx = x2;
            m2 = p2.x < p2.next.x ? p2 : p2.next;
            if (x2 === hx) return m2;
          }
        }
        p2 = p2.next;
      } while (p2 !== outerNode);
      if (!m2) return null;
      var stop = m2, mx = m2.x, my = m2.y, tanMin = Infinity, tan;
      p2 = m2;
      do {
        if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
          tan = Math.abs(hy - p2.y) / (hx - p2.x);
          if (locallyInside(p2, hole) && (tan < tanMin || tan === tanMin && (p2.x > m2.x || p2.x === m2.x && sectorContainsSector(m2, p2)))) {
            m2 = p2;
            tanMin = tan;
          }
        }
        p2 = p2.next;
      } while (p2 !== stop);
      return m2;
    }
    function sectorContainsSector(m2, p2) {
      return area(m2.prev, m2, p2.prev) < 0 && area(p2.next, m2, m2.next) < 0;
    }
    function indexCurve(start, minX, minY, invSize) {
      var p2 = start;
      do {
        if (p2.z === 0) p2.z = zOrder(p2.x, p2.y, minX, minY, invSize);
        p2.prevZ = p2.prev;
        p2.nextZ = p2.next;
        p2 = p2.next;
      } while (p2 !== start);
      p2.prevZ.nextZ = null;
      p2.prevZ = null;
      sortLinked(p2);
    }
    function sortLinked(list) {
      var i2, p2, q2, e3, tail, numMerges, pSize, qSize, inSize = 1;
      do {
        p2 = list;
        list = null;
        tail = null;
        numMerges = 0;
        while (p2) {
          numMerges++;
          q2 = p2;
          pSize = 0;
          for (i2 = 0; i2 < inSize; i2++) {
            pSize++;
            q2 = q2.nextZ;
            if (!q2) break;
          }
          qSize = inSize;
          while (pSize > 0 || qSize > 0 && q2) {
            if (pSize !== 0 && (qSize === 0 || !q2 || p2.z <= q2.z)) {
              e3 = p2;
              p2 = p2.nextZ;
              pSize--;
            } else {
              e3 = q2;
              q2 = q2.nextZ;
              qSize--;
            }
            if (tail) tail.nextZ = e3;
            else list = e3;
            e3.prevZ = tail;
            tail = e3;
          }
          p2 = q2;
        }
        tail.nextZ = null;
        inSize *= 2;
      } while (numMerges > 1);
      return list;
    }
    function zOrder(x2, y2, minX, minY, invSize) {
      x2 = (x2 - minX) * invSize | 0;
      y2 = (y2 - minY) * invSize | 0;
      x2 = (x2 | x2 << 8) & 16711935;
      x2 = (x2 | x2 << 4) & 252645135;
      x2 = (x2 | x2 << 2) & 858993459;
      x2 = (x2 | x2 << 1) & 1431655765;
      y2 = (y2 | y2 << 8) & 16711935;
      y2 = (y2 | y2 << 4) & 252645135;
      y2 = (y2 | y2 << 2) & 858993459;
      y2 = (y2 | y2 << 1) & 1431655765;
      return x2 | y2 << 1;
    }
    function getLeftmost(start) {
      var p2 = start, leftmost = start;
      do {
        if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y) leftmost = p2;
        p2 = p2.next;
      } while (p2 !== start);
      return leftmost;
    }
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
      return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
    }
    function isValidDiagonal(a2, b2) {
      return a2.next.i !== b2.i && a2.prev.i !== b2.i && !intersectsPolygon(a2, b2) && // dones't intersect other edges
      (locallyInside(a2, b2) && locallyInside(b2, a2) && middleInside(a2, b2) && // locally visible
      (area(a2.prev, a2, b2.prev) || area(a2, b2.prev, b2)) || // does not create opposite-facing sectors
      equals(a2, b2) && area(a2.prev, a2, a2.next) > 0 && area(b2.prev, b2, b2.next) > 0);
    }
    function area(p2, q2, r2) {
      return (q2.y - p2.y) * (r2.x - q2.x) - (q2.x - p2.x) * (r2.y - q2.y);
    }
    function equals(p1, p2) {
      return p1.x === p2.x && p1.y === p2.y;
    }
    function intersects(p1, q1, p2, q2) {
      var o1 = sign(area(p1, q1, p2));
      var o2 = sign(area(p1, q1, q2));
      var o3 = sign(area(p2, q2, p1));
      var o4 = sign(area(p2, q2, q1));
      if (o1 !== o2 && o3 !== o4) return true;
      if (o1 === 0 && onSegment(p1, p2, q1)) return true;
      if (o2 === 0 && onSegment(p1, q2, q1)) return true;
      if (o3 === 0 && onSegment(p2, p1, q2)) return true;
      if (o4 === 0 && onSegment(p2, q1, q2)) return true;
      return false;
    }
    function onSegment(p2, q2, r2) {
      return q2.x <= Math.max(p2.x, r2.x) && q2.x >= Math.min(p2.x, r2.x) && q2.y <= Math.max(p2.y, r2.y) && q2.y >= Math.min(p2.y, r2.y);
    }
    function sign(num) {
      return num > 0 ? 1 : num < 0 ? -1 : 0;
    }
    function intersectsPolygon(a2, b2) {
      var p2 = a2;
      do {
        if (p2.i !== a2.i && p2.next.i !== a2.i && p2.i !== b2.i && p2.next.i !== b2.i && intersects(p2, p2.next, a2, b2)) return true;
        p2 = p2.next;
      } while (p2 !== a2);
      return false;
    }
    function locallyInside(a2, b2) {
      return area(a2.prev, a2, a2.next) < 0 ? area(a2, b2, a2.next) >= 0 && area(a2, a2.prev, b2) >= 0 : area(a2, b2, a2.prev) < 0 || area(a2, a2.next, b2) < 0;
    }
    function middleInside(a2, b2) {
      var p2 = a2, inside = false, px = (a2.x + b2.x) / 2, py = (a2.y + b2.y) / 2;
      do {
        if (p2.y > py !== p2.next.y > py && p2.next.y !== p2.y && px < (p2.next.x - p2.x) * (py - p2.y) / (p2.next.y - p2.y) + p2.x)
          inside = !inside;
        p2 = p2.next;
      } while (p2 !== a2);
      return inside;
    }
    function splitPolygon(a2, b2) {
      var a22 = new Node(a2.i, a2.x, a2.y), b22 = new Node(b2.i, b2.x, b2.y), an = a2.next, bp = b2.prev;
      a2.next = b2;
      b2.prev = a2;
      a22.next = an;
      an.prev = a22;
      b22.next = a22;
      a22.prev = b22;
      bp.next = b22;
      b22.prev = bp;
      return b22;
    }
    function insertNode(i2, x2, y2, last) {
      var p2 = new Node(i2, x2, y2);
      if (!last) {
        p2.prev = p2;
        p2.next = p2;
      } else {
        p2.next = last.next;
        p2.prev = last;
        last.next.prev = p2;
        last.next = p2;
      }
      return p2;
    }
    function removeNode(p2) {
      p2.next.prev = p2.prev;
      p2.prev.next = p2.next;
      if (p2.prevZ) p2.prevZ.nextZ = p2.nextZ;
      if (p2.nextZ) p2.nextZ.prevZ = p2.prevZ;
    }
    function Node(i2, x2, y2) {
      this.i = i2;
      this.x = x2;
      this.y = y2;
      this.prev = null;
      this.next = null;
      this.z = 0;
      this.prevZ = null;
      this.nextZ = null;
      this.steiner = false;
    }
    earcut2.deviation = function(data, holeIndices, dim, triangles) {
      var hasHoles = holeIndices && holeIndices.length;
      var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
      var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
      if (hasHoles) {
        for (var i2 = 0, len = holeIndices.length; i2 < len; i2++) {
          var start = holeIndices[i2] * dim;
          var end = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
          polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
      }
      var trianglesArea = 0;
      for (i2 = 0; i2 < triangles.length; i2 += 3) {
        var a2 = triangles[i2] * dim;
        var b2 = triangles[i2 + 1] * dim;
        var c2 = triangles[i2 + 2] * dim;
        trianglesArea += Math.abs(
          (data[a2] - data[c2]) * (data[b2 + 1] - data[a2 + 1]) - (data[a2] - data[b2]) * (data[c2 + 1] - data[a2 + 1])
        );
      }
      return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
    };
    function signedArea(data, start, end, dim) {
      var sum = 0;
      for (var i2 = start, j2 = end - dim; i2 < end; i2 += dim) {
        sum += (data[j2] - data[i2]) * (data[i2 + 1] + data[j2 + 1]);
        j2 = i2;
      }
      return sum;
    }
    earcut2.flatten = function(data) {
      var dim = data[0][0].length, result = { vertices: [], holes: [], dimensions: dim }, holeIndex = 0;
      for (var i2 = 0; i2 < data.length; i2++) {
        for (var j2 = 0; j2 < data[i2].length; j2++) {
          for (var d2 = 0; d2 < dim; d2++) result.vertices.push(data[i2][j2][d2]);
        }
        if (i2 > 0) {
          holeIndex += data[i2 - 1].length;
          result.holes.push(holeIndex);
        }
      }
      return result;
    };
  }
});

// node_modules/@babel/runtime/helpers/OverloadYield.js
var require_OverloadYield = __commonJS({
  "node_modules/@babel/runtime/helpers/OverloadYield.js"(exports, module) {
    function _OverloadYield(e3, d2) {
      this.v = e3, this.k = d2;
    }
    module.exports = _OverloadYield, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorDefine.js
var require_regeneratorDefine = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorDefine.js"(exports, module) {
    function _regeneratorDefine(e3, r2, n2, t3) {
      var i2 = Object.defineProperty;
      try {
        i2({}, "", {});
      } catch (e4) {
        i2 = 0;
      }
      module.exports = _regeneratorDefine = function regeneratorDefine(e4, r3, n3, t4) {
        function o2(r4, n4) {
          _regeneratorDefine(e4, r4, function(e6) {
            return this._invoke(r4, n4, e6);
          });
        }
        r3 ? i2 ? i2(e4, r3, {
          value: n3,
          enumerable: !t4,
          configurable: !t4,
          writable: !t4
        }) : e4[r3] = n3 : (o2("next", 0), o2("throw", 1), o2("return", 2));
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _regeneratorDefine(e3, r2, n2, t3);
    }
    module.exports = _regeneratorDefine, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regenerator.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/regenerator.js"(exports, module) {
    var regeneratorDefine = require_regeneratorDefine();
    function _regenerator() {
      var e3, t3, r2 = "function" == typeof Symbol ? Symbol : {}, n2 = r2.iterator || "@@iterator", o2 = r2.toStringTag || "@@toStringTag";
      function i2(r3, n3, o3, i3) {
        var c3 = n3 && n3.prototype instanceof Generator ? n3 : Generator, u3 = Object.create(c3.prototype);
        return regeneratorDefine(u3, "_invoke", (function(r4, n4, o4) {
          var i4, c4, u4, f3 = 0, p2 = o4 || [], y2 = false, G = {
            p: 0,
            n: 0,
            v: e3,
            a: d2,
            f: d2.bind(e3, 4),
            d: function d3(t4, r5) {
              return i4 = t4, c4 = 0, u4 = e3, G.n = r5, a2;
            }
          };
          function d2(r5, n5) {
            for (c4 = r5, u4 = n5, t3 = 0; !y2 && f3 && !o5 && t3 < p2.length; t3++) {
              var o5, i5 = p2[t3], d3 = G.p, l2 = i5[2];
              r5 > 3 ? (o5 = l2 === n5) && (u4 = i5[(c4 = i5[4]) ? 5 : (c4 = 3, 3)], i5[4] = i5[5] = e3) : i5[0] <= d3 && ((o5 = r5 < 2 && d3 < i5[1]) ? (c4 = 0, G.v = n5, G.n = i5[1]) : d3 < l2 && (o5 = r5 < 3 || i5[0] > n5 || n5 > l2) && (i5[4] = r5, i5[5] = n5, G.n = l2, c4 = 0));
            }
            if (o5 || r5 > 1) return a2;
            throw y2 = true, n5;
          }
          return function(o5, p3, l2) {
            if (f3 > 1) throw TypeError("Generator is already running");
            for (y2 && 1 === p3 && d2(p3, l2), c4 = p3, u4 = l2; (t3 = c4 < 2 ? e3 : u4) || !y2; ) {
              i4 || (c4 ? c4 < 3 ? (c4 > 1 && (G.n = -1), d2(c4, u4)) : G.n = u4 : G.v = u4);
              try {
                if (f3 = 2, i4) {
                  if (c4 || (o5 = "next"), t3 = i4[o5]) {
                    if (!(t3 = t3.call(i4, u4))) throw TypeError("iterator result is not an object");
                    if (!t3.done) return t3;
                    u4 = t3.value, c4 < 2 && (c4 = 0);
                  } else 1 === c4 && (t3 = i4["return"]) && t3.call(i4), c4 < 2 && (u4 = TypeError("The iterator does not provide a '" + o5 + "' method"), c4 = 1);
                  i4 = e3;
                } else if ((t3 = (y2 = G.n < 0) ? u4 : r4.call(n4, G)) !== a2) break;
              } catch (t4) {
                i4 = e3, c4 = 1, u4 = t4;
              } finally {
                f3 = 1;
              }
            }
            return {
              value: t3,
              done: y2
            };
          };
        })(r3, o3, i3), true), u3;
      }
      var a2 = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      t3 = Object.getPrototypeOf;
      var c2 = [][n2] ? t3(t3([][n2]())) : (regeneratorDefine(t3 = {}, n2, function() {
        return this;
      }), t3), u2 = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c2);
      function f2(e4) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(e4, GeneratorFunctionPrototype) : (e4.__proto__ = GeneratorFunctionPrototype, regeneratorDefine(e4, o2, "GeneratorFunction")), e4.prototype = Object.create(u2), e4;
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, regeneratorDefine(u2, "constructor", GeneratorFunctionPrototype), regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", regeneratorDefine(GeneratorFunctionPrototype, o2, "GeneratorFunction"), regeneratorDefine(u2), regeneratorDefine(u2, o2, "Generator"), regeneratorDefine(u2, n2, function() {
        return this;
      }), regeneratorDefine(u2, "toString", function() {
        return "[object Generator]";
      }), (module.exports = _regenerator = function _regenerator2() {
        return {
          w: i2,
          m: f2
        };
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _regenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorAsyncIterator.js
var require_regeneratorAsyncIterator = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorAsyncIterator.js"(exports, module) {
    var OverloadYield = require_OverloadYield();
    var regeneratorDefine = require_regeneratorDefine();
    function AsyncIterator(t3, e3) {
      function n2(r3, o2, i2, f2) {
        try {
          var c2 = t3[r3](o2), u2 = c2.value;
          return u2 instanceof OverloadYield ? e3.resolve(u2.v).then(function(t4) {
            n2("next", t4, i2, f2);
          }, function(t4) {
            n2("throw", t4, i2, f2);
          }) : e3.resolve(u2).then(function(t4) {
            c2.value = t4, i2(c2);
          }, function(t4) {
            return n2("throw", t4, i2, f2);
          });
        } catch (t4) {
          f2(t4);
        }
      }
      var r2;
      this.next || (regeneratorDefine(AsyncIterator.prototype), regeneratorDefine(AsyncIterator.prototype, "function" == typeof Symbol && Symbol.asyncIterator || "@asyncIterator", function() {
        return this;
      })), regeneratorDefine(this, "_invoke", function(t4, o2, i2) {
        function f2() {
          return new e3(function(e4, r3) {
            n2(t4, i2, e4, r3);
          });
        }
        return r2 = r2 ? r2.then(f2, f2) : f2();
      }, true);
    }
    module.exports = AsyncIterator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorAsyncGen.js
var require_regeneratorAsyncGen = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorAsyncGen.js"(exports, module) {
    var regenerator = require_regenerator();
    var regeneratorAsyncIterator = require_regeneratorAsyncIterator();
    function _regeneratorAsyncGen(r2, e3, t3, o2, n2) {
      return new regeneratorAsyncIterator(regenerator().w(r2, e3, t3, o2), n2 || Promise);
    }
    module.exports = _regeneratorAsyncGen, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorAsync.js
var require_regeneratorAsync = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorAsync.js"(exports, module) {
    var regeneratorAsyncGen = require_regeneratorAsyncGen();
    function _regeneratorAsync(n2, e3, r2, t3, o2) {
      var a2 = regeneratorAsyncGen(n2, e3, r2, t3, o2);
      return a2.next().then(function(n3) {
        return n3.done ? n3.value : a2.next();
      });
    }
    module.exports = _regeneratorAsync, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorKeys.js
var require_regeneratorKeys = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorKeys.js"(exports, module) {
    function _regeneratorKeys(e3) {
      var n2 = Object(e3), r2 = [];
      for (var t3 in n2) r2.unshift(t3);
      return function e4() {
        for (; r2.length; ) if ((t3 = r2.pop()) in n2) return e4.value = t3, e4.done = false, e4;
        return e4.done = true, e4;
      };
    }
    module.exports = _regeneratorKeys, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof2(o2) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o2);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorValues.js
var require_regeneratorValues = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorValues.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorValues(e3) {
      if (null != e3) {
        var t3 = e3["function" == typeof Symbol && Symbol.iterator || "@@iterator"], r2 = 0;
        if (t3) return t3.call(e3);
        if ("function" == typeof e3.next) return e3;
        if (!isNaN(e3.length)) return {
          next: function next() {
            return e3 && r2 >= e3.length && (e3 = void 0), {
              value: e3 && e3[r2++],
              done: !e3
            };
          }
        };
      }
      throw new TypeError(_typeof2(e3) + " is not iterable");
    }
    module.exports = _regeneratorValues, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var OverloadYield = require_OverloadYield();
    var regenerator = require_regenerator();
    var regeneratorAsync = require_regeneratorAsync();
    var regeneratorAsyncGen = require_regeneratorAsyncGen();
    var regeneratorAsyncIterator = require_regeneratorAsyncIterator();
    var regeneratorKeys = require_regeneratorKeys();
    var regeneratorValues = require_regeneratorValues();
    function _regeneratorRuntime2() {
      "use strict";
      var r2 = regenerator(), e3 = r2.m(_regeneratorRuntime2), t3 = (Object.getPrototypeOf ? Object.getPrototypeOf(e3) : e3.__proto__).constructor;
      function n2(r3) {
        var e4 = "function" == typeof r3 && r3.constructor;
        return !!e4 && (e4 === t3 || "GeneratorFunction" === (e4.displayName || e4.name));
      }
      var o2 = {
        "throw": 1,
        "return": 2,
        "break": 3,
        "continue": 3
      };
      function a2(r3) {
        var e4, t4;
        return function(n3) {
          e4 || (e4 = {
            stop: function stop() {
              return t4(n3.a, 2);
            },
            "catch": function _catch() {
              return n3.v;
            },
            abrupt: function abrupt(r4, e6) {
              return t4(n3.a, o2[r4], e6);
            },
            delegateYield: function delegateYield(r4, o3, a3) {
              return e4.resultName = o3, t4(n3.d, regeneratorValues(r4), a3);
            },
            finish: function finish(r4) {
              return t4(n3.f, r4);
            }
          }, t4 = function t5(r4, _t, o3) {
            n3.p = e4.prev, n3.n = e4.next;
            try {
              return r4(_t, o3);
            } finally {
              e4.next = n3.n;
            }
          }), e4.resultName && (e4[e4.resultName] = n3.v, e4.resultName = void 0), e4.sent = n3.v, e4.next = n3.n;
          try {
            return r3.call(this, e4);
          } finally {
            n3.p = e4.prev, n3.n = e4.next;
          }
        };
      }
      return (module.exports = _regeneratorRuntime2 = function _regeneratorRuntime3() {
        return {
          wrap: function wrap(e4, t4, n3, o3) {
            return r2.w(a2(e4), t4, n3, o3 && o3.reverse());
          },
          isGeneratorFunction: n2,
          mark: r2.m,
          awrap: function awrap(r3, e4) {
            return new OverloadYield(r3, e4);
          },
          AsyncIterator: regeneratorAsyncIterator,
          async: function async(r3, e4, t4, o3, u2) {
            return (n2(e4) ? regeneratorAsyncGen : regeneratorAsync)(a2(r3), e4, t4, o3, u2);
          },
          keys: regeneratorKeys,
          values: regeneratorValues
        };
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _regeneratorRuntime2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator2 = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/rc-tween-one/node_modules/style-utils/main.js
var require_main2 = __commonJS({
  "node_modules/rc-tween-one/node_modules/style-utils/main.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.toCssLowerCase = toCssLowerCase;
    exports.toStyleUpperCase = toStyleUpperCase2;
    exports.toFixed = toFixed;
    exports.createMatrix = createMatrix;
    exports.checkStyleName = checkStyleName3;
    exports.getGsapType = getGsapType2;
    exports.parseColor = parseColor3;
    exports.parseShadow = parseShadow2;
    exports.getColor = getColor3;
    exports.isTransform = isTransform;
    exports.isConvert = isConvert2;
    exports.splitFilterToObject = splitFilterToObject2;
    exports.getMatrix = getMatrix;
    exports.getTransform = getTransform3;
    exports.stylesToCss = stylesToCss3;
    exports.getUnit = getUnit;
    exports.getValues = getValues;
    exports.findStyleByName = findStyleByName;
    exports.mergeStyle = mergeStyle;
    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridRow: true,
      gridColumn: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    var unquotedContentValueRegex = /^(normal|none|(\b(url\([^)]*\)|chapter_counter|attr\([^)]*\)|(no-)?(open|close)-quote|inherit)((\b\s*)|$|\s+))+)$/;
    var IE = (function() {
      if (typeof document === "undefined") {
        return false;
      }
      if (navigator && (navigator.userAgent.indexOf("MSIE 8.0") > 0 || navigator.userAgent.indexOf("MSIE 9.0") > 0)) {
        return true;
      }
      return false;
    })();
    var rnd = 1e5;
    var colorLookup = {
      aqua: [0, 255, 255, 1],
      lime: [0, 255, 0, 1],
      silver: [192, 192, 192, 1],
      black: [0, 0, 0, 1],
      maroon: [128, 0, 0, 1],
      teal: [0, 128, 128, 1],
      blue: [0, 0, 255, 1],
      navy: [0, 0, 128, 1],
      white: [255, 255, 255, 1],
      fuchsia: [255, 0, 255, 1],
      olive: [128, 128, 0, 1],
      yellow: [255, 255, 0, 1],
      orange: [255, 165, 0, 1],
      gray: [128, 128, 128, 1],
      purple: [128, 0, 128, 1],
      green: [0, 128, 0, 1],
      red: [255, 0, 0, 1],
      pink: [255, 192, 203, 1],
      cyan: [0, 255, 255, 1],
      transparent: [255, 255, 255, 0]
    };
    var DEG2RAD = Math.PI / 180;
    var RAD2DEG = 180 / Math.PI;
    var $cssList = {
      _lists: {
        transformsBase: ["translate", "translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ", "rotate"],
        transforms3D: ["translate3d", "translateZ", "scaleZ", "rotateX", "rotateY", "perspective"]
      },
      transformGroup: { translate: 1, translate3d: 1, scale: 1, scale3d: 1, rotate: 1, rotate3d: 1, skew: 1 },
      filter: ["grayScale", "sepia", "hueRotate", "invert", "brightness", "contrast", "blur"],
      filterConvert: { grayScale: "grayscale", hueRotate: "hue-rotate" }
    };
    $cssList._lists.transformsBase = !IE ? $cssList._lists.transformsBase.concat($cssList._lists.transforms3D) : $cssList._lists.transformsBase;
    var hexExp = exports.hexExp = /#([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3})/;
    var rgbAndHslExp = exports.rgbAndHslExp = /((rgb|hsl)[a]?)+\((?:\d|\.\d)+(?:(deg|\%|)),[\s+]?(?:\d|\.\d)+(?:(deg|\%|)),[\s+]?(?:\d|\.\d)+(?:(deg|%|))(,[\s+]?(?:\d|\.\d)+(?:(deg|\%|)))?\)/;
    var colorRegExp2 = exports.colorRegExp = /#([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3})|((rgb|hsl)[a]?)+\((?:\d|\.\d)+(?:(deg|\%)?),[\s+]?(?:\d|\.\d)+(?:(deg|\%)?),[\s+]?(?:\d|\.\d)+(?:(deg|%)?)(,[\s+]?(?:\d|\.\d)+(?:(deg|\%)?))?\)/;
    var colorNumExp = exports.colorNumExp = /(?:\d|\.\d)+(%?)/g;
    var cssList2 = exports.cssList = $cssList;
    function toCssLowerCase(d2) {
      return d2.replace(/[A-Z]/, function($1) {
        return "-" + $1.toLocaleLowerCase();
      });
    }
    function toStyleUpperCase2(d2) {
      return d2.replace(/-(.?)/g, function($1) {
        return $1.replace("-", "").toLocaleUpperCase();
      });
    }
    function toFixed(num, length2) {
      var _rnd = length2 ? Math.pow(10, length2) : rnd;
      var n2 = num | 0;
      var dec = num - n2;
      var fixed = num;
      if (dec) {
        var r2 = (dec * _rnd + (num < 0 ? -0.5 : 0.5) | 0) / _rnd;
        var t3 = r2 | 0;
        var str = r2.toString();
        var decStr = str.split(".")[1] || "";
        fixed = (num < 0 && !(n2 + t3) ? "-" : "") + (n2 + t3) + "." + decStr;
      }
      return parseFloat(fixed);
    }
    function createMatrix(style3) {
      if (typeof document === "undefined") {
        return null;
      }
      var matrixs = ["WebKitCSS", "MozCSS", "DOM", "MsCSS", "MSCSS", "OCSS", "CSS"].filter(function(key) {
        return key + "Matrix" in window;
      });
      if (matrixs.length) {
        return new window[matrixs[0] + "Matrix"](style3);
      }
      console.warn("Browsers do not support matrix.");
      return "";
    }
    function checkStyleName3(p2) {
      if (typeof document === "undefined") {
        return null;
      }
      var a2 = ["O", "Moz", "ms", "Ms", "Webkit"];
      if (p2 !== "filter" && p2 in document.body.style) {
        return p2;
      }
      var _p = p2.charAt(0).toUpperCase() + p2.substr(1);
      var prefixCss = a2.filter(function(key) {
        return "" + key + _p in document.body.style;
      });
      return prefixCss[0] ? "" + prefixCss[0] + _p : null;
    }
    function getGsapType2(_p) {
      var p2 = _p;
      p2 = p2 === "x" ? "translateX" : p2;
      p2 = p2 === "y" ? "translateY" : p2;
      p2 = p2 === "z" ? "translateZ" : p2;
      return p2;
    }
    var hueToRgb = function hueToRgb2(t1, t22, hue) {
      if (hue < 0) hue += 6;
      if (hue >= 6) hue -= 6;
      if (hue < 1) return (t22 - t1) * hue + t1;
      else if (hue < 3) return t22;
      else if (hue < 4) return (t22 - t1) * (4 - hue) + t1;
      else return t1;
    };
    function parseColor3(value) {
      var colorArray = colorLookup.transparent;
      var color = value;
      var r2 = void 0;
      var g2 = void 0;
      var b2 = void 0;
      if (!color) {
        colorArray = colorLookup.transparent;
      } else if (colorLookup[color]) {
        colorArray = colorLookup[color];
      } else if (typeof color === "number") {
        colorArray = [color >> 16, color >> 8 & 255, color & 255];
      } else {
        if (color.charAt(color.length - 1) === ",") {
          color = color.substr(0, color.length - 1);
        }
        if (color.match(hexExp)) {
          color = color.substr(1);
          if (color.length === 3) {
            r2 = color.charAt(0);
            g2 = color.charAt(1);
            b2 = color.charAt(2);
            color = "" + r2 + r2 + g2 + g2 + b2 + b2 + "ff";
          }
          if (color.length === 6) {
            color += "ff";
          }
          color = parseInt(color, 16);
          colorArray = [color >> 24 & 255, color >> 16 & 255, color >> 8 & 255, parseFloat(((color & 255) / 255).toFixed(2))];
        } else if (color.match(/^hsl/)) {
          colorArray = color.match(colorNumExp);
          var alpha = colorArray[3];
          alpha = typeof alpha === "string" && alpha.match("%") ? parseFloat(alpha) / 100 : parseFloat("" + (alpha || "1"));
          var hue = parseFloat(colorArray[0]) / 60;
          var sat = parseFloat(colorArray[1]) / 100;
          var light = parseFloat(colorArray[2]) / 100;
          var t22 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;
          var t1 = light * 2 - t22;
          r2 = Math.round(hueToRgb(t1, t22, hue + 2) * 255);
          g2 = Math.round(hueToRgb(t1, t22, hue) * 255);
          b2 = Math.round(hueToRgb(t1, t22, hue - 2) * 255);
          colorArray = [r2, g2, b2, alpha];
        } else {
          colorArray = color.match(colorNumExp) || colorLookup.transparent;
          colorArray = colorArray.map(function(c2) {
            return parseFloat(c2);
          });
          if (colorArray.length === 3) {
            colorArray.push(1);
          }
        }
      }
      return colorArray;
    }
    function parseShadow2(v2, key) {
      var textKey = key && toStyleUpperCase2(key);
      if (!v2) {
        if (textKey === "boxShadow") {
          return [0, 0, 0, 0, 0, 0, 0, 0];
        }
        return [0, 0, 0, 0, 0, 0, 0];
      }
      var vArr = v2.replace(/,\s+/gi, ",").split(/\s+/).filter(function(c2) {
        return c2;
      });
      var inset = vArr.indexOf("inset");
      if (inset >= 0) {
        vArr.splice(inset, 1);
      }
      var colorStr = vArr.find(function(c2) {
        return colorLookup[c2] || c2.match(/#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})|(rgb|hsl)+(?:a)?\((.*)\)/i);
      }) || "black";
      var colorIndex = vArr.indexOf(colorStr);
      vArr.splice(colorIndex, 1);
      var color = parseColor3(colorStr);
      color[3] = typeof color[3] === "number" ? color[3] : 1;
      if (textKey === "boxShadow" && vArr.length < 4) {
        vArr.push(0);
      }
      return vArr.concat(color, inset >= 0 ? ["inset"] : []);
    }
    function getColor3(v2) {
      var rgba = v2.length === 4 ? "rgba" : "rgb";
      var _vars = v2.map(function(d2, i2) {
        return i2 < 3 ? Math.round(d2) : d2;
      });
      return rgba + "(" + _vars.join(",") + ")";
    }
    function isTransform(p2) {
      return cssList2._lists.transformsBase.indexOf(p2) >= 0 ? "transform" : p2;
    }
    function isConvert2(p2) {
      var cssName = isTransform(p2);
      return cssList2.filter.indexOf(cssName) >= 0 ? "filter" : cssName;
    }
    function splitFilterToObject2(data) {
      if (data === "none" || !data || data === "") {
        return null;
      }
      var filter = data.replace(/\s+/g, "").split(")").filter(function(item) {
        return item;
      });
      var startData = {};
      filter.forEach(function(item) {
        var dataArr = item.split("(");
        startData[dataArr[0]] = dataArr[1];
      });
      return startData;
    }
    function getMatrix(t3) {
      var arr = t3.match(/(?:\-|\b)[\d\-\.e]+\b/gi);
      var m2 = {};
      if (arr.length === 6) {
        m2.m11 = parseFloat(arr[0]);
        m2.m12 = parseFloat(arr[1]);
        m2.m13 = 0;
        m2.m14 = 0;
        m2.m21 = parseFloat(arr[2]);
        m2.m22 = parseFloat(arr[3]);
        m2.m23 = 0;
        m2.m24 = 0;
        m2.m31 = 0;
        m2.m32 = 0;
        m2.m33 = 1;
        m2.m34 = 0;
        m2.m41 = parseFloat(arr[4]);
        m2.m42 = parseFloat(arr[5]);
        m2.m43 = 0;
        m2.m44 = 0;
      } else {
        arr.forEach(function(item, i2) {
          var ii = i2 % 4 + 1;
          var j2 = Math.floor(i2 / 4) + 1;
          m2["m" + j2 + ii] = parseFloat(item);
        });
      }
      return m2;
    }
    function transformNoMatrix(transform) {
      var tm = {};
      tm.translateX = 0;
      tm.translateY = 0;
      tm.translateZ = 0;
      tm.rotate = 0;
      tm.rotateX = 0;
      tm.rotateY = 0;
      tm.scaleX = 1;
      tm.scaleY = 1;
      tm.scaleZ = 1;
      tm.skewX = 0;
      tm.skewY = 0;
      tm.perspective = 0;
      (transform.trim().match(/(\w+)\([^\)]+\)/ig) || []).forEach(function(str) {
        var strArray = str.split("(");
        var key = strArray[0].trim();
        var value = strArray[1].replace(")", "").trim();
        if (value.match(/%|em|rem/ig)) {
          console.warn("value(" + value + ") must be absolute, not relative, has been converted to absolute.");
        }
        value = value.replace(/px|deg|\)/ig, "");
        if (cssList2.transformGroup[key] && key !== "rotate") {
          value = value.split(",").map(function(num) {
            return parseFloat(num);
          });
          if (key === "scale3d" || key === "translate3d") {
            ["X", "Y", "Z"].forEach(function(s2, i2) {
              var $key = key.substring(0, key.length - 2);
              tm["" + $key + s2] = value[i2] || tm["" + $key + s2];
            });
          } else if (key === "rotate3d") {
            tm.rotateX = value[0] && value[3] || tm.rotateX;
            tm.rotateY = value[1] && value[3] || tm.rotateY;
            tm.rotate = value[2] && value[3] || tm.rotate;
          } else {
            ["X", "Y"].forEach(function(s2, i2) {
              tm["" + key + s2] = value[i2] || tm["" + key + s2];
            });
          }
        } else {
          if (key === "rotateZ") {
            tm.rotate = parseFloat(value) || tm.rotate;
          } else {
            tm[key] = parseFloat(value) || tm[key];
          }
        }
      });
      return tm;
    }
    function getTransform3(transform) {
      var _transform = !transform || transform === "none" || transform === "" ? "matrix(1, 0, 0, 1, 0, 0)" : transform;
      if (!_transform.match("matrix")) {
        return transformNoMatrix(transform);
      }
      var m2 = getMatrix(_transform);
      var m11 = m2.m11;
      var m12 = m2.m12;
      var m13 = m2.m13;
      var m14 = m2.m14;
      var m21 = m2.m21;
      var m22 = m2.m22;
      var m23 = m2.m23;
      var m24 = m2.m24;
      var m31 = m2.m31;
      var m32 = m2.m32;
      var m33 = m2.m33;
      var m34 = m2.m34;
      var m43 = m2.m43;
      var t1 = void 0;
      var t22 = void 0;
      var t3 = void 0;
      var tm = {};
      var angle = Math.atan2(m23, m33);
      var skewX = Math.tan(m21);
      var skewY = Math.tan(m12);
      var cos = void 0;
      var sin = void 0;
      tm.rotateX = toFixed(angle * RAD2DEG) || 0;
      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = m21 * cos + m31 * sin;
        t22 = m22 * cos + m32 * sin;
        t3 = m23 * cos + m33 * sin;
        m31 = m21 * -sin + m31 * cos;
        m32 = m22 * -sin + m32 * cos;
        m33 = m23 * -sin + m33 * cos;
        m34 = m24 * -sin + m34 * cos;
        m21 = t1;
        m22 = t22;
        m23 = t3;
      }
      angle = Math.atan2(-m13, m33);
      tm.rotateY = toFixed(angle * RAD2DEG) || 0;
      if (angle) {
        cos = Math.cos(-angle);
        sin = Math.sin(-angle);
        t1 = m11 * cos - m31 * sin;
        t22 = m12 * cos - m32 * sin;
        t3 = m13 * cos - m33 * sin;
        m32 = m12 * sin + m32 * cos;
        m33 = m13 * sin + m33 * cos;
        m34 = m14 * sin + m34 * cos;
        m11 = t1;
        m12 = t22;
        m13 = t3;
      }
      angle = Math.atan2(m12, m11);
      tm.rotate = toFixed(angle * RAD2DEG) || 0;
      if (angle) {
        cos = Math.cos(angle);
        sin = Math.sin(angle);
        t1 = m11 * cos + m12 * sin;
        t22 = m21 * cos + m22 * sin;
        t3 = m31 * cos + m32 * sin;
        m12 = m12 * cos - m11 * sin;
        m22 = m22 * cos - m21 * sin;
        m32 = m32 * cos - m31 * sin;
        m11 = t1;
        m21 = t22;
        m31 = t3;
      }
      if (tm.rotateX && Math.abs(tm.rotateX) + Math.abs(tm.rotate) > 359.9) {
        tm.rotateX = tm.rotate = 0;
        tm.rotateY = 180 - tm.rotateY || 0;
      }
      tm.scaleX = toFixed(Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13));
      tm.scaleY = toFixed(Math.sqrt(m22 * m22 + m23 * m23));
      tm.scaleZ = toFixed(Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33));
      tm.skewX = skewX === -skewY ? 0 : skewX;
      tm.skewY = skewY === -skewX ? 0 : skewY;
      tm.perspective = m34 ? 1 / (m34 < 0 ? -m34 : m34) : 0;
      tm.translateX = m2.m41;
      tm.translateY = m2.m42;
      tm.translateZ = m43;
      return tm;
    }
    function stylesToCss3(key, value) {
      var _value = void 0;
      if (!isUnitlessNumber[key] && typeof value === "number") {
        _value = " " + value + "px";
      } else if (key === "content" && !unquotedContentValueRegex.test(value)) {
        _value = "'" + value.replace(/'/g, "\\'") + "'";
      }
      return _value || value;
    }
    function getUnit(p2, v2) {
      var currentUnit = v2 && v2.toString().replace(/[^a-z|%]/ig, "");
      var unit = "";
      if (p2.indexOf("translate") >= 0 || p2.indexOf("perspective") >= 0 || p2.indexOf("blur") >= 0) {
        unit = "px";
      } else if (p2.indexOf("skew") >= 0 || p2.indexOf("rotate") >= 0) {
        unit = "deg";
      }
      return currentUnit || unit;
    }
    function getValues(p2, d2, u2) {
      return p2 + "(" + d2 + (u2 || "") + ")";
    }
    function findStyleByName(cssArray, name) {
      var ret = null;
      if (cssArray) {
        cssArray.forEach(function(_cname) {
          if (ret) {
            return;
          }
          var cName = _cname.split("(")[0];
          var a2 = cName in cssList2.transformGroup && name.substring(0, name.length - 1).indexOf(cName) >= 0;
          var b2 = name in cssList2.transformGroup && cName.substring(0, cName.length - 1).indexOf(name) >= 0;
          var c2 = cName in cssList2.transformGroup && name in cssList2.transformGroup && (cName.substring(0, cName.length - 2) === name || name.substring(0, name.length - 2) === cName);
          if (cName === name || a2 || b2 || c2) {
            ret = _cname;
          }
        });
      }
      return ret;
    }
    function mergeStyle(current, change) {
      if (!current || current === "") {
        return change;
      }
      if (!change || change === "") {
        return current;
      }
      var _current = current.replace(/\s/g, "").split(")").filter(function(item) {
        return item !== "" && item;
      }).map(function(item) {
        return item + ")";
      });
      var _change = change.replace(/\s/g, "").split(")").filter(function(item) {
        return item !== "" && item;
      });
      _change.forEach(function(changeOnly) {
        var changeArr = changeOnly.split("(");
        var changeName = changeArr[0];
        var currentSame = findStyleByName(_current, changeName);
        if (!currentSame) {
          _current.push(changeOnly + ")");
        } else {
          var index = _current.indexOf(currentSame);
          _current[index] = changeOnly + ")";
        }
      });
      _current.forEach(function(item, i2) {
        if (item.indexOf("perspective") >= 0 && i2) {
          _current.splice(i2, 1);
          _current.unshift(item);
        }
      });
      return _current.join(" ").trim();
    }
  }
});

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t3, r2) {
  if ("object" != _typeof(t3) || !t3) return t3;
  var e3 = t3[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t3, r2 || "default");
    if ("object" != _typeof(i2)) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t3);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t3) {
  var i2 = toPrimitive(t3, "string");
  return "symbol" == _typeof(i2) ? i2 : i2 + "";
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(e3, r2) {
  for (var t3 = 0; t3 < r2.length; t3++) {
    var o2 = r2[t3];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, toPropertyKey(o2.key), o2);
  }
}
function _createClass(e3, r2, t3) {
  return r2 && _defineProperties(e3.prototype, r2), t3 && _defineProperties(e3, t3), Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}

// node_modules/tween-one/es/utils.js
var import_style_utils = __toESM(require_main());
function noop() {
}
var colorRegExp = import_style_utils.colorRegExp;
var shadowExp = /.*shadow$/gi;
var windowIsUndefined = !(typeof window !== "undefined" && window.document && window.document.createElement);
var getTime = Date.now;
function parsePath(path) {
  if (typeof path === "string") {
    if (path.charAt(0).match(/m/i)) {
      var domPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
      domPath.setAttributeNS(null, "d", path);
      return domPath;
    }
    return document.querySelector(path);
  } else if (path.style) {
    return path;
  }
  throw new Error("Error while parsing the path");
}
var initAnimProps = {
  type: "to",
  duration: 450,
  delay: 0,
  repeat: 0,
  repeatDelay: 0,
  appearTo: 0,
  yoyo: false,
  ease: "easeInOutQuad",
  onStart: noop,
  onUpdate: noop,
  onComplete: noop,
  onRepeat: noop,
  startAt: {}
};
var initProps = {
  animation: {},
  paused: false,
  reverse: false,
  delay: 0,
  repeat: 0,
  repeatDelay: 0,
  yoyo: false,
  moment: null,
  resetStyle: false,
  regionStartTime: 0,
  regionEndTime: void 0,
  onChange: noop,
  onChangeTimeline: noop
};
var getInitProps = function getInitProps2(props) {
  var p2 = {};
  Object.keys(initProps).forEach(function(k) {
    p2[k] = typeof props[k] === "undefined" ? initProps[k] : props[k];
  });
  if (p2.delay) {
    p2.delay = Math.round(p2.delay);
  }
  if (props.repeatDelay) {
    p2.repeatDelay = Math.round(p2.repeatDelay);
  }
  return p2;
};
var dataToArray = function dataToArray2(d2) {
  if (Array.isArray(d2) || !d2) {
    return d2;
  }
  if (d2.length) {
    var t3 = Array.prototype.slice.call(d2);
    return t3.length ? [d2] : t3;
  }
  return [d2];
};
var flatArray = function flatArray2(d2) {
  return d2.length === 1 ? d2[0] : d2;
};
var getAnimatePos = function getAnimatePos2(animate, _ref) {
  var _ref$appearTo = _ref.appearTo, appearTo = _ref$appearTo === void 0 ? 0 : _ref$appearTo, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 0 : _ref$delay, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? 450 : _ref$duration, repeat = _ref.repeat, repeatDelay = _ref.repeatDelay;
  if (typeof appearTo === "string") {
    return 0;
  }
  var appearToTime;
  var v2 = 0;
  if (typeof animate.appearTo === "number") {
    return animate.appearTo;
  }
  if (typeof animate.appearTo === "string" && animate.appearTo.charAt(1) === "=") {
    v2 = parseFloat(animate.appearTo.replace("=", ""));
  }
  appearToTime = appearTo + delay + duration + v2;
  if (repeat === -1) {
    appearToTime = Number.MAX_VALUE;
  } else if (repeat) {
    appearToTime = appearTo + delay + duration * (repeat + 1) + (repeatDelay || 0) * repeat + v2;
  }
  return appearToTime;
};
var getDefaultStart = function getDefaultStart2(key) {
  switch (key) {
    case "opacity":
    case "scaleX":
    case "scaleY":
    case "scale":
      return 1;
    default:
      return 0;
  }
};
var getStartAtValue = function getStartAtValue2(start, startAt) {
  var value = typeof start === "string" ? parseFloat(start) : start;
  return getValue(value, startAt.vars, 1, startAt.count, startAt.unit);
};
var getValue = function getValue2(startVars, endVars, ratio) {
  var count = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
  var unit = arguments.length > 4 ? arguments[4] : void 0;
  return count === "+=" || count === "-=" ? startVars + endVars * ratio + (unit || 0) : (endVars - startVars) * ratio + startVars + (unit || 0);
};
var getComputedStyle = function getComputedStyle2(target) {
  if (!target) {
    return {};
  }
  var style3 = typeof window !== "undefined" && document.defaultView ? document.defaultView.getComputedStyle(target) : {};
  return style3;
};
var styleValueToArray = {
  margin: 1,
  padding: 1,
  borderWidth: 1,
  borderRadius: 1
};
function startConvertToEndUnit(_ref2) {
  var target = _ref2.target, computedStyle = _ref2.computedStyle, style3 = _ref2.style, value = _ref2.value, startUnit = _ref2.startUnit, endUnit = _ref2.endUnit, fixed = _ref2.fixed, isOriginWidth = _ref2.isOriginWidth, useCurrentTarget = _ref2.useCurrentTarget;
  if (windowIsUndefined) {
    return value;
  }
  var horiz = /(?:Left|Right|Width|X)/i.test(style3) || isOriginWidth;
  horiz = style3 === "padding" || style3 === "marign" ? true : horiz;
  var t3 = style3.indexOf("border") !== -1 || style3.indexOf("translate") !== -1 || style3 === "transformOrigin" || useCurrentTarget ? target : target.parentNode || document.body;
  t3 = fixed ? document.body : t3;
  var pix;
  var htmlComputedStyle;
  var warPix;
  switch (startUnit) {
    case "%":
      pix = parseFloat(value) / 100 * (horiz ? t3.clientWidth : t3.clientHeight);
      break;
    case "vw":
      pix = parseFloat(value) * document.body.clientWidth / 100;
      break;
    case "vh":
      pix = parseFloat(value) * document.body.clientHeight / 100;
      break;
    case "em":
      if (!computedStyle) {
        warPix = "em";
        pix = parseFloat(value);
      } else {
        pix = parseFloat(value) * parseFloat(computedStyle.fontSize);
      }
      break;
    case "rem": {
      if (!computedStyle) {
        warPix = "rem";
        pix = parseFloat(value);
      } else {
        htmlComputedStyle = window.getComputedStyle(document.getElementsByTagName("html")[0]);
        pix = parseFloat(value) * parseFloat(htmlComputedStyle.fontSize);
      }
      break;
    }
    default:
      pix = parseFloat(value);
      break;
  }
  switch (endUnit) {
    case "%":
      pix = pix ? pix * 100 / (horiz ? t3.clientWidth : t3.clientHeight) : 0;
      break;
    case "vw":
      pix = parseFloat(value) / document.body.clientWidth * 100;
      break;
    case "vh":
      pix = parseFloat(value) / document.body.clientHeight * 100;
      break;
    case "em":
      if (!computedStyle) {
        warPix = "em";
        pix = parseFloat(value);
      } else {
        pix = parseFloat(value) / parseFloat(computedStyle.fontSize);
      }
      break;
    case "rem": {
      if (!computedStyle) {
        warPix = "rem";
        pix = parseFloat(value);
      } else {
        htmlComputedStyle = htmlComputedStyle || window.getComputedStyle(document.getElementsByTagName("html")[0]);
        pix = parseFloat(value) / parseFloat(htmlComputedStyle.fontSize);
      }
      break;
    }
    default:
      break;
  }
  if (warPix) {
    console.warn("Warning: Element is not 'DOM, can not use '".concat(warPix, "', automatically convert to animation units."));
  }
  return pix;
}
function getTransformValue(t3) {
  if (typeof t3 === "string") {
    return t3;
  }
  var perspective = t3.perspective;
  var angle = t3.rotate;
  var rotateX = t3.rotateX;
  var rotateY = t3.rotateY;
  var sx = t3.scaleX;
  var sy = t3.scaleY;
  var sz = t3.scaleZ;
  var skx = t3.skewX;
  var sky = t3.skewY;
  var translateX = typeof t3.translateX === "string" ? t3.translateX : "".concat(t3.translateX, "px");
  var translateY = typeof t3.translateY === "string" ? t3.translateY : "".concat(t3.translateY, "px");
  var translateZ = typeof t3.translateZ === "string" ? t3.translateZ : "".concat(t3.translateZ, "px");
  var sk = skx || sky ? "skew(".concat(skx, "deg,").concat(sky, "deg)") : "";
  var an = angle ? "rotate(".concat(angle, "deg)") : "";
  var ss = sx !== 1 || sy !== 1 || sz !== 1 ? "scale3d(".concat(sx, ",").concat(sy, ",").concat(sz, ")") : "";
  var rX = rotateX ? "rotateX(".concat(rotateX, "deg)") : "";
  var rY = rotateY ? "rotateY(".concat(rotateY, "deg)") : "";
  var per = perspective ? "perspective(".concat(perspective, "px)") : "";
  var defaultTranslate = ss || an || rX || rY || sk ? "" : "translate(0px, 0px)";
  var translate = t3.translateZ ? "translate3d(".concat(translateX, ",").concat(translateY, ",").concat(translateZ, ")") : (t3.translateX || t3.translateY) && "translate(".concat(translateX, ",").concat(translateY, ")") || defaultTranslate;
  return "".concat(per, " ").concat(translate, " ").concat(ss, " ").concat(an, " ").concat(rX, " ").concat(rY, " ").concat(sk).trim();
}
var initFilterValue = {
  brightness: 1,
  saturate: 1,
  contrast: 1,
  grayScale: 0,
  hueRotate: "0deg",
  sepia: 0,
  invert: 0
};

// node_modules/tween-one/es/plugins/index.js
var Plugin = _createClass(function Plugin2() {
  var _this = this;
  _classCallCheck(this, Plugin2);
  this.push = function(plugins) {
    dataToArray(plugins).forEach(function(item) {
      _this[item.className] = item;
    });
  };
  this.register = this.push;
});
var plugins_default = new Plugin();

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e3, r2, t3) {
  return (r2 = toPropertyKey(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t3,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t3, e3;
}

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(e3, r2) {
  var t3 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e3);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t3.push.apply(t3, o2);
  }
  return t3;
}
function _objectSpread2(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t3 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t3), true).forEach(function(r3) {
      _defineProperty(e3, r3, t3[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t3)) : ownKeys(Object(t3)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t3, r3));
    });
  }
  return e3;
}

// node_modules/tween-one/es/plugins/StylePlugin.js
var import_style_utils2 = __toESM(require_main());
var style = _createClass(
  //CSSStyleDeclaration;
  function style2(_props) {
    var _this = this;
    _classCallCheck(this, style2);
    this.props = void 0;
    this.computedStyle = void 0;
    this.root = void 0;
    this.index = void 0;
    this.targetIndex = void 0;
    this.tweenVars = {};
    this.transformName = void 0;
    this.filterName = void 0;
    this.target = void 0;
    this.start = {};
    this.startAt = {};
    this.propsData = {
      data: {},
      type: {},
      unit: {},
      count: {},
      splitStr: {},
      isTransform: {}
    };
    this.setDefaultData = function() {
      var props = _this.props;
      for (var k in props) {
        var value = props[k];
        var isArray = value.split && value.split(/\s+|,/).length > 1 || k.match(/color|fill|stroke/i) || k.match(/shadow/i);
        var isGradients = (k === "background" || k === "backgroundImage") && value.match(/[a-z|-]+\(([\s\S]*?)\)/gi);
        if (isGradients) {
          _this.propsData.data[k] = {
            value,
            plugin: plugins_default.GradientsPlugin
          };
          continue;
        }
        if (isArray) {
          _this.propsData.data[k] = {
            value,
            plugin: plugins_default.ArrayPlugin
          };
          continue;
        }
        var key = (0, import_style_utils2.getGsapType)(k);
        var data = _this.getTweenData(key, props[k]);
        _this.propsData.data[key] = data.data[key];
        _this.propsData.type[key] = data.type[key];
        _this.propsData.unit[key] = data.unit[key];
        _this.propsData.count[key] = data.count[key];
        _this.propsData.isTransform[key] = (0, import_style_utils2.isConvert)(key) === "transform";
        if (data.splitStr[key]) {
          _this.propsData.splitStr[key] = data.splitStr[key];
        }
      }
    };
    this.getTweenData = function(key, v2) {
      var data = {
        data: {},
        isTransform: {},
        type: {},
        unit: {},
        count: {},
        splitStr: {}
      };
      var value = v2;
      data.data[key] = value;
      var dataIsString = typeof data.data[key] === "string";
      data.unit[key] = dataIsString ? data.data[key].replace(/[^a-z|%]/g, "") : "";
      data.count[key] = dataIsString ? data.data[key].replace(/[^+|=|-]/g, "") : "";
      var d2 = dataIsString ? parseFloat(data.data[key].replace(/[a-z|%|=]/g, "")) : data.data[key];
      data.data[key] = !d2 && d2 !== 0 ? data.data[key] : d2;
      return data;
    };
    this.setStartAtValue = function(start, startAt) {
      return _typeof(startAt) === "object" ? getStartAtValue(start, startAt) : start;
    };
    this.getAnimStart = function() {
      var target = _this.target, root = _this.root, targetIndex = _this.targetIndex, propsData = _this.propsData, s2 = _this.startAt, start = _this.start, tweenVars = _this.tweenVars;
      var startAt = {};
      for (var c2 in s2) {
        startAt[(0, import_style_utils2.getGsapType)(c2)] = s2[c2];
      }
      _this.computedStyle = _this.computedStyle || getComputedStyle(target);
      tweenVars.style = tweenVars.style || {};
      var transform;
      var filter;
      for (var key in propsData.data) {
        var _startAt$key;
        var item = propsData.data[key];
        if (item.plugin) {
          var plugin = new item.plugin(item.value, key);
          plugin.target = target;
          plugin.root = root;
          plugin.parent = parent;
          plugin.index = _this.index;
          plugin.targetIndex = targetIndex;
          plugin.tweenVars = tweenVars;
          plugin.startAt = _this.startAt;
          plugin.computedStyle = _this.computedStyle;
          item.plugin = plugin;
          start[key] = plugin.getAnimStart();
          continue;
        }
        var cssName = (0, import_style_utils2.isConvert)(key);
        var styleKey = cssName === "transform" ? _this.transformName : cssName;
        styleKey = cssName === "filter" ? _this.filterName : styleKey;
        var varsValue = tweenVars.style[styleKey];
        var styleValue = varsValue !== null && varsValue !== void 0 ? varsValue : _this.computedStyle[cssName];
        var startData = (_startAt$key = startAt[key]) !== null && _startAt$key !== void 0 ? _startAt$key : styleValue;
        var endUnit = propsData.unit[key];
        var startUnit = "";
        if (cssName === "transform") {
          transform = transform || (startData === varsValue ? _objectSpread2({}, varsValue) : (0, import_style_utils2.getTransform)(_this.computedStyle[_this.transformName]));
          var startValue = transform[key];
          if (startAt && key in startAt) {
            var _ref, _startAt$key$vars;
            startValue = _this.setStartAtValue((_ref = (_startAt$key$vars = startAt[key].vars) !== null && _startAt$key$vars !== void 0 ? _startAt$key$vars : varsValue === null || varsValue === void 0 ? void 0 : varsValue[key]) !== null && _ref !== void 0 ? _ref : startValue, startAt[key]);
            startUnit = startAt[key].unit;
            if (key === "scale") {
              transform.scaleX = startValue;
              transform.scaleY = startValue;
            } else {
              transform[key] = startValue;
            }
          }
          if (startUnit !== endUnit) {
            startValue = startConvertToEndUnit({
              target,
              computedStyle: _this.computedStyle,
              style: cssName,
              value: startValue,
              startUnit,
              endUnit
            });
            if (key === "scale") {
              transform.scaleX = startValue;
              transform.scaleY = startValue;
            } else {
              transform[key] = startValue;
            }
          }
          start[_this.transformName] = transform;
        } else if (cssName === "filter") {
          var fKey = import_style_utils2.cssList.filterConvert[key] || key;
          filter = filter || (startData === varsValue ? _objectSpread2({}, varsValue) : (0, import_style_utils2.splitFilterToObject)(styleValue) || {});
          filter[fKey] = filter[fKey] || initFilterValue[fKey];
          var _startValue = filter[fKey];
          if (startAt && key in startAt) {
            var _startAt$key$vars2;
            _startValue = _this.setStartAtValue((_startAt$key$vars2 = startAt[key].vars) !== null && _startAt$key$vars2 !== void 0 ? _startAt$key$vars2 : _startValue, startAt[key]);
            startUnit = startAt[key].unit;
            filter[fKey] = _startValue;
          }
          if (endUnit !== startUnit) {
            var _this$computedStyle;
            filter[fKey] = startConvertToEndUnit({
              target,
              computedStyle: _this.computedStyle,
              style: cssName,
              value: _startValue,
              startUnit,
              endUnit,
              fixed: ((_this$computedStyle = _this.computedStyle) === null || _this$computedStyle === void 0 ? void 0 : _this$computedStyle.position) === "fixed"
            });
          }
          start[_this.filterName] = filter;
        } else {
          var _startAt$key2;
          startData = (_startAt$key2 = startAt[key]) !== null && _startAt$key2 !== void 0 ? _startAt$key2 : styleValue;
          if (!startData || startData === "none" || startData === "auto") {
            startData = "";
          }
          endUnit = propsData.unit[cssName];
          startUnit = _typeof(startData) === "object" ? startData.unit : "".concat(startData).replace(/[^a-z|%]/g, "");
          startData = _this.setStartAtValue(styleValue, startAt[key]);
          if (endUnit !== startUnit) {
            var _this$computedStyle2;
            startData = startConvertToEndUnit({
              target,
              computedStyle: _this.computedStyle,
              style: cssName,
              value: parseFloat(startData),
              startUnit,
              endUnit,
              fixed: ((_this$computedStyle2 = _this.computedStyle) === null || _this$computedStyle2 === void 0 ? void 0 : _this$computedStyle2.position) === "fixed"
            });
          }
          var v2 = parseFloat(startData);
          start[cssName] = isNaN(v2) ? getDefaultStart(cssName) : v2;
        }
      }
      return start;
    };
    this.render = function(ratio) {
      var propsData = _this.propsData, start = _this.start, t3 = _this.tweenVars;
      var tweenVars = t3.style || {};
      if (start[_this.transformName] && !tweenVars[_this.transformName]) {
        tweenVars[_this.transformName] = _objectSpread2({}, start[_this.transformName]);
      }
      if (start[_this.filterName] && !tweenVars[_this.filterName]) {
        tweenVars[_this.filterName] = _objectSpread2({}, start[_this.filterName]);
      }
      var transform = tweenVars[_this.transformName];
      var filter = tweenVars[_this.filterName];
      var data = propsData.data, dataUnit = propsData.unit, dataCount = propsData.count, isTransform = propsData.isTransform;
      for (var key in data) {
        var endValue = data[key];
        if (endValue.plugin) {
          tweenVars[key] = endValue.plugin.render(ratio);
          continue;
        }
        var isT = isTransform[key];
        var startValue = isT ? start[_this.transformName][key] : start[key];
        var unit = dataUnit[key];
        var count = dataCount[key];
        if (isT) {
          if (key === "scale") {
            var xStart = start[_this.transformName].scaleX;
            var yStart = start[_this.transformName].scaleY;
            if (count.charAt(1) === "=") {
              transform.scaleX = xStart + endValue * ratio;
              transform.scaleY = yStart + endValue * ratio;
            } else {
              transform.scaleX = (endValue - xStart) * ratio + xStart;
              transform.scaleY = (endValue - yStart) * ratio + yStart;
            }
          } else {
            transform[key] = getValue(parseFloat(startValue), endValue, ratio, count, unit);
          }
          transform.text = getTransformValue(tweenVars[_this.transformName]);
        } else if (import_style_utils2.cssList.filter.indexOf(key) >= 0) {
          var fKey = import_style_utils2.cssList.filterConvert[key] || key;
          startValue = parseFloat(start[_this.filterName][fKey]) || 0;
          filter[fKey] = getValue(startValue, endValue, ratio, count, unit);
          filter.text = "";
          for (var filterKey in filter) {
            if (filterKey === "text") {
              continue;
            }
            filter.text = "".concat(filter.text, " ").concat(filterKey, "(").concat(filter[filterKey], ")").trim();
          }
        } else {
          var styleUnit = (0, import_style_utils2.stylesToCss)(key, 0);
          styleUnit = typeof styleUnit === "number" ? 0 : styleUnit.replace(/[^a-z|%]/g, "");
          unit = unit || styleUnit;
          if (typeof endValue === "string") {
            tweenVars[key] = endValue;
          } else {
            tweenVars[key] = getValue(startValue, endValue, ratio, count, unit);
          }
        }
      }
      return tweenVars;
    };
    this.props = _props;
    this.transformName = (0, import_style_utils2.checkStyleName)("transform");
    this.filterName = (0, import_style_utils2.checkStyleName)("filter") || "filter";
    this.setDefaultData();
  }
);
style.key = "style";
style.className = "style";
var StylePlugin_default = style;

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray(r2);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray(r2, a2);
    var t3 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t3 && r2.constructor && (t3 = r2.constructor.name), "Map" === t3 || "Set" === t3 ? Array.from(r2) : "Arguments" === t3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t3) ? _arrayLikeToArray(r2, a2) : void 0;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(r2) {
  return _arrayWithoutHoles(r2) || _iterableToArray(r2) || _unsupportedIterableToArray(r2) || _nonIterableSpread();
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e3) {
  if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t3, e3) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
    return t4.__proto__ = e4, t4;
  }, _setPrototypeOf(t3, e3);
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(t3, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t3.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t3,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t3, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf(t3, e3);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(t3) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
    return t4.__proto__ || Object.getPrototypeOf(t4);
  }, _getPrototypeOf(t3);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t4) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t3;
  })();
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(t3, e3) {
  if (e3 && ("object" == _typeof(e3) || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t3);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(t3) {
  var r2 = _isNativeReflectConstruct();
  return function() {
    var e3, o2 = _getPrototypeOf(t3);
    if (r2) {
      var s2 = _getPrototypeOf(this).constructor;
      e3 = Reflect.construct(o2, arguments, s2);
    } else e3 = o2.apply(this, arguments);
    return _possibleConstructorReturn(this, e3);
  };
}

// node_modules/tween-one/es/plugins/ArrayPlugin.js
var import_style_utils3 = __toESM(require_main());

// node_modules/tween-one/es/plugins/PluginMixins.js
var PluginMixins = _createClass(
  // 转换成实际属性，__self 为平辅到子节点
  function PluginMixins2(value, key) {
    _classCallCheck(this, PluginMixins2);
    this.value = void 0;
    this.key = void 0;
    this.root = void 0;
    this.index = void 0;
    this.style = {};
    this.start = {};
    this.startAt = {};
    this.target = void 0;
    this.value = value;
    this.key = key;
  }
);
PluginMixins.className = void 0;
PluginMixins.key = void 0;

// node_modules/tween-one/es/plugins/ArrayPlugin.js
var ArrayPlugin = (function(_PluginMixins) {
  _inherits(ArrayPlugin2, _PluginMixins);
  var _super = _createSuper(ArrayPlugin2);
  function ArrayPlugin2(_value, _key) {
    var _this;
    _classCallCheck(this, ArrayPlugin2);
    _this = _super.call(this, _value, _key);
    _this.value = void 0;
    _this.key = void 0;
    _this.start = [];
    _this.tweenVars = {};
    _this.vars = {};
    _this.computedStyle = void 0;
    _this.propsData = {
      data: [],
      unit: [],
      count: []
    };
    _this.setDefaultData = function(type, splitStr) {
      var _assertThisInitialize = _assertThisInitialized(_this), propsData = _assertThisInitialize.propsData, value = _assertThisInitialize.value;
      var v2 = _toConsumableArray(value);
      if (type === "color") {
        var _v$;
        v2[3] = (_v$ = v2[3]) !== null && _v$ !== void 0 ? _v$ : 1;
      }
      propsData.type = type;
      propsData.data = v2.map(function(c2) {
        return !parseFloat(c2) && parseFloat(c2) !== 0 ? c2 : parseFloat(c2);
      });
      propsData.unit = v2.map(function(c2) {
        return c2.toString().replace(/[^a-z|%]/g, "");
      });
      propsData.count = v2.map(function(c2) {
        return c2.toString().replace(/[^+|=|-]/g, "");
      });
      if (splitStr) {
        propsData.splitStr = splitStr;
      }
    };
    _this.convertToMarksArray = function(unit, key, data, i2) {
      var startUnit = (data || "").toString().replace(/[^a-z|%]/g, "");
      var endUnit = typeof i2 === "number" ? unit[i2] : void 0;
      if (startUnit === endUnit) {
        return parseFloat(data);
      } else if (!parseFloat(data) && parseFloat(data) !== 0) {
        return data;
      }
      return startConvertToEndUnit({
        target: _this.target,
        computedStyle: _this.computedStyle,
        style: key,
        value: data,
        startUnit,
        endUnit,
        isOriginWidth: key === "transformOrigin" && !i2
      });
    };
    _this.getAnimStart = function() {
      var _ref, _ref2, _startAt$key, _tweenVars$style;
      var _assertThisInitialize2 = _assertThisInitialized(_this), startAt = _assertThisInitialize2.startAt, target = _assertThisInitialize2.target, key = _assertThisInitialize2.key, propsData = _assertThisInitialize2.propsData, computedStyle = _assertThisInitialize2.computedStyle, tweenVars = _assertThisInitialize2.tweenVars;
      var startValue = (_ref = (_ref2 = (_startAt$key = startAt === null || startAt === void 0 ? void 0 : startAt[key]) !== null && _startAt$key !== void 0 ? _startAt$key : computedStyle ? (_tweenVars$style = tweenVars.style) === null || _tweenVars$style === void 0 ? void 0 : _tweenVars$style[key] : tweenVars[key]) !== null && _ref2 !== void 0 ? _ref2 : (computedStyle || target)[key]) !== null && _ref !== void 0 ? _ref : "";
      var inset = propsData.data.indexOf("inset");
      var oldShadow;
      if (inset !== -1 && !startValue.match("inset") && propsData.type === "shadow") {
        oldShadow = startValue;
        startValue = "";
      }
      if (!startValue || startValue === "none" || startValue === "auto") {
        startValue = "";
      }
      startValue = propsData.type === "shadow" ? (0, import_style_utils3.parseShadow)(startValue, key) : startValue;
      startValue = propsData.type === "color" ? (0, import_style_utils3.parseColor)(startValue) : startValue;
      startValue = propsData.type === "string" ? startValue.split(/[\s|,]/) : startValue;
      if (styleValueToArray[key]) {
        var _startValue$, _startValue$2, _ref3, _startValue$3;
        startValue[1] = (_startValue$ = startValue[1]) !== null && _startValue$ !== void 0 ? _startValue$ : startValue[0];
        startValue[2] = (_startValue$2 = startValue[2]) !== null && _startValue$2 !== void 0 ? _startValue$2 : startValue[0];
        startValue[3] = (_ref3 = (_startValue$3 = startValue[3]) !== null && _startValue$3 !== void 0 ? _startValue$3 : startValue[1]) !== null && _ref3 !== void 0 ? _ref3 : startValue[0];
      }
      var endUnit = propsData.unit;
      var startData = startValue.map(function(c2, i2) {
        if (parseFloat(c2).toString() === "NaN") {
          return c2;
        }
        return _this.convertToMarksArray(endUnit, key, c2, i2);
      });
      _this.start = startData.concat(inset >= 0 ? "inset" : []);
      _this.start.oldShadow = oldShadow;
      return _this.start;
    };
    _this.render = function(ratio) {
      var _assertThisInitialize3 = _assertThisInitialized(_this), start = _assertThisInitialize3.start, propsData = _assertThisInitialize3.propsData;
      var type = propsData.type, splitStr = propsData.splitStr, data = propsData.data, count = propsData.count, unit = propsData.unit;
      var ratioData = data.map(function(c3, i2) {
        return typeof c3 === "string" ? c3 : getValue(start[i2], c3, ratio, count[i2], unit[i2]);
      });
      switch (type) {
        case "string":
          ratioData = ratioData.join(splitStr);
          break;
        case "color":
          ratioData = (0, import_style_utils3.getColor)(ratioData);
          break;
        case "shadow": {
          var endInset = ratioData.indexOf("inset") >= 0;
          var r2 = endInset ? ratioData.filter(function(c3) {
            return c3 !== "inset";
          }) : ratioData;
          var s2 = r2.slice(0, r2.length - 4).map(function(a2) {
            if (typeof a2 === "number") {
              return "".concat(a2, "px");
            }
            return a2;
          });
          var c2 = (0, import_style_utils3.getColor)(r2.slice(r2.length - 4, r2.length));
          ratioData = "".concat(start.oldShadow ? "".concat(start.oldShadow, ",") : "").concat(s2.join(" "), " ").concat(c2, " ").concat(endInset ? "inset" : "").trim();
          break;
        }
        default:
          break;
      }
      return ratioData;
    };
    _this.value = _value;
    _this.key = _key;
    var _type = "";
    var _splitStr = "";
    if (typeof _value === "string") {
      if (_key.match(shadowExp)) {
        _this.value = (0, import_style_utils3.parseShadow)(_value, _key);
        _type = "shadow";
      } else if (_key.match(/color|fill|stroke/i) || _value.match(colorRegExp)) {
        _this.value = (0, import_style_utils3.parseColor)(_value);
        _type = "color";
      } else {
        _splitStr = _value.replace(/[^\s|,]/g, "").replace(/\s+/g, " ");
        _this.value = _value.split(/[\s|,]/);
        _type = "string";
      }
    }
    _this.setDefaultData(_type, _splitStr);
    return _this;
  }
  return _createClass(ArrayPlugin2);
})(PluginMixins);
ArrayPlugin.className = "ArrayPlugin";
var ArrayPlugin_default = ArrayPlugin;

// node_modules/tween-one/es/plugins/GradientsPlugin.js
var import_style_utils4 = __toESM(require_main());
var angleData = {
  linear: {
    "to top": "0deg",
    "to top right": "45deg",
    "to right top": "45deg",
    "to right": "90deg",
    "to right bottom": "135deg",
    "to bottom right": "135deg",
    "to bottom": "180deg",
    "to bottom left": "225deg",
    "to left bottom": "225deg",
    "to left": "270deg",
    "to left top": "315deg",
    "to top left": "315deg"
  },
  radial: {
    center: "50% 50%",
    top: "50% 0%",
    "top right": "100% 0%",
    "right top": "100% 0%",
    right: "100% 50%",
    "right bottom": "100% 100%",
    "bottom right": "100% 100%",
    bottom: "50% 100%",
    "bottom left": "0% 100%",
    "left bottom": "0% 100%",
    left: "0% 50%",
    "left top": "0% 0%",
    "top left": "0% 0%"
  }
};
var extentKeyWord = ["closest-side", "closest-corner", "farthest-side", "farthest-corner"];
var consoleWarn = function consoleWarn2(key, start, to) {
  console.warn("Warning: The gradient ".concat(key, "(").concat(start, " => ").concat(to, ") is different, which has been automatically converted to animation gradient ").concat(key, "(").concat(to, ")."));
};
var noGradient = function noGradient2(type) {
  return type === "url" || type.indexOf("image") >= 0 || type === "paint" || type === "cross-fade" || type === "element";
};
var GradientsPlugin = (function(_PluginMixins) {
  _inherits(GradientsPlugin2, _PluginMixins);
  var _super = _createSuper(GradientsPlugin2);
  function GradientsPlugin2(_value) {
    var _this;
    _classCallCheck(this, GradientsPlugin2);
    _this = _super.call(this, _value, "backgroundImage");
    _this.value = void 0;
    _this.tweenVars = {};
    _this.vars = [];
    _this.computedStyle = void 0;
    _this.defaultStartVars = [];
    _this.getPosition = function(data) {
      return data.map(function(t3) {
        return {
          data: parseFloat(t3),
          unit: t3.replace(/[^a-z|%]/g, "")
        };
      });
    };
    _this.getAngle = function(type, $angle) {
      var t3 = type.replace(/-|gradient|repeating]/g, "");
      var extent;
      var shape;
      var angle;
      var position;
      switch (t3) {
        case "linear": {
          angle = _this.getPosition((angleData.linear[$angle] || $angle || angleData.linear["to bottom"]).split(" "));
          break;
        }
        case "radial": {
          var angleSplit = $angle.split(" ");
          extent = angleSplit.find(function(s2) {
            return extentKeyWord.indexOf(s2) >= 0;
          }) || extentKeyWord[3];
          shape = angleSplit.find(function(s2) {
            return s2 === "circle" || s2 === "ellipse";
          }) || "ellipse";
          var req = new RegExp("".concat(extent, "|").concat(shape, "|at"), "g");
          var p2 = $angle.replace(req, "").trim();
          position = _this.getPosition((angleData.radial[p2] || p2 || angleData.radial.center).split(" "));
          break;
        }
        case "conic": {
          var _angleSplit = $angle.split("at").map(function(c2) {
            return c2.trim();
          });
          var n2 = (_angleSplit[0] || "").split(" ");
          shape = n2[0] || "from";
          angle = _this.getPosition([n2[1] || "0deg"]);
          position = _this.getPosition((angleData.radial[_angleSplit[1]] || _angleSplit[1] || angleData.radial.center).split(" "));
          break;
        }
        default:
          break;
      }
      return {
        extent,
        shape,
        angle,
        position
      };
    };
    _this.valueToIValue = function(value) {
      if (!value) {
        return [];
      }
      var v2 = value.replace(/\),\s+?(url|radial|conic|linear|repeating|image|element|cross|paint)/, ")#,#$1").split("#,#");
      return v2.map(function(str) {
        var type = str.replace(/([a-z|-]+)\((.*)\)/, "$1").trim();
        if (type === "url") {
          return {
            type,
            values: str
          };
        }
        var data = str.replace(/([a-z|-]+)\((.*)\)/, "$2").replace(/#([0-9a-f]{6}|[0-9a-f]{3})|(rgb[a]?|hsl)+\(\d+\,[\s+]?\d+[\%]?\,[\s+]?\d+[\%]?(\,\d+)?\)/gi, function(e3) {
          return e3.replace(/\s+/g, "");
        }).replace(/\,([a-z|#|\s+])/g, "#,#$1").split("#,#").map(function(str2) {
          return str2.trim();
        });
        var a2 = data[0].match(colorRegExp) ? "" : data[0];
        if (a2) {
          data.splice(0, 1);
        }
        var angle = _this.getAngle(type, a2);
        var values = data.map(function(s2) {
          var colorAndPos = s2.trim().split(/\s+/);
          var color;
          var t3 = colorAndPos[0].match(colorRegExp) ? colorAndPos[0] : colorAndPos[0];
          if (t3) {
            colorAndPos.splice(0, 1);
            color = (0, import_style_utils4.parseColor)(t3);
          }
          return {
            color,
            positions: colorAndPos.map(function(s3) {
              return {
                data: parseFloat(s3),
                unit: s3.toString().replace(/[^a-z|%]/g, "")
              };
            })
          };
        });
        return {
          type,
          angle,
          values
        };
      });
    };
    _this.getAnimStart = function() {
      var _tweenVars$key;
      var _assertThisInitialize = _assertThisInitialized(_this), s2 = _assertThisInitialize.startAt, key = _assertThisInitialize.key, computedStyle = _assertThisInitialize.computedStyle, target = _assertThisInitialize.target, vars = _assertThisInitialize.vars, tweenVars = _assertThisInitialize.tweenVars;
      var startAt = _objectSpread2({}, s2);
      var v2 = (_tweenVars$key = tweenVars[key]) !== null && _tweenVars$key !== void 0 ? _tweenVars$key : (computedStyle || target)[key];
      if (!v2 || v2 === "none" || v2 === "auto") {
        v2 = "";
      }
      startAt[key] = startAt[key] || v2;
      startAt[key] = startAt[key] ? _this.valueToIValue(startAt[key]) : _this.defaultStartVars;
      var maxVarsLength = Math.max(vars.length, startAt[key].length);
      var startData = (maxVarsLength === startAt[key].length ? startAt[key] : vars).map(function(_2, i2) {
        var _item$angle, _start$angle;
        var start = startAt[key][i2] || _this.defaultStartVars[i2];
        var item = vars[i2] || start;
        if (!start || start.type !== item.type) {
          if (start.type !== item.type) {
            consoleWarn("type", start.type, item.type);
          }
          start = _this.defaultStartVars[i2];
        }
        if (noGradient(item.type) || typeof item.values === "string" || typeof start.values === "string") {
          return _objectSpread2({}, item);
        }
        if (((_item$angle = item.angle) === null || _item$angle === void 0 ? void 0 : _item$angle.extent) !== ((_start$angle = start.angle) === null || _start$angle === void 0 ? void 0 : _start$angle.extent)) {
          var _start$angle2, _item$angle2;
          consoleWarn("extent keyword", (_start$angle2 = start.angle) === null || _start$angle2 === void 0 ? void 0 : _start$angle2.extent, (_item$angle2 = item.angle) === null || _item$angle2 === void 0 ? void 0 : _item$angle2.extent);
        }
        var maxLength = Math.max(start.values.length, item.values.length);
        var values = maxLength === start.values.length ? start.values : item.values;
        start.values = values.map(function(_3, j2) {
          var sValue = start.values[j2];
          var aItem = item.values[j2] || sValue;
          return _objectSpread2(_objectSpread2({}, sValue), {}, {
            positions: (aItem || sValue).positions.map(function($bItem, jj) {
              var sPos = sValue ? sValue.positions[jj] || sValue.positions[sValue.positions.length - 1] : aItem.positions[aItem.positions.length - 1];
              var bItem = $bItem || sPos;
              if (!sPos && sValue && start.values.length) {
                sPos = {
                  data: 100 / (start.values.length - 1) * j2,
                  unit: "%"
                };
              }
              if (bItem.unit !== sPos.unit) {
                consoleWarn("units", sPos.unit, bItem.unit);
              }
              return {
                data: sPos.data,
                unit: bItem.unit
              };
            })
          });
        });
        return start;
      });
      _this.start = startData;
      return _this.start;
    };
    _this.render = function(ratio) {
      var value = "";
      var maxVarsLength = Math.max(_this.vars.length, _this.start.length);
      (maxVarsLength === _this.vars.length ? _this.vars : _this.start).forEach(function(_2, i2) {
        var start = _this.start[i2];
        var item = _this.vars[i2] || start;
        if (noGradient(item.type) || typeof item.values === "string" || !item.angle) {
          value += "".concat(value ? "," : "", " ").concat(item.values).trim();
          return;
        }
        var maxLength = Math.max(start.values.length, item.values.length);
        var values = (maxLength === start.values.length ? start.values : item.values).map(function(_3, i3) {
          var startItem = start.values[i3];
          var cItem = item.values[i3];
          if (!cItem) {
            cItem = startItem;
          }
          var startColor = startItem.color;
          var startPos = startItem.positions;
          if (!startColor && cItem.color) {
            startColor = _toConsumableArray(cItem.color);
          }
          if (!startPos) {
            startPos = cItem.positions.map(function(c2) {
              return _objectSpread2({}, c2);
            });
          }
          var color = cItem.color ? cItem.color.map(function(n2, j2) {
            return getValue(startColor[j2], n2, ratio);
          }) : cItem.color;
          var positions = cItem.positions.map(function(n2, j2) {
            return "".concat(getValue(startPos[j2].data, n2.data, ratio)).concat(n2.unit);
          }).join(" ");
          return "".concat(color ? (0, import_style_utils4.getColor)(color) : color || "", " ").concat(positions).trim();
        });
        var angle = item.angle;
        var angleAngle = angle.angle && angle.angle.map(function(n2, j2) {
          return "".concat(getValue(start.angle.angle[j2].data, n2.data, ratio)).concat(n2.unit);
        }).join(" ");
        var anglePosition = angle.position && angle.position.map(function(n2, j2) {
          return "".concat(getValue(start.angle.position[j2].data, n2.data, ratio)).concat(n2.unit);
        }).join(" ");
        var newAngle = "".concat(angle.extent || "", " ").concat(angle.shape || "", " ").concat(angleAngle || "", " ").concat(anglePosition ? "at ".concat(anglePosition) : "").trim();
        value += "".concat(value ? "," : "", " ").concat(item.type, "(").concat(newAngle ? "".concat(newAngle, ",") : "").concat(values.join(","), ")").trim();
      });
      return value;
    };
    _this.value = _value;
    _this.vars = _this.valueToIValue(_value);
    _this.defaultStartVars = _this.vars.map(function(item) {
      if (noGradient(item.type) || typeof item.values === "string") {
        return _objectSpread2({}, item);
      }
      return _objectSpread2(_objectSpread2({}, item), {}, {
        values: item.values.map(function(c2) {
          var color;
          if (c2.color && typeof c2.color !== "string") {
            color = _toConsumableArray(c2.color);
            color[3] = 0;
          } else {
            color = c2.color;
          }
          return {
            color,
            positions: _toConsumableArray(c2.positions)
          };
        })
      });
    });
    return _this;
  }
  return _createClass(GradientsPlugin2);
})(PluginMixins);
GradientsPlugin.className = "GradientsPlugin";

// node_modules/svg-path-properties/dist/svg-path-properties.esm.js
function t(t3, n2) {
  for (var e3 = 0; e3 < n2.length; e3++) {
    var i2 = n2[e3];
    i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t3, h(i2.key), i2);
  }
}
function n(n2, e3, i2) {
  return e3 && t(n2.prototype, e3), i2 && t(n2, i2), Object.defineProperty(n2, "prototype", { writable: false }), n2;
}
function e(t3, n2, e3) {
  return (n2 = h(n2)) in t3 ? Object.defineProperty(t3, n2, { value: e3, enumerable: true, configurable: true, writable: true }) : t3[n2] = e3, t3;
}
function i(t3) {
  return (function(t4) {
    if (Array.isArray(t4)) return r(t4);
  })(t3) || (function(t4) {
    if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"]) return Array.from(t4);
  })(t3) || (function(t4, n2) {
    if (!t4) return;
    if ("string" == typeof t4) return r(t4, n2);
    var e3 = Object.prototype.toString.call(t4).slice(8, -1);
    "Object" === e3 && t4.constructor && (e3 = t4.constructor.name);
    if ("Map" === e3 || "Set" === e3) return Array.from(t4);
    if ("Arguments" === e3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e3)) return r(t4, n2);
  })(t3) || (function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  })();
}
function r(t3, n2) {
  (null == n2 || n2 > t3.length) && (n2 = t3.length);
  for (var e3 = 0, i2 = new Array(n2); e3 < n2; e3++) i2[e3] = t3[e3];
  return i2;
}
function h(t3) {
  var n2 = (function(t4, n3) {
    if ("object" != typeof t4 || null === t4) return t4;
    var e3 = t4[Symbol.toPrimitive];
    if (void 0 !== e3) {
      var i2 = e3.call(t4, n3 || "default");
      if ("object" != typeof i2) return i2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === n3 ? String : Number)(t4);
  })(t3, "string");
  return "symbol" == typeof n2 ? n2 : String(n2);
}
var a = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 };
var s = /([astvzqmhlc])([^astvzqmhlc]*)/gi;
var o = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi;
var g = function(t3) {
  var n2 = t3.match(o);
  return n2 ? n2.map(Number) : [];
};
var u = n((function(t3, n2, i2, r2) {
  var h2 = this;
  e(this, "x0", void 0), e(this, "x1", void 0), e(this, "y0", void 0), e(this, "y1", void 0), e(this, "getTotalLength", (function() {
    return Math.sqrt(Math.pow(h2.x0 - h2.x1, 2) + Math.pow(h2.y0 - h2.y1, 2));
  })), e(this, "getPointAtLength", (function(t4) {
    var n3 = t4 / Math.sqrt(Math.pow(h2.x0 - h2.x1, 2) + Math.pow(h2.y0 - h2.y1, 2));
    n3 = Number.isNaN(n3) ? 1 : n3;
    var e3 = (h2.x1 - h2.x0) * n3, i3 = (h2.y1 - h2.y0) * n3;
    return { x: h2.x0 + e3, y: h2.y0 + i3 };
  })), e(this, "getTangentAtLength", (function(t4) {
    var n3 = Math.sqrt((h2.x1 - h2.x0) * (h2.x1 - h2.x0) + (h2.y1 - h2.y0) * (h2.y1 - h2.y0));
    return { x: (h2.x1 - h2.x0) / n3, y: (h2.y1 - h2.y0) / n3 };
  })), e(this, "getPropertiesAtLength", (function(t4) {
    var n3 = h2.getPointAtLength(t4), e3 = h2.getTangentAtLength(t4);
    return { x: n3.x, y: n3.y, tangentX: e3.x, tangentY: e3.y };
  })), this.x0 = t3, this.x1 = n2, this.y0 = i2, this.y1 = r2;
}));
var l = n((function(t3, n2, i2, r2, h2, a2, s2, o2, g2) {
  var u2 = this;
  e(this, "x0", void 0), e(this, "y0", void 0), e(this, "rx", void 0), e(this, "ry", void 0), e(this, "xAxisRotate", void 0), e(this, "LargeArcFlag", void 0), e(this, "SweepFlag", void 0), e(this, "x1", void 0), e(this, "y1", void 0), e(this, "length", void 0), e(this, "getTotalLength", (function() {
    return u2.length;
  })), e(this, "getPointAtLength", (function(t4) {
    t4 < 0 ? t4 = 0 : t4 > u2.length && (t4 = u2.length);
    var n3 = c({ x: u2.x0, y: u2.y0 }, u2.rx, u2.ry, u2.xAxisRotate, u2.LargeArcFlag, u2.SweepFlag, { x: u2.x1, y: u2.y1 }, t4 / u2.length);
    return { x: n3.x, y: n3.y };
  })), e(this, "getTangentAtLength", (function(t4) {
    t4 < 0 ? t4 = 0 : t4 > u2.length && (t4 = u2.length);
    var n3, e3 = 0.05, i3 = u2.getPointAtLength(t4);
    t4 < 0 ? t4 = 0 : t4 > u2.length && (t4 = u2.length);
    var r3 = (n3 = t4 < u2.length - e3 ? u2.getPointAtLength(t4 + e3) : u2.getPointAtLength(t4 - e3)).x - i3.x, h3 = n3.y - i3.y, a3 = Math.sqrt(r3 * r3 + h3 * h3);
    return t4 < u2.length - e3 ? { x: -r3 / a3, y: -h3 / a3 } : { x: r3 / a3, y: h3 / a3 };
  })), e(this, "getPropertiesAtLength", (function(t4) {
    var n3 = u2.getTangentAtLength(t4), e3 = u2.getPointAtLength(t4);
    return { x: e3.x, y: e3.y, tangentX: n3.x, tangentY: n3.y };
  })), this.x0 = t3, this.y0 = n2, this.rx = i2, this.ry = r2, this.xAxisRotate = h2, this.LargeArcFlag = a2, this.SweepFlag = s2, this.x1 = o2, this.y1 = g2;
  var l2 = f(300, (function(e3) {
    return c({ x: t3, y: n2 }, i2, r2, h2, a2, s2, { x: o2, y: g2 }, e3);
  }));
  this.length = l2.arcLength;
}));
var c = function(t3, n2, e3, i2, r2, h2, a2, s2) {
  n2 = Math.abs(n2), e3 = Math.abs(e3), i2 = y(i2, 360);
  var o2 = p(i2);
  if (t3.x === a2.x && t3.y === a2.y) return { x: t3.x, y: t3.y, ellipticalArcAngle: 0 };
  if (0 === n2 || 0 === e3) return { x: 0, y: 0, ellipticalArcAngle: 0 };
  var g2 = (t3.x - a2.x) / 2, u2 = (t3.y - a2.y) / 2, l2 = { x: Math.cos(o2) * g2 + Math.sin(o2) * u2, y: -Math.sin(o2) * g2 + Math.cos(o2) * u2 }, c2 = Math.pow(l2.x, 2) / Math.pow(n2, 2) + Math.pow(l2.y, 2) / Math.pow(e3, 2);
  c2 > 1 && (n2 = Math.sqrt(c2) * n2, e3 = Math.sqrt(c2) * e3);
  var f2 = (Math.pow(n2, 2) * Math.pow(e3, 2) - Math.pow(n2, 2) * Math.pow(l2.y, 2) - Math.pow(e3, 2) * Math.pow(l2.x, 2)) / (Math.pow(n2, 2) * Math.pow(l2.y, 2) + Math.pow(e3, 2) * Math.pow(l2.x, 2));
  f2 = f2 < 0 ? 0 : f2;
  var x2 = (r2 !== h2 ? 1 : -1) * Math.sqrt(f2), v2 = x2 * (n2 * l2.y / e3), w2 = x2 * (-e3 * l2.x / n2), L2 = { x: Math.cos(o2) * v2 - Math.sin(o2) * w2 + (t3.x + a2.x) / 2, y: Math.sin(o2) * v2 + Math.cos(o2) * w2 + (t3.y + a2.y) / 2 }, A2 = { x: (l2.x - v2) / n2, y: (l2.y - w2) / e3 }, d2 = M({ x: 1, y: 0 }, A2), b2 = M(A2, { x: (-l2.x - v2) / n2, y: (-l2.y - w2) / e3 });
  !h2 && b2 > 0 ? b2 -= 2 * Math.PI : h2 && b2 < 0 && (b2 += 2 * Math.PI);
  var m2 = d2 + (b2 %= 2 * Math.PI) * s2, P2 = n2 * Math.cos(m2), T2 = e3 * Math.sin(m2);
  return { x: Math.cos(o2) * P2 - Math.sin(o2) * T2 + L2.x, y: Math.sin(o2) * P2 + Math.cos(o2) * T2 + L2.y, ellipticalArcStartAngle: d2, ellipticalArcEndAngle: d2 + b2, ellipticalArcAngle: m2, ellipticalArcCenter: L2, resultantRx: n2, resultantRy: e3 };
};
var f = function(t3, n2) {
  t3 = t3 || 500;
  for (var e3, i2 = 0, r2 = [], h2 = [], a2 = n2(0), s2 = 0; s2 < t3; s2++) {
    var o2 = v(s2 * (1 / t3), 0, 1);
    e3 = n2(o2), i2 += x(a2, e3), h2.push([a2, e3]), r2.push({ t: o2, arcLength: i2 }), a2 = e3;
  }
  return e3 = n2(1), h2.push([a2, e3]), i2 += x(a2, e3), r2.push({ t: 1, arcLength: i2 }), { arcLength: i2, arcLengthMap: r2, approximationLines: h2 };
};
var y = function(t3, n2) {
  return (t3 % n2 + n2) % n2;
};
var p = function(t3) {
  return t3 * (Math.PI / 180);
};
var x = function(t3, n2) {
  return Math.sqrt(Math.pow(n2.x - t3.x, 2) + Math.pow(n2.y - t3.y, 2));
};
var v = function(t3, n2, e3) {
  return Math.min(Math.max(t3, n2), e3);
};
var M = function(t3, n2) {
  var e3 = t3.x * n2.x + t3.y * n2.y, i2 = Math.sqrt((Math.pow(t3.x, 2) + Math.pow(t3.y, 2)) * (Math.pow(n2.x, 2) + Math.pow(n2.y, 2)));
  return (t3.x * n2.y - t3.y * n2.x < 0 ? -1 : 1) * Math.acos(e3 / i2);
};
var w = [[], [], [-0.5773502691896257, 0.5773502691896257], [0, -0.7745966692414834, 0.7745966692414834], [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526], [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664], [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152, 0.932469514203152], [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585, 0.9491079123427585], [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267, 0.7966664774136267, -0.9602898564975363, 0.9602898564975363], [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089, 0.3242534234038089, -0.6133714327005904, 0.6133714327005904], [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244, 0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717], [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118, -0.7301520055740494, 0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057], [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175, 0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749, -0.9815606342467192, 0.9815606342467192], [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687, -0.6423493394403402, 0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779, -0.9841830547185881, 0.9841830547185881], [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541, 0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765, -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123], [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634, -0.5709721726085388, 0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272, -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854], [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737, 0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003, -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499, 0.9894009349916499], [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763, -0.5126905370864769, 0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014, -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174, 0.9905754753144174], [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263, 0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532, -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977, 0.9558239495713977, -0.9915651684209309, 0.9915651684209309], [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983, -0.46457074137596094, 0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294, -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483, 0.96020815213483, -0.9924068438435844, 0.9924068438435844], [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507, -0.37370608871541955, 0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515, -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326, 0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949], [0, -0.1455618541608951, 0.1455618541608951, -0.2880213168024011, 0.2880213168024011, -0.4243421202074388, 0.4243421202074388, -0.5516188358872198, 0.5516188358872198, -0.6671388041974123, 0.6671388041974123, -0.7684399634756779, 0.7684399634756779, -0.8533633645833173, 0.8533633645833173, -0.9200993341504008, 0.9200993341504008, -0.9672268385663063, 0.9672268385663063, -0.9937521706203895, 0.9937521706203895], [-0.06973927331972223, 0.06973927331972223, -0.20786042668822127, 0.20786042668822127, -0.34193582089208424, 0.34193582089208424, -0.469355837986757, 0.469355837986757, -0.5876404035069116, 0.5876404035069116, -0.6944872631866827, 0.6944872631866827, -0.7878168059792081, 0.7878168059792081, -0.8658125777203002, 0.8658125777203002, -0.926956772187174, 0.926956772187174, -0.9700604978354287, 0.9700604978354287, -0.9942945854823992, 0.9942945854823992], [0, -0.1332568242984661, 0.1332568242984661, -0.26413568097034495, 0.26413568097034495, -0.3903010380302908, 0.3903010380302908, -0.5095014778460075, 0.5095014778460075, -0.6196098757636461, 0.6196098757636461, -0.7186613631319502, 0.7186613631319502, -0.8048884016188399, 0.8048884016188399, -0.8767523582704416, 0.8767523582704416, -0.9329710868260161, 0.9329710868260161, -0.9725424712181152, 0.9725424712181152, -0.9947693349975522, 0.9947693349975522], [-0.06405689286260563, 0.06405689286260563, -0.1911188674736163, 0.1911188674736163, -0.3150426796961634, 0.3150426796961634, -0.4337935076260451, 0.4337935076260451, -0.5454214713888396, 0.5454214713888396, -0.6480936519369755, 0.6480936519369755, -0.7401241915785544, 0.7401241915785544, -0.820001985973903, 0.820001985973903, -0.8864155270044011, 0.8864155270044011, -0.9382745520027328, 0.9382745520027328, -0.9747285559713095, 0.9747285559713095, -0.9951872199970213, 0.9951872199970213]];
var L = [[], [], [1, 1], [0.8888888888888888, 0.5555555555555556, 0.5555555555555556], [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385], [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908], [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036, 0.17132449237917036], [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664, 0.1294849661688697, 0.1294849661688697], [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448, 0.22238103445337448, 0.10122853629037626, 0.10122853629037626], [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441, 0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544], [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204, 0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814], [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048, 0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366, 0.05566856711617366], [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592, 0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843, 0.04717533638651183, 0.04717533638651183], [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885, 0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845, 0.09212149983772845, 0.04048400476531588, 0.04048400476531588], [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782, 0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319, 0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186], [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622, 0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194, 0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727], [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254, 0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388, 0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894, 0.027152459411754096, 0.027152459411754096], [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004, 0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397, 0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872, 0.02414830286854793, 0.02414830286854793], [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524, 0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846, 0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698, 0.0497145488949698, 0.02161601352648331, 0.02161601352648331], [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967, 0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399, 0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123, 0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478], [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204, 0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841, 0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907, 0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118], [0.14608113364969041, 0.14452440398997005, 0.14452440398997005, 0.13988739479107315, 0.13988739479107315, 0.13226893863333747, 0.13226893863333747, 0.12183141605372853, 0.12183141605372853, 0.10879729916714838, 0.10879729916714838, 0.09344442345603386, 0.09344442345603386, 0.0761001136283793, 0.0761001136283793, 0.057134425426857205, 0.057134425426857205, 0.036953789770852494, 0.036953789770852494, 0.016017228257774335, 0.016017228257774335], [0.13925187285563198, 0.13925187285563198, 0.13654149834601517, 0.13654149834601517, 0.13117350478706238, 0.13117350478706238, 0.12325237681051242, 0.12325237681051242, 0.11293229608053922, 0.11293229608053922, 0.10041414444288096, 0.10041414444288096, 0.08594160621706773, 0.08594160621706773, 0.06979646842452049, 0.06979646842452049, 0.052293335152683286, 0.052293335152683286, 0.03377490158481415, 0.03377490158481415, 0.0146279952982722, 0.0146279952982722], [0.13365457218610619, 0.1324620394046966, 0.1324620394046966, 0.12890572218808216, 0.12890572218808216, 0.12304908430672953, 0.12304908430672953, 0.11499664022241136, 0.11499664022241136, 0.10489209146454141, 0.10489209146454141, 0.09291576606003515, 0.09291576606003515, 0.07928141177671895, 0.07928141177671895, 0.06423242140852585, 0.06423242140852585, 0.04803767173108467, 0.04803767173108467, 0.030988005856979445, 0.030988005856979445, 0.013411859487141771, 0.013411859487141771], [0.12793819534675216, 0.12793819534675216, 0.1258374563468283, 0.1258374563468283, 0.12167047292780339, 0.12167047292780339, 0.1155056680537256, 0.1155056680537256, 0.10744427011596563, 0.10744427011596563, 0.09761865210411388, 0.09761865210411388, 0.08619016153195327, 0.08619016153195327, 0.0733464814110803, 0.0733464814110803, 0.05929858491543678, 0.05929858491543678, 0.04427743881741981, 0.04427743881741981, 0.028531388628933663, 0.028531388628933663, 0.0123412297999872, 0.0123412297999872]];
var A = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]];
var d = function(t3, n2, e3) {
  return { x: (1 - e3) * (1 - e3) * (1 - e3) * t3[0] + 3 * (1 - e3) * (1 - e3) * e3 * t3[1] + 3 * (1 - e3) * e3 * e3 * t3[2] + e3 * e3 * e3 * t3[3], y: (1 - e3) * (1 - e3) * (1 - e3) * n2[0] + 3 * (1 - e3) * (1 - e3) * e3 * n2[1] + 3 * (1 - e3) * e3 * e3 * n2[2] + e3 * e3 * e3 * n2[3] };
};
var b = function(t3, n2, e3) {
  return P([3 * (t3[1] - t3[0]), 3 * (t3[2] - t3[1]), 3 * (t3[3] - t3[2])], [3 * (n2[1] - n2[0]), 3 * (n2[2] - n2[1]), 3 * (n2[3] - n2[2])], e3);
};
var m = function(t3, n2, e3) {
  var i2, r2, h2;
  i2 = e3 / 2, r2 = 0;
  for (var a2 = 0; a2 < 20; a2++) h2 = i2 * w[20][a2] + i2, r2 += L[20][a2] * _(t3, n2, h2);
  return i2 * r2;
};
var P = function(t3, n2, e3) {
  return { x: (1 - e3) * (1 - e3) * t3[0] + 2 * (1 - e3) * e3 * t3[1] + e3 * e3 * t3[2], y: (1 - e3) * (1 - e3) * n2[0] + 2 * (1 - e3) * e3 * n2[1] + e3 * e3 * n2[2] };
};
var T = function(t3, n2, e3) {
  void 0 === e3 && (e3 = 1);
  var i2 = t3[0] - 2 * t3[1] + t3[2], r2 = n2[0] - 2 * n2[1] + n2[2], h2 = 2 * t3[1] - 2 * t3[0], a2 = 2 * n2[1] - 2 * n2[0], s2 = 4 * (i2 * i2 + r2 * r2), o2 = 4 * (i2 * h2 + r2 * a2), g2 = h2 * h2 + a2 * a2;
  if (0 === s2) return e3 * Math.sqrt(Math.pow(t3[2] - t3[0], 2) + Math.pow(n2[2] - n2[0], 2));
  var u2 = o2 / (2 * s2), l2 = e3 + u2, c2 = g2 / s2 - u2 * u2, f2 = l2 * l2 + c2 > 0 ? Math.sqrt(l2 * l2 + c2) : 0, y2 = u2 * u2 + c2 > 0 ? Math.sqrt(u2 * u2 + c2) : 0, p2 = u2 + Math.sqrt(u2 * u2 + c2) !== 0 && (l2 + f2) / (u2 + y2) != 0 ? c2 * Math.log(Math.abs((l2 + f2) / (u2 + y2))) : 0;
  return Math.sqrt(s2) / 2 * (l2 * f2 - u2 * y2 + p2);
};
var q = function(t3, n2, e3) {
  return { x: 2 * (1 - e3) * (t3[1] - t3[0]) + 2 * e3 * (t3[2] - t3[1]), y: 2 * (1 - e3) * (n2[1] - n2[0]) + 2 * e3 * (n2[2] - n2[1]) };
};
function _(t3, n2, e3) {
  var i2 = S(1, e3, t3), r2 = S(1, e3, n2), h2 = i2 * i2 + r2 * r2;
  return Math.sqrt(h2);
}
var S = function t2(n2, e3, i2) {
  var r2, h2, a2 = i2.length - 1;
  if (0 === a2) return 0;
  if (0 === n2) {
    h2 = 0;
    for (var s2 = 0; s2 <= a2; s2++) h2 += A[a2][s2] * Math.pow(1 - e3, a2 - s2) * Math.pow(e3, s2) * i2[s2];
    return h2;
  }
  r2 = new Array(a2);
  for (var o2 = 0; o2 < a2; o2++) r2[o2] = a2 * (i2[o2 + 1] - i2[o2]);
  return t2(n2 - 1, e3, r2);
};
var N = function(t3, n2, e3) {
  for (var i2 = 1, r2 = t3 / n2, h2 = (t3 - e3(r2)) / n2, a2 = 0; i2 > 1e-3; ) {
    var s2 = e3(r2 + h2), o2 = Math.abs(t3 - s2) / n2;
    if (o2 < i2) i2 = o2, r2 += h2;
    else {
      var g2 = e3(r2 - h2), u2 = Math.abs(t3 - g2) / n2;
      u2 < i2 ? (i2 = u2, r2 -= h2) : h2 /= 2;
    }
    if (++a2 > 500) break;
  }
  return r2;
};
var C = n((function(t3, n2, i2, r2, h2, a2, s2, o2) {
  var g2 = this;
  e(this, "a", void 0), e(this, "b", void 0), e(this, "c", void 0), e(this, "d", void 0), e(this, "length", void 0), e(this, "getArcLength", void 0), e(this, "getPoint", void 0), e(this, "getDerivative", void 0), e(this, "getTotalLength", (function() {
    return g2.length;
  })), e(this, "getPointAtLength", (function(t4) {
    var n3 = [g2.a.x, g2.b.x, g2.c.x, g2.d.x], e3 = [g2.a.y, g2.b.y, g2.c.y, g2.d.y], i3 = N(t4, g2.length, (function(t5) {
      return g2.getArcLength(n3, e3, t5);
    }));
    return g2.getPoint(n3, e3, i3);
  })), e(this, "getTangentAtLength", (function(t4) {
    var n3 = [g2.a.x, g2.b.x, g2.c.x, g2.d.x], e3 = [g2.a.y, g2.b.y, g2.c.y, g2.d.y], i3 = N(t4, g2.length, (function(t5) {
      return g2.getArcLength(n3, e3, t5);
    })), r3 = g2.getDerivative(n3, e3, i3), h3 = Math.sqrt(r3.x * r3.x + r3.y * r3.y);
    return h3 > 0 ? { x: r3.x / h3, y: r3.y / h3 } : { x: 0, y: 0 };
  })), e(this, "getPropertiesAtLength", (function(t4) {
    var n3, e3 = [g2.a.x, g2.b.x, g2.c.x, g2.d.x], i3 = [g2.a.y, g2.b.y, g2.c.y, g2.d.y], r3 = N(t4, g2.length, (function(t5) {
      return g2.getArcLength(e3, i3, t5);
    })), h3 = g2.getDerivative(e3, i3, r3), a3 = Math.sqrt(h3.x * h3.x + h3.y * h3.y);
    n3 = a3 > 0 ? { x: h3.x / a3, y: h3.y / a3 } : { x: 0, y: 0 };
    var s3 = g2.getPoint(e3, i3, r3);
    return { x: s3.x, y: s3.y, tangentX: n3.x, tangentY: n3.y };
  })), e(this, "getC", (function() {
    return g2.c;
  })), e(this, "getD", (function() {
    return g2.d;
  })), this.a = { x: t3, y: n2 }, this.b = { x: i2, y: r2 }, this.c = { x: h2, y: a2 }, void 0 !== s2 && void 0 !== o2 ? (this.getArcLength = m, this.getPoint = d, this.getDerivative = b, this.d = { x: s2, y: o2 }) : (this.getArcLength = T, this.getPoint = P, this.getDerivative = q, this.d = { x: 0, y: 0 }), this.length = this.getArcLength([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y], 1);
}));
var O = n((function(t3) {
  var n2 = this;
  e(this, "length", 0), e(this, "partial_lengths", []), e(this, "functions", []), e(this, "initial_point", null), e(this, "getPartAtLength", (function(t4) {
    t4 < 0 ? t4 = 0 : t4 > n2.length && (t4 = n2.length);
    for (var e3 = n2.partial_lengths.length - 1; n2.partial_lengths[e3] >= t4 && e3 > 0; ) e3--;
    return e3++, { fraction: t4 - n2.partial_lengths[e3 - 1], i: e3 };
  })), e(this, "getTotalLength", (function() {
    return n2.length;
  })), e(this, "getPointAtLength", (function(t4) {
    var e3 = n2.getPartAtLength(t4), i2 = n2.functions[e3.i];
    if (i2) return i2.getPointAtLength(e3.fraction);
    if (n2.initial_point) return n2.initial_point;
    throw new Error("Wrong function at this part.");
  })), e(this, "getTangentAtLength", (function(t4) {
    var e3 = n2.getPartAtLength(t4), i2 = n2.functions[e3.i];
    if (i2) return i2.getTangentAtLength(e3.fraction);
    if (n2.initial_point) return { x: 0, y: 0 };
    throw new Error("Wrong function at this part.");
  })), e(this, "getPropertiesAtLength", (function(t4) {
    var e3 = n2.getPartAtLength(t4), i2 = n2.functions[e3.i];
    if (i2) return i2.getPropertiesAtLength(e3.fraction);
    if (n2.initial_point) return { x: n2.initial_point.x, y: n2.initial_point.y, tangentX: 0, tangentY: 0 };
    throw new Error("Wrong function at this part.");
  })), e(this, "getParts", (function() {
    for (var t4 = [], e3 = 0; e3 < n2.functions.length; e3++) if (null !== n2.functions[e3]) {
      n2.functions[e3] = n2.functions[e3];
      var i2 = { start: n2.functions[e3].getPointAtLength(0), end: n2.functions[e3].getPointAtLength(n2.partial_lengths[e3] - n2.partial_lengths[e3 - 1]), length: n2.partial_lengths[e3] - n2.partial_lengths[e3 - 1], getPointAtLength: n2.functions[e3].getPointAtLength, getTangentAtLength: n2.functions[e3].getTangentAtLength, getPropertiesAtLength: n2.functions[e3].getPropertiesAtLength };
      t4.push(i2);
    }
    return t4;
  }));
  for (var r2, h2 = Array.isArray(t3) ? t3 : (function(t4) {
    var n3 = (t4 && t4.length > 0 ? t4 : "M0,0").match(s);
    if (!n3) throw new Error("No path elements found in string ".concat(t4));
    return n3.reduce((function(t5, n4) {
      var e3 = n4.charAt(0), r3 = e3.toLowerCase(), h3 = g(n4.substring(1));
      if ("m" === r3 && h3.length > 2 && (t5.push([e3].concat(i(h3.splice(0, 2)))), r3 = "l", e3 = "m" === e3 ? "l" : "L"), "a" === r3.toLowerCase() && (5 === h3.length || 6 === h3.length)) {
        var s2 = n4.substring(1).trim().split(" ");
        h3 = [Number(s2[0]), Number(s2[1]), Number(s2[2]), Number(s2[3].charAt(0)), Number(s2[3].charAt(1)), Number(s2[3].substring(2)), Number(s2[4])];
      }
      for (; h3.length >= 0; ) {
        if (h3.length === a[r3]) {
          t5.push([e3].concat(i(h3.splice(0, a[r3]))));
          break;
        }
        if (h3.length < a[r3]) throw new Error('Malformed path data: "'.concat(e3, '" must have ').concat(a[r3], " elements and has ").concat(h3.length, ": ").concat(n4));
        t5.push([e3].concat(i(h3.splice(0, a[r3]))));
      }
      return t5;
    }), []);
  })(t3), o2 = [0, 0], c2 = [0, 0], f2 = [0, 0], y2 = 0; y2 < h2.length; y2++) {
    if ("M" === h2[y2][0]) f2 = [(o2 = [h2[y2][1], h2[y2][2]])[0], o2[1]], this.functions.push(null), 0 === y2 && (this.initial_point = { x: h2[y2][1], y: h2[y2][2] });
    else if ("m" === h2[y2][0]) f2 = [(o2 = [h2[y2][1] + o2[0], h2[y2][2] + o2[1]])[0], o2[1]], this.functions.push(null);
    else if ("L" === h2[y2][0]) this.length += Math.sqrt(Math.pow(o2[0] - h2[y2][1], 2) + Math.pow(o2[1] - h2[y2][2], 2)), this.functions.push(new u(o2[0], h2[y2][1], o2[1], h2[y2][2])), o2 = [h2[y2][1], h2[y2][2]];
    else if ("l" === h2[y2][0]) this.length += Math.sqrt(Math.pow(h2[y2][1], 2) + Math.pow(h2[y2][2], 2)), this.functions.push(new u(o2[0], h2[y2][1] + o2[0], o2[1], h2[y2][2] + o2[1])), o2 = [h2[y2][1] + o2[0], h2[y2][2] + o2[1]];
    else if ("H" === h2[y2][0]) this.length += Math.abs(o2[0] - h2[y2][1]), this.functions.push(new u(o2[0], h2[y2][1], o2[1], o2[1])), o2[0] = h2[y2][1];
    else if ("h" === h2[y2][0]) this.length += Math.abs(h2[y2][1]), this.functions.push(new u(o2[0], o2[0] + h2[y2][1], o2[1], o2[1])), o2[0] = h2[y2][1] + o2[0];
    else if ("V" === h2[y2][0]) this.length += Math.abs(o2[1] - h2[y2][1]), this.functions.push(new u(o2[0], o2[0], o2[1], h2[y2][1])), o2[1] = h2[y2][1];
    else if ("v" === h2[y2][0]) this.length += Math.abs(h2[y2][1]), this.functions.push(new u(o2[0], o2[0], o2[1], o2[1] + h2[y2][1])), o2[1] = h2[y2][1] + o2[1];
    else if ("z" === h2[y2][0] || "Z" === h2[y2][0]) this.length += Math.sqrt(Math.pow(f2[0] - o2[0], 2) + Math.pow(f2[1] - o2[1], 2)), this.functions.push(new u(o2[0], f2[0], o2[1], f2[1])), o2 = [f2[0], f2[1]];
    else if ("C" === h2[y2][0]) r2 = new C(o2[0], o2[1], h2[y2][1], h2[y2][2], h2[y2][3], h2[y2][4], h2[y2][5], h2[y2][6]), this.length += r2.getTotalLength(), o2 = [h2[y2][5], h2[y2][6]], this.functions.push(r2);
    else if ("c" === h2[y2][0]) (r2 = new C(o2[0], o2[1], o2[0] + h2[y2][1], o2[1] + h2[y2][2], o2[0] + h2[y2][3], o2[1] + h2[y2][4], o2[0] + h2[y2][5], o2[1] + h2[y2][6])).getTotalLength() > 0 ? (this.length += r2.getTotalLength(), this.functions.push(r2), o2 = [h2[y2][5] + o2[0], h2[y2][6] + o2[1]]) : this.functions.push(new u(o2[0], o2[0], o2[1], o2[1]));
    else if ("S" === h2[y2][0]) {
      if (y2 > 0 && ["C", "c", "S", "s"].indexOf(h2[y2 - 1][0]) > -1) {
        if (r2) {
          var p2 = r2.getC();
          r2 = new C(o2[0], o2[1], 2 * o2[0] - p2.x, 2 * o2[1] - p2.y, h2[y2][1], h2[y2][2], h2[y2][3], h2[y2][4]);
        }
      } else r2 = new C(o2[0], o2[1], o2[0], o2[1], h2[y2][1], h2[y2][2], h2[y2][3], h2[y2][4]);
      r2 && (this.length += r2.getTotalLength(), o2 = [h2[y2][3], h2[y2][4]], this.functions.push(r2));
    } else if ("s" === h2[y2][0]) {
      if (y2 > 0 && ["C", "c", "S", "s"].indexOf(h2[y2 - 1][0]) > -1) {
        if (r2) {
          var x2 = r2.getC(), v2 = r2.getD();
          r2 = new C(o2[0], o2[1], o2[0] + v2.x - x2.x, o2[1] + v2.y - x2.y, o2[0] + h2[y2][1], o2[1] + h2[y2][2], o2[0] + h2[y2][3], o2[1] + h2[y2][4]);
        }
      } else r2 = new C(o2[0], o2[1], o2[0], o2[1], o2[0] + h2[y2][1], o2[1] + h2[y2][2], o2[0] + h2[y2][3], o2[1] + h2[y2][4]);
      r2 && (this.length += r2.getTotalLength(), o2 = [h2[y2][3] + o2[0], h2[y2][4] + o2[1]], this.functions.push(r2));
    } else if ("Q" === h2[y2][0]) {
      if (o2[0] == h2[y2][1] && o2[1] == h2[y2][2]) {
        var M2 = new u(h2[y2][1], h2[y2][3], h2[y2][2], h2[y2][4]);
        this.length += M2.getTotalLength(), this.functions.push(M2);
      } else r2 = new C(o2[0], o2[1], h2[y2][1], h2[y2][2], h2[y2][3], h2[y2][4], void 0, void 0), this.length += r2.getTotalLength(), this.functions.push(r2);
      o2 = [h2[y2][3], h2[y2][4]], c2 = [h2[y2][1], h2[y2][2]];
    } else if ("q" === h2[y2][0]) {
      if (0 != h2[y2][1] || 0 != h2[y2][2]) r2 = new C(o2[0], o2[1], o2[0] + h2[y2][1], o2[1] + h2[y2][2], o2[0] + h2[y2][3], o2[1] + h2[y2][4], void 0, void 0), this.length += r2.getTotalLength(), this.functions.push(r2);
      else {
        var w2 = new u(o2[0] + h2[y2][1], o2[0] + h2[y2][3], o2[1] + h2[y2][2], o2[1] + h2[y2][4]);
        this.length += w2.getTotalLength(), this.functions.push(w2);
      }
      c2 = [o2[0] + h2[y2][1], o2[1] + h2[y2][2]], o2 = [h2[y2][3] + o2[0], h2[y2][4] + o2[1]];
    } else if ("T" === h2[y2][0]) {
      if (y2 > 0 && ["Q", "q", "T", "t"].indexOf(h2[y2 - 1][0]) > -1) r2 = new C(o2[0], o2[1], 2 * o2[0] - c2[0], 2 * o2[1] - c2[1], h2[y2][1], h2[y2][2], void 0, void 0), this.functions.push(r2), this.length += r2.getTotalLength();
      else {
        var L2 = new u(o2[0], h2[y2][1], o2[1], h2[y2][2]);
        this.functions.push(L2), this.length += L2.getTotalLength();
      }
      c2 = [2 * o2[0] - c2[0], 2 * o2[1] - c2[1]], o2 = [h2[y2][1], h2[y2][2]];
    } else if ("t" === h2[y2][0]) {
      if (y2 > 0 && ["Q", "q", "T", "t"].indexOf(h2[y2 - 1][0]) > -1) r2 = new C(o2[0], o2[1], 2 * o2[0] - c2[0], 2 * o2[1] - c2[1], o2[0] + h2[y2][1], o2[1] + h2[y2][2], void 0, void 0), this.length += r2.getTotalLength(), this.functions.push(r2);
      else {
        var A2 = new u(o2[0], o2[0] + h2[y2][1], o2[1], o2[1] + h2[y2][2]);
        this.length += A2.getTotalLength(), this.functions.push(A2);
      }
      c2 = [2 * o2[0] - c2[0], 2 * o2[1] - c2[1]], o2 = [h2[y2][1] + o2[0], h2[y2][2] + o2[1]];
    } else if ("A" === h2[y2][0]) {
      var d2 = new l(o2[0], o2[1], h2[y2][1], h2[y2][2], h2[y2][3], 1 === h2[y2][4], 1 === h2[y2][5], h2[y2][6], h2[y2][7]);
      this.length += d2.getTotalLength(), o2 = [h2[y2][6], h2[y2][7]], this.functions.push(d2);
    } else if ("a" === h2[y2][0]) {
      var b2 = new l(o2[0], o2[1], h2[y2][1], h2[y2][2], h2[y2][3], 1 === h2[y2][4], 1 === h2[y2][5], o2[0] + h2[y2][6], o2[1] + h2[y2][7]);
      this.length += b2.getTotalLength(), o2 = [o2[0] + h2[y2][6], o2[1] + h2[y2][7]], this.functions.push(b2);
    }
    this.partial_lengths.push(this.length);
  }
}));
var j = n((function(t3) {
  var n2 = this;
  if (e(this, "inst", void 0), e(this, "getTotalLength", (function() {
    return n2.inst.getTotalLength();
  })), e(this, "getPointAtLength", (function(t4) {
    return n2.inst.getPointAtLength(t4);
  })), e(this, "getTangentAtLength", (function(t4) {
    return n2.inst.getTangentAtLength(t4);
  })), e(this, "getPropertiesAtLength", (function(t4) {
    return n2.inst.getPropertiesAtLength(t4);
  })), e(this, "getParts", (function() {
    return n2.inst.getParts();
  })), this.inst = new O(t3), !(this instanceof j)) return new j(t3);
}));

// node_modules/tween-one/es/plugins/PathMotionPlugin.js
var import_style_utils5 = __toESM(require_main());

// node_modules/tween-one/es/plugins/path-utils.js
var isNumber = function isNumber2(value) {
  return typeof value === "number";
};
var pointsToSegment = function pointsToSegment2(points, curviness) {
  var l2 = points.length - 2;
  var x2 = +points[0];
  var y2 = +points[1];
  var nextX = +points[2];
  var nextY = +points[3];
  var segment2 = [x2, y2, x2, y2];
  var dx2 = nextX - x2;
  var dy2 = nextY - y2;
  var closed = Math.abs(points[l2] - x2) < 1e-3 && Math.abs(points[l2 + 1] - y2) < 1e-3;
  var cornerThreshold = Math.PI / 10;
  if (closed) {
    points.push(nextX, nextY);
    nextX = x2;
    nextY = y2;
    x2 = points[l2 - 2];
    y2 = points[l2 - 1];
    points.unshift(x2, y2);
    l2 += 4;
  }
  curviness = curviness || curviness === 0 ? +curviness : 1;
  var slope;
  for (var i2 = 2; i2 < l2; i2 += 2) {
    var prevX = x2;
    var prevY = y2;
    x2 = nextX;
    y2 = nextY;
    nextX = +points[i2 + 2];
    nextY = +points[i2 + 3];
    var dx1 = dx2;
    var dy1 = dy2;
    dx2 = nextX - x2;
    dy2 = nextY - y2;
    var dx3 = nextX - prevX;
    var dy3 = nextY - prevY;
    var a2 = dx1 * dx1 + dy1 * dy1;
    var b2 = dx2 * dx2 + dy2 * dy2;
    var c2 = dx3 * dx3 + dy3 * dy3;
    var angle = Math.acos((a2 + b2 - c2) / Math.sqrt(4 * a2 * b2));
    var d2 = angle / Math.PI * curviness;
    var d1 = Math.sqrt(a2) * d2;
    d2 *= Math.sqrt(b2);
    if (x2 !== prevX || y2 !== prevY) {
      if (angle > cornerThreshold) {
        slope = Math.atan2(dy3, dx3);
        segment2.push(Math.round(x2 - Math.cos(slope) * d1), Math.round(y2 - Math.sin(slope) * d1), Math.round(x2), Math.round(y2), Math.round(x2 + Math.cos(slope) * d2), Math.round(y2 + Math.sin(slope) * d2));
      } else {
        slope = Math.atan2(dy1, dx1);
        segment2.push(Math.round(x2 - Math.cos(slope) * d1), Math.round(y2 - Math.sin(slope) * d1));
        slope = Math.atan2(dy2, dx2);
        segment2.push(Math.round(x2), Math.round(y2), Math.round(x2 + Math.cos(slope) * d2), Math.round(y2 + Math.sin(slope) * d2));
      }
    }
  }
  segment2.push(Math.round(nextX), Math.round(nextY), Math.round(nextX), Math.round(nextY));
  if (closed) {
    segment2.splice(0, 6);
    segment2.length = segment2.length - 6;
  }
  return segment2;
};
var softPointsToCubic = function softPointsToCubic2(points, curviness) {
  points.unshift(points[0]);
  !curviness && curviness !== 0 && (curviness = 1);
  curviness *= 2 / 3;
  var d2 = points[0];
  var result = [d2];
  var l2 = points.length - 1;
  for (var i2 = 1; i2 < l2; i2++) {
    var a2 = d2;
    var b2 = {};
    var c2 = {};
    d2 = {};
    var p1 = points[i2];
    var p2 = points[i2 + 1];
    for (var p3 in a2) {
      var _ref;
      var v1 = a2[p3];
      var v2 = p1[p3];
      b2[p3] = v1 + ((_ref = v2 - v1) !== null && _ref !== void 0 ? _ref : 0) * curviness;
      d2[p3] = v1 = i2 === l2 - 1 ? p2[p3] : (v2 + p2[p3]) / 2;
      c2[p3] = v1 + (v2 - v1) * curviness;
    }
    result.push(b2, c2, d2);
  }
  return result;
};
var populateSegmentFromArray = function populateSegmentFromArray2(segment2, values, property, mode) {
  var l2 = values.length;
  var si = mode === 2 ? 0 : mode;
  for (var i2 = 0; i2 < l2; i2++) {
    segment2[si] = parseFloat(values[i2][property]);
    mode === 2 && (segment2[si + 1] = 0);
    si += 2;
  }
  return segment2;
};
var relativize = function relativize2(segment2) {
  var x2 = segment2[0], y2 = segment2[1];
  for (var i2 = 2; i2 < segment2.length; i2 += 2) {
    x2 = segment2[i2] += x2;
    y2 = segment2[i2 + 1] += y2;
  }
};
var arrayToRawPath = function arrayToRawPath2(values, vars) {
  var _vars$curviness = vars.curviness, curviness = _vars$curviness === void 0 ? 1 : _vars$curviness, _vars$type = vars.type, type = _vars$type === void 0 ? "thru" : _vars$type, relative = vars.relative, _vars$x = vars.x, x2 = _vars$x === void 0 ? "x" : _vars$x, _vars$y = vars.y, y2 = _vars$y === void 0 ? "y" : _vars$y;
  var toCubic;
  values = values.filter(function(c2) {
    return c2;
  });
  if (type === "soft") {
    toCubic = true;
    values = softPointsToCubic(values, curviness);
  }
  var segment2 = populateSegmentFromArray(populateSegmentFromArray([], values, x2, 0), values, y2, 1);
  relative && relativize(segment2);
  var t3 = [type === "cubic" || toCubic ? segment2 : pointsToSegment(segment2, curviness)];
  return t3;
};
var rawPathToString = function rawPathToString2(rawPath) {
  if (isNumber(rawPath[0])) {
    rawPath = [rawPath];
  }
  var result = "";
  var l2 = rawPath.length;
  for (var s2 = 0; s2 < l2; s2++) {
    var segment2 = rawPath[s2];
    result += "M".concat(Math.round(segment2[0]), ",").concat(Math.round(segment2[1]), " C");
    var sl = segment2.length;
    for (var i2 = 2; i2 < sl; i2++) {
      result += "".concat(Math.round(segment2[i2++] || segment2[sl - 2]), ",").concat(Math.round(segment2[i2++] || segment2[sl - 1]), " ").concat(Math.round(segment2[i2++] || segment2[sl - 2]), ",").concat(Math.round(segment2[i2++] || segment2[sl - 1]), " ").concat(Math.round(segment2[i2++] || segment2[sl - 2]), ",").concat(Math.round(segment2[i2] || segment2[sl - 1]), " \n      ");
    }
    if (segment2.closed) {
      result += "z";
    }
  }
  return result;
};

// node_modules/tween-one/es/plugins/PathMotionPlugin.js
var PathMotion = (function(_PluginMixins) {
  _inherits(PathMotion2, _PluginMixins);
  var _super = _createSuper(PathMotion2);
  function PathMotion2(_value, _key) {
    var _this;
    _classCallCheck(this, PathMotion2);
    _this = _super.call(this, _value, _key);
    _this.value = void 0;
    _this.key = void 0;
    _this.path = void 0;
    _this.computedStyle = void 0;
    _this.pathLength = 0;
    _this.tweenVars = {};
    _this.keys = ["x", "y", "rotate"];
    _this.getAnimStart = function() {
      var _assertThisInitialize = _assertThisInitialized(_this), target = _assertThisInitialize.target, value = _assertThisInitialize.value, tweenVars = _assertThisInitialize.tweenVars;
      var tagName = target.tagName;
      if (tagName) {
        if (!_this.computedStyle) {
          _this.computedStyle = getComputedStyle(target);
        }
        if (tweenVars.style && tweenVars.style.transform) {
          _this.start = tweenVars.style.transform;
        } else {
          var transform = (0, import_style_utils5.getTransform)(_this.computedStyle[(0, import_style_utils5.checkStyleName)("transform")]);
          _this.start = transform;
          tweenVars.style = tweenVars.style || {};
          tweenVars.style.transform = tweenVars.style.transform || transform;
        }
        var _value$center = value.center, center = _value$center === void 0 ? ["50%", "50%"] : _value$center;
        _this.value.center = center.map(function(c2, i2) {
          return startConvertToEndUnit({
            target,
            computedStyle: _this.computedStyle,
            style: !i2 ? "width" : "height",
            value: parseFloat(c2),
            startUnit: c2.toString().replace(/[^a-z|%]/g, ""),
            useCurrentTarget: true
          });
        });
      } else {
        _this.start = {};
        _this.keys.forEach(function(key) {
          if (_this.value[key]) {
            _this.start[key] = 0;
          }
        });
      }
    };
    _this.getPoint = function(r2, offset) {
      var o2 = offset || 0;
      var p2 = _this.pathLength * r2 + o2;
      return _this.path ? _this.path.getPointAtLength(p2) : 0;
    };
    _this.render = function(r2) {
      var _assertThisInitialize2 = _assertThisInitialized(_this), value = _assertThisInitialize2.value, target = _assertThisInitialize2.target, getPoint = _assertThisInitialize2.getPoint, tweenVars = _assertThisInitialize2.tweenVars;
      var tagName = target.tagName;
      var p2 = getPoint(r2);
      var p0 = getPoint(r2, 0.5);
      var p1 = getPoint(r2, -0.5);
      var rotate = value.rotate, x2 = value.x, y2 = value.y, _value$center2 = value.center, center = _value$center2 === void 0 ? [0, 0] : _value$center2;
      var vars = tagName ? tweenVars.style || {} : tweenVars;
      if (tagName) {
        if (rotate) {
          vars.transform.rotate = Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
        }
        if (x2) {
          vars.transform.translateX = p2.x - parseFloat(center[0]);
        }
        if (y2) {
          vars.transform.translateY = p2.y - parseFloat(center[1]);
        }
        vars.transform.text = getTransformValue(vars.transform);
      } else {
        if (rotate) {
          vars.rotate = Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;
        }
        if (x2) {
          vars.x = p2.x - parseFloat(center[0]);
        }
        if (y2) {
          vars.y = p2.y - parseFloat(center[1]);
        }
      }
      return vars;
    };
    _this.value = _value;
    _this.key = _key;
    if (typeof _value === "string") {
      _this.value = {
        path: _value
      };
    }
    _this.keys.forEach(function(key) {
      if (!(key in _this.value)) {
        _this.value[key] = true;
      }
    });
    var _this$value = _this.value, path = _this$value.path, pathVars = _this$value.pathVars;
    if (Array.isArray(path)) {
      path = pathVars.curviness !== 0 ? rawPathToString(arrayToRawPath(path, pathVars || {})) : path.map(function(item, i2) {
        return "".concat(!i2 ? "M" : "L").concat(item.x, " ").concat(item.y);
      }).join("");
    }
    _this.path = new j(path);
    _this.pathLength = _this.path.getTotalLength();
    return _this;
  }
  return _createClass(PathMotion2);
})(PluginMixins);
PathMotion.key = "style";
PathMotion.className = "PathMotion";

// node_modules/tween-one/es/plugins/SvgDrawPlugin.js
var SvgDraw = (function(_PluginMixins) {
  _inherits(SvgDraw2, _PluginMixins);
  var _super = _createSuper(SvgDraw2);
  function SvgDraw2() {
    var _this;
    _classCallCheck(this, SvgDraw2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.computedStyle = void 0;
    _this.length = 0;
    _this.getAnimStart = function() {
      var _assertThisInitialize = _assertThisInitialized(_this), target = _assertThisInitialize.target, startAt = _assertThisInitialize.startAt, key = _assertThisInitialize.key;
      if (!target) {
        return;
      }
      if (!_this.computedStyle) {
        _this.computedStyle = getComputedStyle(target);
      }
      var _assertThisInitialize2 = _assertThisInitialized(_this), computedStyle = _assertThisInitialize2.computedStyle;
      var tagName = target.tagName;
      var getAttribute = function getAttribute2(str) {
        return target.getAttribute(str);
      };
      switch (tagName) {
        case "circle":
          _this.length = Math.PI * 2 * getAttribute("r");
          break;
        case "line":
          _this.length = _this.getLineLength(getAttribute("x1"), getAttribute("y1"), getAttribute("x2"), getAttribute("y2"));
          break;
        case "polyline":
        case "polygon":
          _this.length = _this.getPolyLength(tagName);
          break;
        case "ellipse":
          _this.length = _this.getEllipseLength();
          break;
        case "rect":
          _this.length = getAttribute("width") * 2 + getAttribute("height") * 2;
          break;
        case "path":
          _this.length = target.getTotalLength();
          break;
        default:
          throw new Error("The label is not a label in the SVG.");
      }
      _this.length = parseFloat(_this.length.toFixed(3));
      var strokeDasharray;
      var strokeDashoffset;
      if (startAt[key] || startAt[key] === 0) {
        strokeDasharray = _this.setVars(startAt[key]);
        strokeDashoffset = -strokeDasharray.start;
      } else {
        strokeDasharray = computedStyle.strokeDasharray === "none" || !computedStyle.strokeDasharray ? "100% 100%" : computedStyle.strokeDasharray;
        strokeDashoffset = parseFloat(computedStyle.strokeDashoffset);
        strokeDasharray = strokeDasharray.split(" ")[0].replace(/\,/i, "");
        strokeDasharray = strokeDasharray.indexOf("%") >= 0 ? parseFloat(strokeDasharray) / 100 * _this.length : parseFloat(strokeDasharray);
        strokeDasharray = _this.setVars("".concat(-strokeDashoffset, " ").concat(strokeDasharray - strokeDashoffset));
      }
      _this.start.strokeDasharray = strokeDasharray;
      _this.start.strokeDashoffset = strokeDashoffset;
      _this.value = _this.setVars(_this.value);
      return _this.start;
    };
    _this.render = function(r2) {
      var _assertThisInitialize3 = _assertThisInitialized(_this), value = _assertThisInitialize3.value, start = _assertThisInitialize3.start, length2 = _assertThisInitialize3.length;
      var s2 = start.strokeDasharray, sdf = start.strokeDashoffset;
      var v2 = s2.end - s2.start + (value.end - s2.end - (value.start - s2.start)) * r2;
      return {
        strokeDasharray: "".concat(v2, "px, ").concat(length2, "px"),
        strokeDashoffset: -((value.start + sdf) * r2 - sdf)
      };
    };
    return _this;
  }
  _createClass(SvgDraw2, [{
    key: "setVars",
    value: function setVars(value) {
      var v2 = {
        start: 0
      };
      if (typeof value === "number") {
        v2.end = value;
        return v2;
      }
      var data = value.split(" ");
      if (data.length > 1) {
        v2.start = data[0].indexOf("%") >= 0 ? parseFloat(data[0]) / 100 * this.length : parseFloat(data[0]);
        v2.end = data[1].indexOf("%") >= 0 ? parseFloat(data[1]) / 100 * this.length : parseFloat(data[1]);
      } else if (parseFloat(value)) {
        v2.end = value.indexOf("%") >= 0 ? parseFloat(value) / 100 * this.length : parseFloat(value);
      } else {
        throw new Error("SVGDraw data[".concat(value, "] error."));
      }
      return v2;
    }
  }, {
    key: "getPolyLength",
    value: function getPolyLength(name) {
      var _this2 = this;
      var pointsArray = [];
      (this.target.getAttribute("points") || "").split(/[\s+|,]/).forEach(function(item, i2) {
        var arr = pointsArray[Math.floor(i2 / 2)] || [];
        arr.push(parseFloat(item));
        if (!(i2 % 2)) {
          pointsArray.push(arr);
        }
      });
      if (name === "polygon") {
        pointsArray.push(pointsArray[0]);
      }
      var length2 = 0;
      pointsArray.forEach(function(item, i2) {
        if (i2 < pointsArray.length - 1) {
          var nextPoint = pointsArray[i2 + 1];
          length2 += _this2.getLineLength(item[0], item[1], nextPoint[0], nextPoint[1]);
        }
      });
      return length2;
    }
  }, {
    key: "getEllipseLength",
    value: function getEllipseLength() {
      var rx = parseFloat(this.target.getAttribute("rx"));
      var ry = parseFloat(this.target.getAttribute("ry"));
      if (!rx || !ry) {
        throw new Error("ellipse rx or ry error.");
      }
      return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (3 * ry + rx)));
    }
  }, {
    key: "getLineLength",
    value: function getLineLength(x1, y1, x2, y2) {
      var x3 = parseFloat(x2) - parseFloat(x1);
      var y3 = parseFloat(y2) - parseFloat(y1);
      return Math.sqrt(x3 * x3 + y3 * y3);
    }
  }]);
  return SvgDraw2;
})(PluginMixins);
SvgDraw.key = "style";
SvgDraw.className = "SVGDraw";

// node_modules/d3-polygon/src/area.js
function area_default(polygon) {
  var i2 = -1, n2 = polygon.length, a2, b2 = polygon[n2 - 1], area = 0;
  while (++i2 < n2) {
    a2 = b2;
    b2 = polygon[i2];
    area += a2[1] * b2[0] - a2[0] * b2[1];
  }
  return area / 2;
}

// node_modules/d3-polygon/src/length.js
function length_default(polygon) {
  var i2 = -1, n2 = polygon.length, b2 = polygon[n2 - 1], xa, ya, xb = b2[0], yb = b2[1], perimeter = 0;
  while (++i2 < n2) {
    xa = xb;
    ya = yb;
    b2 = polygon[i2];
    xb = b2[0];
    yb = b2[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }
  return perimeter;
}

// node_modules/flubber/src/svg.js
var import_svgpath = __toESM(require_svgpath2());

// node_modules/flubber/node_modules/svg-path-properties/src/parse.js
var length = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 };
var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;
function parse_default(path) {
  var data = [];
  path.replace(segment, function(_2, command, args) {
    var type = command.toLowerCase();
    args = parseValues(args);
    if (type === "m" && args.length > 2) {
      data.push([command].concat(args.splice(0, 2)));
      type = "l";
      command = command === "m" ? "l" : "L";
    }
    while (args.length >= 0) {
      if (args.length === length[type]) {
        args.unshift(command);
        return data.push(args);
      }
      if (args.length < length[type]) {
        throw new Error("malformed path data");
      }
      data.push([command].concat(args.splice(0, length[type])));
    }
  });
  return data;
}
var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;
function parseValues(args) {
  var numbers = args.match(number);
  return numbers ? numbers.map(Number) : [];
}

// node_modules/flubber/node_modules/svg-path-properties/src/bezier.js
function bezier_default(ax, ay, bx, by, cx, cy, dx, dy) {
  return new Bezier(ax, ay, bx, by, cx, cy, dx, dy);
}
function Bezier(ax, ay, bx, by, cx, cy, dx, dy) {
  this.a = { x: ax, y: ay };
  this.b = { x: bx, y: by };
  this.c = { x: cx, y: cy };
  this.d = { x: dx, y: dy };
  if (dx !== null && dx !== void 0 && dy !== null && dy !== void 0) {
    this.getArcLength = getCubicArcLength;
    this.getPoint = cubicPoint;
    this.getDerivative = cubicDerivative;
  } else {
    this.getArcLength = getQuadraticArcLength;
    this.getPoint = quadraticPoint;
    this.getDerivative = quadraticDerivative;
  }
  this.init();
}
Bezier.prototype = {
  constructor: Bezier,
  init: function() {
    this.length = this.getArcLength(
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y]
    );
  },
  getTotalLength: function() {
    return this.length;
  },
  getPointAtLength: function(length2) {
    var t3 = t2length(
      length2,
      this.length,
      this.getArcLength,
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y]
    );
    return this.getPoint(
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y],
      t3
    );
  },
  getTangentAtLength: function(length2) {
    var t3 = t2length(
      length2,
      this.length,
      this.getArcLength,
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y]
    );
    var derivative = this.getDerivative(
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y],
      t3
    );
    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);
    var tangent;
    if (mdl > 0) {
      tangent = { x: derivative.x / mdl, y: derivative.y / mdl };
    } else {
      tangent = { x: 0, y: 0 };
    }
    return tangent;
  },
  getPropertiesAtLength: function(length2) {
    var t3 = t2length(
      length2,
      this.length,
      this.getArcLength,
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y]
    );
    var derivative = this.getDerivative(
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y],
      t3
    );
    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);
    var tangent;
    if (mdl > 0) {
      tangent = { x: derivative.x / mdl, y: derivative.y / mdl };
    } else {
      tangent = { x: 0, y: 0 };
    }
    var point = this.getPoint(
      [this.a.x, this.b.x, this.c.x, this.d.x],
      [this.a.y, this.b.y, this.c.y, this.d.y],
      t3
    );
    return { x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y };
  }
};
function quadraticDerivative(xs, ys, t3) {
  return {
    x: (1 - t3) * 2 * (xs[1] - xs[0]) + t3 * 2 * (xs[2] - xs[1]),
    y: (1 - t3) * 2 * (ys[1] - ys[0]) + t3 * 2 * (ys[2] - ys[1])
  };
}
function cubicDerivative(xs, ys, t3) {
  var derivative = quadraticPoint(
    [3 * (xs[1] - xs[0]), 3 * (xs[2] - xs[1]), 3 * (xs[3] - xs[2])],
    [3 * (ys[1] - ys[0]), 3 * (ys[2] - ys[1]), 3 * (ys[3] - ys[2])],
    t3
  );
  return derivative;
}
function t2length(length2, total_length, func, xs, ys) {
  var error = 1;
  var t3 = length2 / total_length;
  var step = (length2 - func(xs, ys, t3)) / total_length;
  while (error > 1e-3) {
    var increasedTLength = func(xs, ys, t3 + step);
    var decreasedTLength = func(xs, ys, t3 - step);
    var increasedTError = Math.abs(length2 - increasedTLength) / total_length;
    var decreasedTError = Math.abs(length2 - decreasedTLength) / total_length;
    if (increasedTError < error) {
      error = increasedTError;
      t3 += step;
    } else if (decreasedTError < error) {
      error = decreasedTError;
      t3 -= step;
    } else {
      step /= 2;
    }
  }
  return t3;
}
function quadraticPoint(xs, ys, t3) {
  var x2 = (1 - t3) * (1 - t3) * xs[0] + 2 * (1 - t3) * t3 * xs[1] + t3 * t3 * xs[2];
  var y2 = (1 - t3) * (1 - t3) * ys[0] + 2 * (1 - t3) * t3 * ys[1] + t3 * t3 * ys[2];
  return { x: x2, y: y2 };
}
function cubicPoint(xs, ys, t3) {
  var x2 = (1 - t3) * (1 - t3) * (1 - t3) * xs[0] + 3 * (1 - t3) * (1 - t3) * t3 * xs[1] + 3 * (1 - t3) * t3 * t3 * xs[2] + t3 * t3 * t3 * xs[3];
  var y2 = (1 - t3) * (1 - t3) * (1 - t3) * ys[0] + 3 * (1 - t3) * (1 - t3) * t3 * ys[1] + 3 * (1 - t3) * t3 * t3 * ys[2] + t3 * t3 * t3 * ys[3];
  return { x: x2, y: y2 };
}
function getQuadraticArcLength(xs, ys, t3) {
  if (t3 === void 0) {
    t3 = 1;
  }
  var ax = xs[0] - 2 * xs[1] + xs[2];
  var ay = ys[0] - 2 * ys[1] + ys[2];
  var bx = 2 * xs[1] - 2 * xs[0];
  var by = 2 * ys[1] - 2 * ys[0];
  var A2 = 4 * (ax * ax + ay * ay);
  var B2 = 4 * (ax * bx + ay * by);
  var C2 = bx * bx + by * by;
  if (A2 === 0) {
    return t3 * Math.sqrt(Math.pow(xs[2] - xs[0], 2) + Math.pow(ys[2] - ys[0], 2));
  }
  var b2 = B2 / (2 * A2);
  var c2 = C2 / A2;
  var u2 = t3 + b2;
  var k = c2 - b2 * b2;
  return Math.sqrt(A2) / 2 * (u2 * Math.sqrt(u2 * u2 + k) - b2 * Math.sqrt(b2 * b2 + k) + k * Math.log(Math.abs(
    (u2 + Math.sqrt(u2 * u2 + k)) / (b2 + Math.sqrt(b2 * b2 + k))
  )));
}
var tValues = [
  [],
  [],
  [-0.5773502691896257, 0.5773502691896257],
  [0, -0.7745966692414834, 0.7745966692414834],
  [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526],
  [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664],
  [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152, 0.932469514203152],
  [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585, 0.9491079123427585],
  [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267, 0.7966664774136267, -0.9602898564975363, 0.9602898564975363],
  [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089, 0.3242534234038089, -0.6133714327005904, 0.6133714327005904],
  [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244, 0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717],
  [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118, -0.7301520055740494, 0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057],
  [-0.1252334085114689, 0.1252334085114689, -0.3678314989981802, 0.3678314989981802, -0.5873179542866175, 0.5873179542866175, -0.7699026741943047, 0.7699026741943047, -0.9041172563704749, 0.9041172563704749, -0.9815606342467192, 0.9815606342467192],
  [0, -0.2304583159551348, 0.2304583159551348, -0.44849275103644687, 0.44849275103644687, -0.6423493394403402, 0.6423493394403402, -0.8015780907333099, 0.8015780907333099, -0.9175983992229779, 0.9175983992229779, -0.9841830547185881, 0.9841830547185881],
  [-0.10805494870734367, 0.10805494870734367, -0.31911236892788974, 0.31911236892788974, -0.5152486363581541, 0.5152486363581541, -0.6872929048116855, 0.6872929048116855, -0.827201315069765, 0.827201315069765, -0.9284348836635735, 0.9284348836635735, -0.9862838086968123, 0.9862838086968123],
  [0, -0.20119409399743451, 0.20119409399743451, -0.3941513470775634, 0.3941513470775634, -0.5709721726085388, 0.5709721726085388, -0.7244177313601701, 0.7244177313601701, -0.8482065834104272, 0.8482065834104272, -0.937273392400706, 0.937273392400706, -0.9879925180204854, 0.9879925180204854],
  [-0.09501250983763744, 0.09501250983763744, -0.2816035507792589, 0.2816035507792589, -0.45801677765722737, 0.45801677765722737, -0.6178762444026438, 0.6178762444026438, -0.755404408355003, 0.755404408355003, -0.8656312023878318, 0.8656312023878318, -0.9445750230732326, 0.9445750230732326, -0.9894009349916499, 0.9894009349916499],
  [0, -0.17848418149584785, 0.17848418149584785, -0.3512317634538763, 0.3512317634538763, -0.5126905370864769, 0.5126905370864769, -0.6576711592166907, 0.6576711592166907, -0.7815140038968014, 0.7815140038968014, -0.8802391537269859, 0.8802391537269859, -0.9506755217687678, 0.9506755217687678, -0.9905754753144174, 0.9905754753144174],
  [-0.0847750130417353, 0.0847750130417353, -0.2518862256915055, 0.2518862256915055, -0.41175116146284263, 0.41175116146284263, -0.5597708310739475, 0.5597708310739475, -0.6916870430603532, 0.6916870430603532, -0.8037049589725231, 0.8037049589725231, -0.8926024664975557, 0.8926024664975557, -0.9558239495713977, 0.9558239495713977, -0.9915651684209309, 0.9915651684209309],
  [0, -0.16035864564022537, 0.16035864564022537, -0.31656409996362983, 0.31656409996362983, -0.46457074137596094, 0.46457074137596094, -0.600545304661681, 0.600545304661681, -0.7209661773352294, 0.7209661773352294, -0.8227146565371428, 0.8227146565371428, -0.9031559036148179, 0.9031559036148179, -0.96020815213483, 0.96020815213483, -0.9924068438435844, 0.9924068438435844],
  [-0.07652652113349734, 0.07652652113349734, -0.22778585114164507, 0.22778585114164507, -0.37370608871541955, 0.37370608871541955, -0.5108670019508271, 0.5108670019508271, -0.636053680726515, 0.636053680726515, -0.7463319064601508, 0.7463319064601508, -0.8391169718222188, 0.8391169718222188, -0.912234428251326, 0.912234428251326, -0.9639719272779138, 0.9639719272779138, -0.9931285991850949, 0.9931285991850949],
  [0, -0.1455618541608951, 0.1455618541608951, -0.2880213168024011, 0.2880213168024011, -0.4243421202074388, 0.4243421202074388, -0.5516188358872198, 0.5516188358872198, -0.6671388041974123, 0.6671388041974123, -0.7684399634756779, 0.7684399634756779, -0.8533633645833173, 0.8533633645833173, -0.9200993341504008, 0.9200993341504008, -0.9672268385663063, 0.9672268385663063, -0.9937521706203895, 0.9937521706203895],
  [-0.06973927331972223, 0.06973927331972223, -0.20786042668822127, 0.20786042668822127, -0.34193582089208424, 0.34193582089208424, -0.469355837986757, 0.469355837986757, -0.5876404035069116, 0.5876404035069116, -0.6944872631866827, 0.6944872631866827, -0.7878168059792081, 0.7878168059792081, -0.8658125777203002, 0.8658125777203002, -0.926956772187174, 0.926956772187174, -0.9700604978354287, 0.9700604978354287, -0.9942945854823992, 0.9942945854823992],
  [0, -0.1332568242984661, 0.1332568242984661, -0.26413568097034495, 0.26413568097034495, -0.3903010380302908, 0.3903010380302908, -0.5095014778460075, 0.5095014778460075, -0.6196098757636461, 0.6196098757636461, -0.7186613631319502, 0.7186613631319502, -0.8048884016188399, 0.8048884016188399, -0.8767523582704416, 0.8767523582704416, -0.9329710868260161, 0.9329710868260161, -0.9725424712181152, 0.9725424712181152, -0.9947693349975522, 0.9947693349975522],
  [-0.06405689286260563, 0.06405689286260563, -0.1911188674736163, 0.1911188674736163, -0.3150426796961634, 0.3150426796961634, -0.4337935076260451, 0.4337935076260451, -0.5454214713888396, 0.5454214713888396, -0.6480936519369755, 0.6480936519369755, -0.7401241915785544, 0.7401241915785544, -0.820001985973903, 0.820001985973903, -0.8864155270044011, 0.8864155270044011, -0.9382745520027328, 0.9382745520027328, -0.9747285559713095, 0.9747285559713095, -0.9951872199970213, 0.9951872199970213]
];
var cValues = [
  [],
  [],
  [1, 1],
  [0.8888888888888888, 0.5555555555555556, 0.5555555555555556],
  [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385],
  [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908],
  [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036, 0.17132449237917036],
  [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664, 0.1294849661688697, 0.1294849661688697],
  [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448, 0.22238103445337448, 0.10122853629037626, 0.10122853629037626],
  [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441, 0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544],
  [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204, 0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814],
  [0.2729250867779006, 0.26280454451024665, 0.26280454451024665, 0.23319376459199048, 0.23319376459199048, 0.18629021092773426, 0.18629021092773426, 0.1255803694649046, 0.1255803694649046, 0.05566856711617366, 0.05566856711617366],
  [0.24914704581340277, 0.24914704581340277, 0.2334925365383548, 0.2334925365383548, 0.20316742672306592, 0.20316742672306592, 0.16007832854334622, 0.16007832854334622, 0.10693932599531843, 0.10693932599531843, 0.04717533638651183, 0.04717533638651183],
  [0.2325515532308739, 0.22628318026289723, 0.22628318026289723, 0.2078160475368885, 0.2078160475368885, 0.17814598076194574, 0.17814598076194574, 0.13887351021978725, 0.13887351021978725, 0.09212149983772845, 0.09212149983772845, 0.04048400476531588, 0.04048400476531588],
  [0.2152638534631578, 0.2152638534631578, 0.2051984637212956, 0.2051984637212956, 0.18553839747793782, 0.18553839747793782, 0.15720316715819355, 0.15720316715819355, 0.12151857068790319, 0.12151857068790319, 0.08015808715976021, 0.08015808715976021, 0.03511946033175186, 0.03511946033175186],
  [0.2025782419255613, 0.19843148532711158, 0.19843148532711158, 0.1861610000155622, 0.1861610000155622, 0.16626920581699392, 0.16626920581699392, 0.13957067792615432, 0.13957067792615432, 0.10715922046717194, 0.10715922046717194, 0.07036604748810812, 0.07036604748810812, 0.03075324199611727, 0.03075324199611727],
  [0.1894506104550685, 0.1894506104550685, 0.18260341504492358, 0.18260341504492358, 0.16915651939500254, 0.16915651939500254, 0.14959598881657674, 0.14959598881657674, 0.12462897125553388, 0.12462897125553388, 0.09515851168249279, 0.09515851168249279, 0.062253523938647894, 0.062253523938647894, 0.027152459411754096, 0.027152459411754096],
  [0.17944647035620653, 0.17656270536699264, 0.17656270536699264, 0.16800410215645004, 0.16800410215645004, 0.15404576107681028, 0.15404576107681028, 0.13513636846852548, 0.13513636846852548, 0.11188384719340397, 0.11188384719340397, 0.08503614831717918, 0.08503614831717918, 0.0554595293739872, 0.0554595293739872, 0.02414830286854793, 0.02414830286854793],
  [0.1691423829631436, 0.1691423829631436, 0.16427648374583273, 0.16427648374583273, 0.15468467512626524, 0.15468467512626524, 0.14064291467065065, 0.14064291467065065, 0.12255520671147846, 0.12255520671147846, 0.10094204410628717, 0.10094204410628717, 0.07642573025488905, 0.07642573025488905, 0.0497145488949698, 0.0497145488949698, 0.02161601352648331, 0.02161601352648331],
  [0.1610544498487837, 0.15896884339395434, 0.15896884339395434, 0.15276604206585967, 0.15276604206585967, 0.1426067021736066, 0.1426067021736066, 0.12875396253933621, 0.12875396253933621, 0.11156664554733399, 0.11156664554733399, 0.09149002162245, 0.09149002162245, 0.06904454273764123, 0.06904454273764123, 0.0448142267656996, 0.0448142267656996, 0.019461788229726478, 0.019461788229726478],
  [0.15275338713072584, 0.15275338713072584, 0.14917298647260374, 0.14917298647260374, 0.14209610931838204, 0.14209610931838204, 0.13168863844917664, 0.13168863844917664, 0.11819453196151841, 0.11819453196151841, 0.10193011981724044, 0.10193011981724044, 0.08327674157670475, 0.08327674157670475, 0.06267204833410907, 0.06267204833410907, 0.04060142980038694, 0.04060142980038694, 0.017614007139152118, 0.017614007139152118],
  [0.14608113364969041, 0.14452440398997005, 0.14452440398997005, 0.13988739479107315, 0.13988739479107315, 0.13226893863333747, 0.13226893863333747, 0.12183141605372853, 0.12183141605372853, 0.10879729916714838, 0.10879729916714838, 0.09344442345603386, 0.09344442345603386, 0.0761001136283793, 0.0761001136283793, 0.057134425426857205, 0.057134425426857205, 0.036953789770852494, 0.036953789770852494, 0.016017228257774335, 0.016017228257774335],
  [0.13925187285563198, 0.13925187285563198, 0.13654149834601517, 0.13654149834601517, 0.13117350478706238, 0.13117350478706238, 0.12325237681051242, 0.12325237681051242, 0.11293229608053922, 0.11293229608053922, 0.10041414444288096, 0.10041414444288096, 0.08594160621706773, 0.08594160621706773, 0.06979646842452049, 0.06979646842452049, 0.052293335152683286, 0.052293335152683286, 0.03377490158481415, 0.03377490158481415, 0.0146279952982722, 0.0146279952982722],
  [0.13365457218610619, 0.1324620394046966, 0.1324620394046966, 0.12890572218808216, 0.12890572218808216, 0.12304908430672953, 0.12304908430672953, 0.11499664022241136, 0.11499664022241136, 0.10489209146454141, 0.10489209146454141, 0.09291576606003515, 0.09291576606003515, 0.07928141177671895, 0.07928141177671895, 0.06423242140852585, 0.06423242140852585, 0.04803767173108467, 0.04803767173108467, 0.030988005856979445, 0.030988005856979445, 0.013411859487141771, 0.013411859487141771],
  [0.12793819534675216, 0.12793819534675216, 0.1258374563468283, 0.1258374563468283, 0.12167047292780339, 0.12167047292780339, 0.1155056680537256, 0.1155056680537256, 0.10744427011596563, 0.10744427011596563, 0.09761865210411388, 0.09761865210411388, 0.08619016153195327, 0.08619016153195327, 0.0733464814110803, 0.0733464814110803, 0.05929858491543678, 0.05929858491543678, 0.04427743881741981, 0.04427743881741981, 0.028531388628933663, 0.028531388628933663, 0.0123412297999872, 0.0123412297999872]
];
var binomialCoefficients = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]];
function binomials(n2, k) {
  return binomialCoefficients[n2][k];
}
function getDerivative(derivative, t3, vs) {
  var n2 = vs.length - 1, _vs, value, k;
  if (n2 === 0) {
    return 0;
  }
  if (derivative === 0) {
    value = 0;
    for (k = 0; k <= n2; k++) {
      value += binomials(n2, k) * Math.pow(1 - t3, n2 - k) * Math.pow(t3, k) * vs[k];
    }
    return value;
  } else {
    _vs = new Array(n2);
    for (k = 0; k < n2; k++) {
      _vs[k] = n2 * (vs[k + 1] - vs[k]);
    }
    return getDerivative(derivative - 1, t3, _vs);
  }
}
function B(xs, ys, t3) {
  var xbase = getDerivative(1, t3, xs);
  var ybase = getDerivative(1, t3, ys);
  var combined = xbase * xbase + ybase * ybase;
  return Math.sqrt(combined);
}
function getCubicArcLength(xs, ys, t3) {
  var z, sum, i2, correctedT;
  if (t3 === void 0) {
    t3 = 1;
  }
  var n2 = 20;
  z = t3 / 2;
  sum = 0;
  for (i2 = 0; i2 < n2; i2++) {
    correctedT = z * tValues[n2][i2] + z;
    sum += cValues[n2][i2] * B(xs, ys, correctedT);
  }
  return z * sum;
}

// node_modules/flubber/node_modules/svg-path-properties/src/a2c.js
var TAU = Math.PI * 2;
function unit_vector_angle(ux, uy, vx, vy) {
  var sign = ux * vy - uy * vx < 0 ? -1 : 1;
  var dot = ux * vx + uy * vy;
  if (dot > 1) {
    dot = 1;
  }
  if (dot < -1) {
    dot = -1;
  }
  return sign * Math.acos(dot);
}
function get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {
  var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;
  var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;
  var rx_sq = rx * rx;
  var ry_sq = ry * ry;
  var x1p_sq = x1p * x1p;
  var y1p_sq = y1p * y1p;
  var radicant = rx_sq * ry_sq - rx_sq * y1p_sq - ry_sq * x1p_sq;
  if (radicant < 0) {
    radicant = 0;
  }
  radicant /= rx_sq * y1p_sq + ry_sq * x1p_sq;
  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);
  var cxp = radicant * rx / ry * y1p;
  var cyp = radicant * -ry / rx * x1p;
  var cx = cos_phi * cxp - sin_phi * cyp + (x1 + x2) / 2;
  var cy = sin_phi * cxp + cos_phi * cyp + (y1 + y2) / 2;
  var v1x = (x1p - cxp) / rx;
  var v1y = (y1p - cyp) / ry;
  var v2x = (-x1p - cxp) / rx;
  var v2y = (-y1p - cyp) / ry;
  var theta1 = unit_vector_angle(1, 0, v1x, v1y);
  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);
  if (fs === 0 && delta_theta > 0) {
    delta_theta -= TAU;
  }
  if (fs === 1 && delta_theta < 0) {
    delta_theta += TAU;
  }
  return [cx, cy, theta1, delta_theta];
}
function approximate_unit_arc(theta1, delta_theta) {
  var alpha = 4 / 3 * Math.tan(delta_theta / 4);
  var x1 = Math.cos(theta1);
  var y1 = Math.sin(theta1);
  var x2 = Math.cos(theta1 + delta_theta);
  var y2 = Math.sin(theta1 + delta_theta);
  return [x1, y1, x1 - y1 * alpha, y1 + x1 * alpha, x2 + y2 * alpha, y2 - x2 * alpha, x2, y2];
}
function a2c_default(x1, y1, rx, ry, phi, fa, fs, x2, y2) {
  var sin_phi = Math.sin(phi * TAU / 360);
  var cos_phi = Math.cos(phi * TAU / 360);
  var x1p = cos_phi * (x1 - x2) / 2 + sin_phi * (y1 - y2) / 2;
  var y1p = -sin_phi * (x1 - x2) / 2 + cos_phi * (y1 - y2) / 2;
  if (x1p === 0 && y1p === 0) {
    return [];
  }
  if (rx === 0 || ry === 0) {
    return [];
  }
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  var lambda = x1p * x1p / (rx * rx) + y1p * y1p / (ry * ry);
  if (lambda > 1) {
    rx *= Math.sqrt(lambda);
    ry *= Math.sqrt(lambda);
  }
  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);
  var result = [];
  var theta1 = cc[2];
  var delta_theta = cc[3];
  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);
  delta_theta /= segments;
  for (var i2 = 0; i2 < segments; i2++) {
    result.push(approximate_unit_arc(theta1, delta_theta));
    theta1 += delta_theta;
  }
  return result.map(function(curve) {
    for (var i3 = 0; i3 < curve.length; i3 += 2) {
      var x3 = curve[i3 + 0];
      var y3 = curve[i3 + 1];
      x3 *= rx;
      y3 *= ry;
      var xp = cos_phi * x3 - sin_phi * y3;
      var yp = sin_phi * x3 + cos_phi * y3;
      curve[i3 + 0] = xp + cc[0];
      curve[i3 + 1] = yp + cc[1];
    }
    return curve;
  });
}

// node_modules/flubber/node_modules/svg-path-properties/src/arc.js
function arc_default(x0, y0, rx, ry, xAxisRotate, LargeArcFlag, SweepFlag, x2, y2) {
  return new Arc(x0, y0, rx, ry, xAxisRotate, LargeArcFlag, SweepFlag, x2, y2);
}
function Arc(x0, y0, rx, ry, xAxisRotate, LargeArcFlag, SweepFlag, x2, y2) {
  var length2 = 0;
  var partialLengths = [];
  var curves = [];
  var res = a2c_default(x0, y0, rx, ry, xAxisRotate, LargeArcFlag, SweepFlag, x2, y2);
  res.forEach(function(d2) {
    var curve = new bezier_default(d2[0], d2[1], d2[2], d2[3], d2[4], d2[5], d2[6], d2[7]);
    var curveLength = curve.getTotalLength();
    length2 += curveLength;
    partialLengths.push(curveLength);
    curves.push(curve);
  });
  this.length = length2;
  this.partialLengths = partialLengths;
  this.curves = curves;
}
Arc.prototype = {
  constructor: Arc,
  init: function() {
  },
  getTotalLength: function() {
    return this.length;
  },
  getPointAtLength: function(fractionLength) {
    if (fractionLength < 0) {
      fractionLength = 0;
    } else if (fractionLength > this.length) {
      fractionLength = this.length;
    }
    var i2 = this.partialLengths.length - 1;
    while (this.partialLengths[i2] >= fractionLength && this.partialLengths[i2] > 0) {
      i2--;
    }
    if (i2 < this.partialLengths.length - 1) {
      i2++;
    }
    var lengthOffset = 0;
    for (var j2 = 0; j2 < i2; j2++) {
      lengthOffset += this.partialLengths[j2];
    }
    return this.curves[i2].getPointAtLength(fractionLength - lengthOffset);
  },
  getTangentAtLength: function(fractionLength) {
    if (fractionLength < 0) {
      fractionLength = 0;
    } else if (fractionLength > this.length) {
      fractionLength = this.length;
    }
    var i2 = this.partialLengths.length - 1;
    while (this.partialLengths[i2] >= fractionLength && this.partialLengths[i2] > 0) {
      i2--;
    }
    if (i2 < this.partialLengths.length - 1) {
      i2++;
    }
    var lengthOffset = 0;
    for (var j2 = 0; j2 < i2; j2++) {
      lengthOffset += this.partialLengths[j2];
    }
    return this.curves[i2].getTangentAtLength(fractionLength - lengthOffset);
  },
  getPropertiesAtLength: function(fractionLength) {
    var tangent = this.getTangentAtLength(fractionLength);
    var point = this.getPointAtLength(fractionLength);
    return { x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y };
  }
};

// node_modules/flubber/node_modules/svg-path-properties/src/linear.js
function linear_default(x0, x1, y0, y1) {
  return new LinearPosition(x0, x1, y0, y1);
}
function LinearPosition(x0, x1, y0, y1) {
  this.x0 = x0;
  this.x1 = x1;
  this.y0 = y0;
  this.y1 = y1;
}
LinearPosition.prototype.getTotalLength = function() {
  return Math.sqrt(Math.pow(this.x0 - this.x1, 2) + Math.pow(this.y0 - this.y1, 2));
};
LinearPosition.prototype.getPointAtLength = function(pos) {
  var fraction = pos / Math.sqrt(Math.pow(this.x0 - this.x1, 2) + Math.pow(this.y0 - this.y1, 2));
  var newDeltaX = (this.x1 - this.x0) * fraction;
  var newDeltaY = (this.y1 - this.y0) * fraction;
  return { x: this.x0 + newDeltaX, y: this.y0 + newDeltaY };
};
LinearPosition.prototype.getTangentAtLength = function() {
  var module = Math.sqrt((this.x1 - this.x0) * (this.x1 - this.x0) + (this.y1 - this.y0) * (this.y1 - this.y0));
  return { x: (this.x1 - this.x0) / module, y: (this.y1 - this.y0) / module };
};
LinearPosition.prototype.getPropertiesAtLength = function(pos) {
  var point = this.getPointAtLength(pos);
  var tangent = this.getTangentAtLength();
  return { x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y };
};

// node_modules/flubber/node_modules/svg-path-properties/src/path-properties.js
function path_properties_default(svgString) {
  var length2 = 0;
  var partial_lengths = [];
  var functions = [];
  function svgProperties(string) {
    if (!string) {
      return null;
    }
    var parsed = parse_default(string);
    var cur = [0, 0];
    var prev_point = [0, 0];
    var curve;
    var ringStart;
    for (var i2 = 0; i2 < parsed.length; i2++) {
      if (parsed[i2][0] === "M") {
        cur = [parsed[i2][1], parsed[i2][2]];
        ringStart = [cur[0], cur[1]];
        functions.push(null);
      } else if (parsed[i2][0] === "m") {
        cur = [parsed[i2][1] + cur[0], parsed[i2][2] + cur[1]];
        ringStart = [cur[0], cur[1]];
        functions.push(null);
      } else if (parsed[i2][0] === "L") {
        length2 = length2 + Math.sqrt(Math.pow(cur[0] - parsed[i2][1], 2) + Math.pow(cur[1] - parsed[i2][2], 2));
        functions.push(new linear_default(cur[0], parsed[i2][1], cur[1], parsed[i2][2]));
        cur = [parsed[i2][1], parsed[i2][2]];
      } else if (parsed[i2][0] === "l") {
        length2 = length2 + Math.sqrt(Math.pow(parsed[i2][1], 2) + Math.pow(parsed[i2][2], 2));
        functions.push(new linear_default(cur[0], parsed[i2][1] + cur[0], cur[1], parsed[i2][2] + cur[1]));
        cur = [parsed[i2][1] + cur[0], parsed[i2][2] + cur[1]];
      } else if (parsed[i2][0] === "H") {
        length2 = length2 + Math.abs(cur[0] - parsed[i2][1]);
        functions.push(new linear_default(cur[0], parsed[i2][1], cur[1], cur[1]));
        cur[0] = parsed[i2][1];
      } else if (parsed[i2][0] === "h") {
        length2 = length2 + Math.abs(parsed[i2][1]);
        functions.push(new linear_default(cur[0], cur[0] + parsed[i2][1], cur[1], cur[1]));
        cur[0] = parsed[i2][1] + cur[0];
      } else if (parsed[i2][0] === "V") {
        length2 = length2 + Math.abs(cur[1] - parsed[i2][1]);
        functions.push(new linear_default(cur[0], cur[0], cur[1], parsed[i2][1]));
        cur[1] = parsed[i2][1];
      } else if (parsed[i2][0] === "v") {
        length2 = length2 + Math.abs(parsed[i2][1]);
        functions.push(new linear_default(cur[0], cur[0], cur[1], cur[1] + parsed[i2][1]));
        cur[1] = parsed[i2][1] + cur[1];
      } else if (parsed[i2][0] === "z" || parsed[i2][0] === "Z") {
        length2 = length2 + Math.sqrt(Math.pow(ringStart[0] - cur[0], 2) + Math.pow(ringStart[1] - cur[1], 2));
        functions.push(new linear_default(cur[0], ringStart[0], cur[1], ringStart[1]));
        cur = [ringStart[0], ringStart[1]];
      } else if (parsed[i2][0] === "C") {
        curve = new bezier_default(cur[0], cur[1], parsed[i2][1], parsed[i2][2], parsed[i2][3], parsed[i2][4], parsed[i2][5], parsed[i2][6]);
        length2 = length2 + curve.getTotalLength();
        cur = [parsed[i2][5], parsed[i2][6]];
        functions.push(curve);
      } else if (parsed[i2][0] === "c") {
        curve = new bezier_default(cur[0], cur[1], cur[0] + parsed[i2][1], cur[1] + parsed[i2][2], cur[0] + parsed[i2][3], cur[1] + parsed[i2][4], cur[0] + parsed[i2][5], cur[1] + parsed[i2][6]);
        length2 = length2 + curve.getTotalLength();
        cur = [parsed[i2][5] + cur[0], parsed[i2][6] + cur[1]];
        functions.push(curve);
      } else if (parsed[i2][0] === "S") {
        if (i2 > 0 && ["C", "c", "S", "s"].indexOf(parsed[i2 - 1][0]) > -1) {
          curve = new bezier_default(cur[0], cur[1], 2 * cur[0] - parsed[i2 - 1][parsed[i2 - 1].length - 4], 2 * cur[1] - parsed[i2 - 1][parsed[i2 - 1].length - 3], parsed[i2][1], parsed[i2][2], parsed[i2][3], parsed[i2][4]);
        } else {
          curve = new bezier_default(cur[0], cur[1], cur[0], cur[1], parsed[i2][1], parsed[i2][2], parsed[i2][3], parsed[i2][4]);
        }
        length2 = length2 + curve.getTotalLength();
        cur = [parsed[i2][3], parsed[i2][4]];
        functions.push(curve);
      } else if (parsed[i2][0] === "s") {
        if (i2 > 0 && ["C", "c", "S", "s"].indexOf(parsed[i2 - 1][0]) > -1) {
          curve = new bezier_default(cur[0], cur[1], cur[0] + curve.d.x - curve.c.x, cur[1] + curve.d.y - curve.c.y, cur[0] + parsed[i2][1], cur[1] + parsed[i2][2], cur[0] + parsed[i2][3], cur[1] + parsed[i2][4]);
        } else {
          curve = new bezier_default(cur[0], cur[1], cur[0], cur[1], cur[0] + parsed[i2][1], cur[1] + parsed[i2][2], cur[0] + parsed[i2][3], cur[1] + parsed[i2][4]);
        }
        length2 = length2 + curve.getTotalLength();
        cur = [parsed[i2][3] + cur[0], parsed[i2][4] + cur[1]];
        functions.push(curve);
      } else if (parsed[i2][0] === "Q") {
        if (cur[0] != parsed[i2][1] && cur[1] != parsed[i2][2]) {
          curve = new bezier_default(cur[0], cur[1], parsed[i2][1], parsed[i2][2], parsed[i2][3], parsed[i2][4]);
        } else {
          curve = new linear_default(parsed[i2][1], parsed[i2][3], parsed[i2][2], parsed[i2][4]);
        }
        length2 = length2 + curve.getTotalLength();
        functions.push(curve);
        cur = [parsed[i2][3], parsed[i2][4]];
        prev_point = [parsed[i2][1], parsed[i2][2]];
      } else if (parsed[i2][0] === "q") {
        if (!(parsed[i2][1] == 0 && parsed[i2][2] == 0)) {
          curve = new bezier_default(cur[0], cur[1], cur[0] + parsed[i2][1], cur[1] + parsed[i2][2], cur[0] + parsed[i2][3], cur[1] + parsed[i2][4]);
        } else {
          curve = new linear_default(cur[0] + parsed[i2][1], cur[0] + parsed[i2][3], cur[1] + parsed[i2][2], cur[1] + parsed[i2][4]);
        }
        length2 = length2 + curve.getTotalLength();
        prev_point = [cur[0] + parsed[i2][1], cur[1] + parsed[i2][2]];
        cur = [parsed[i2][3] + cur[0], parsed[i2][4] + cur[1]];
        functions.push(curve);
      } else if (parsed[i2][0] === "T") {
        if (i2 > 0 && ["Q", "q", "T", "t"].indexOf(parsed[i2 - 1][0]) > -1) {
          curve = new bezier_default(cur[0], cur[1], 2 * cur[0] - prev_point[0], 2 * cur[1] - prev_point[1], parsed[i2][1], parsed[i2][2]);
        } else {
          curve = new linear_default(cur[0], parsed[i2][1], cur[1], parsed[i2][2]);
        }
        functions.push(curve);
        length2 = length2 + curve.getTotalLength();
        prev_point = [2 * cur[0] - prev_point[0], 2 * cur[1] - prev_point[1]];
        cur = [parsed[i2][1], parsed[i2][2]];
      } else if (parsed[i2][0] === "t") {
        if (i2 > 0 && ["Q", "q", "T", "t"].indexOf(parsed[i2 - 1][0]) > -1) {
          curve = new bezier_default(cur[0], cur[1], 2 * cur[0] - prev_point[0], 2 * cur[1] - prev_point[1], cur[0] + parsed[i2][1], cur[1] + parsed[i2][2]);
        } else {
          curve = new linear_default(cur[0], cur[0] + parsed[i2][1], cur[1], cur[1] + parsed[i2][2]);
        }
        length2 = length2 + curve.getTotalLength();
        prev_point = [2 * cur[0] - prev_point[0], 2 * cur[1] - prev_point[1]];
        cur = [parsed[i2][1] + cur[0], parsed[i2][2] + cur[0]];
        functions.push(curve);
      } else if (parsed[i2][0] === "A") {
        curve = new arc_default(cur[0], cur[1], parsed[i2][1], parsed[i2][2], parsed[i2][3], parsed[i2][4], parsed[i2][5], parsed[i2][6], parsed[i2][7]);
        length2 = length2 + curve.getTotalLength();
        cur = [parsed[i2][6], parsed[i2][7]];
        functions.push(curve);
      } else if (parsed[i2][0] === "a") {
        curve = new arc_default(cur[0], cur[1], parsed[i2][1], parsed[i2][2], parsed[i2][3], parsed[i2][4], parsed[i2][5], cur[0] + parsed[i2][6], cur[1] + parsed[i2][7]);
        length2 = length2 + curve.getTotalLength();
        cur = [cur[0] + parsed[i2][6], cur[1] + parsed[i2][7]];
        functions.push(curve);
      }
      partial_lengths.push(length2);
    }
    return svgProperties;
  }
  svgProperties.getTotalLength = function() {
    return length2;
  };
  svgProperties.getPointAtLength = function(fractionLength) {
    var fractionPart = getPartAtLength(fractionLength);
    return functions[fractionPart.i].getPointAtLength(fractionPart.fraction);
  };
  svgProperties.getTangentAtLength = function(fractionLength) {
    var fractionPart = getPartAtLength(fractionLength);
    return functions[fractionPart.i].getTangentAtLength(fractionPart.fraction);
  };
  svgProperties.getPropertiesAtLength = function(fractionLength) {
    var fractionPart = getPartAtLength(fractionLength);
    return functions[fractionPart.i].getPropertiesAtLength(fractionPart.fraction);
  };
  var getPartAtLength = function(fractionLength) {
    if (fractionLength < 0) {
      fractionLength = 0;
    } else if (fractionLength > length2) {
      fractionLength = length2;
    }
    var i2 = partial_lengths.length - 1;
    while (partial_lengths[i2] >= fractionLength && partial_lengths[i2] > 0) {
      i2--;
    }
    i2++;
    return { fraction: fractionLength - partial_lengths[i2 - 1], i: i2 };
  };
  return svgProperties(svgString);
}

// node_modules/flubber/src/math.js
function distance(a2, b2) {
  return Math.sqrt((a2[0] - b2[0]) * (a2[0] - b2[0]) + (a2[1] - b2[1]) * (a2[1] - b2[1]));
}
function pointAlong(a2, b2, pct) {
  return [a2[0] + (b2[0] - a2[0]) * pct, a2[1] + (b2[1] - a2[1]) * pct];
}
function samePoint(a2, b2) {
  return distance(a2, b2) < 1e-9;
}
function interpolatePoints(a2, b2, string) {
  let interpolators = a2.map((d2, i2) => interpolatePoint(d2, b2[i2]));
  return function(t3) {
    let values = interpolators.map((fn) => fn(t3));
    return string ? toPathString(values) : values;
  };
}
function interpolatePoint(a2, b2) {
  return function(t3) {
    return a2.map((d2, i2) => d2 + t3 * (b2[i2] - d2));
  };
}
function isFiniteNumber(number2) {
  return typeof number2 === "number" && isFinite(number2);
}

// node_modules/flubber/src/errors.js
var INVALID_INPUT = `All shapes must be supplied as arrays of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).
Example valid ways of supplying a shape would be:
[[0, 0], [10, 0], [10, 10]]
"M0,0 L10,0 L10,10Z"
`;

// node_modules/flubber/src/svg.js
function parse(str) {
  return new import_svgpath.default(str).abs();
}
function split(parsed) {
  return parsed.toString().split("M").map((d2, i2) => {
    d2 = d2.trim();
    return i2 && d2 ? "M" + d2 : d2;
  }).filter((d2) => d2);
}
function toPathString(ring) {
  return "M" + ring.join("L") + "Z";
}
function pathStringToRing(str, maxSegmentLength) {
  let parsed = parse(str);
  return exactRing(parsed) || approximateRing(parsed, maxSegmentLength);
}
function exactRing(parsed) {
  let segments = parsed.segments || [], ring = [];
  if (!segments.length || segments[0][0] !== "M") {
    return false;
  }
  for (let i2 = 0; i2 < segments.length; i2++) {
    let [command, x2, y2] = segments[i2];
    if (command === "M" && i2 || command === "Z") {
      break;
    } else if (command === "M" || command === "L") {
      ring.push([x2, y2]);
    } else if (command === "H") {
      ring.push([x2, ring[ring.length - 1][1]]);
    } else if (command === "V") {
      ring.push([ring[ring.length - 1][0], x2]);
    } else {
      return false;
    }
  }
  return ring.length ? { ring } : false;
}
function approximateRing(parsed, maxSegmentLength) {
  let ringPath = split(parsed)[0], ring = [], props, len, m2, numPoints = 3;
  if (!ringPath) {
    throw new TypeError(INVALID_INPUT);
  }
  m2 = measure(ringPath);
  len = m2.getTotalLength();
  if (maxSegmentLength && isFiniteNumber(maxSegmentLength) && maxSegmentLength > 0) {
    numPoints = Math.max(numPoints, Math.ceil(len / maxSegmentLength));
  }
  for (let i2 = 0; i2 < numPoints; i2++) {
    let p2 = m2.getPointAtLength(len * i2 / numPoints);
    ring.push([p2.x, p2.y]);
  }
  return {
    ring,
    skipBisect: true
  };
}
function measure(d2) {
  if (typeof window !== "undefined" && window && window.document) {
    try {
      let path = window.document.createElementNS("http://www.w3.org/2000/svg", "path");
      path.setAttributeNS(null, "d", d2);
      return path;
    } catch (e3) {
    }
  }
  return path_properties_default(d2);
}

// node_modules/flubber/src/add.js
function addPoints(ring, numPoints) {
  const desiredLength = ring.length + numPoints, step = length_default(ring) / numPoints;
  let i2 = 0, cursor = 0, insertAt = step / 2;
  while (ring.length < desiredLength) {
    let a2 = ring[i2], b2 = ring[(i2 + 1) % ring.length], segment2 = distance(a2, b2);
    if (insertAt <= cursor + segment2) {
      ring.splice(i2 + 1, 0, segment2 ? pointAlong(a2, b2, (insertAt - cursor) / segment2) : a2.slice(0));
      insertAt += step;
      continue;
    }
    cursor += segment2;
    i2++;
  }
}
function bisect(ring, maxSegmentLength = Infinity) {
  for (let i2 = 0; i2 < ring.length; i2++) {
    let a2 = ring[i2], b2 = i2 === ring.length - 1 ? ring[0] : ring[i2 + 1];
    while (distance(a2, b2) > maxSegmentLength) {
      b2 = pointAlong(a2, b2, 0.5);
      ring.splice(i2 + 1, 0, b2);
    }
  }
}

// node_modules/flubber/src/normalize.js
function normalizeRing(ring, maxSegmentLength) {
  let points, area, skipBisect;
  if (typeof ring === "string") {
    let converted = pathStringToRing(ring, maxSegmentLength);
    ring = converted.ring;
    skipBisect = converted.skipBisect;
  } else if (!Array.isArray(ring)) {
    throw new TypeError(INVALID_INPUT);
  }
  points = ring.slice(0);
  if (!validRing(points)) {
    throw new TypeError(INVALID_INPUT);
  }
  if (points.length > 1 && samePoint(points[0], points[points.length - 1])) {
    points.pop();
  }
  area = area_default(points);
  if (area > 0) {
    points.reverse();
  }
  if (!skipBisect && maxSegmentLength && isFiniteNumber(maxSegmentLength) && maxSegmentLength > 0) {
    bisect(points, maxSegmentLength);
  }
  return points;
}
function validRing(ring) {
  return ring.every(function(point) {
    return Array.isArray(point) && point.length >= 2 && isFiniteNumber(point[0]) && isFiniteNumber(point[1]);
  });
}

// node_modules/flubber/src/rotate.js
function rotate_default(ring, vs) {
  let len = ring.length, min = Infinity, bestOffset, sumOfSquares, spliced;
  for (let offset = 0; offset < len; offset++) {
    sumOfSquares = 0;
    vs.forEach(function(p2, i2) {
      let d2 = distance(ring[(offset + i2) % len], p2);
      sumOfSquares += d2 * d2;
    });
    if (sumOfSquares < min) {
      min = sumOfSquares;
      bestOffset = offset;
    }
  }
  if (bestOffset) {
    spliced = ring.splice(0, bestOffset);
    ring.splice(ring.length, 0, ...spliced);
  }
}

// node_modules/flubber/src/interpolate.js
function interpolate_default(fromShape, toShape, { maxSegmentLength = 10, string = true } = {}) {
  let fromRing = normalizeRing(fromShape, maxSegmentLength), toRing = normalizeRing(toShape, maxSegmentLength), interpolator = interpolateRing(fromRing, toRing, string);
  if (!string || typeof fromShape !== "string" && typeof toShape !== "string") {
    return interpolator;
  }
  return (t3) => {
    if (t3 < 1e-4 && typeof fromShape === "string") {
      return fromShape;
    }
    if (1 - t3 < 1e-4 && typeof toShape === "string") {
      return toShape;
    }
    return interpolator(t3);
  };
}
function interpolateRing(fromRing, toRing, string) {
  let diff;
  diff = fromRing.length - toRing.length;
  addPoints(fromRing, diff < 0 ? diff * -1 : 0);
  addPoints(toRing, diff > 0 ? diff : 0);
  rotate_default(fromRing, toRing);
  return interpolatePoints(fromRing, toRing, string);
}

// node_modules/flubber/src/triangulate.js
var import_earcut = __toESM(require_earcut());

// node_modules/d3-array/src/ascending.js
function ascending_default(a2, b2) {
  return a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector_default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a2, x2, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x2) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a2, x2, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x2) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator(f2) {
  return function(d2, x2) {
    return ascending_default(f2(d2), x2);
  };
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);

// node_modules/tween-one/es/plugins/SvgMorphPlugin.js
var SvgMorph = (function(_PluginMixins) {
  _inherits(SvgMorph2, _PluginMixins);
  var _super = _createSuper(SvgMorph2);
  function SvgMorph2(value, _key) {
    var _this;
    _classCallCheck(this, SvgMorph2);
    _this = _super.call(this, value, _key);
    _this.value = void 0;
    _this.key = void 0;
    _this.start = "";
    _this.vars = {};
    _this.attr = void 0;
    _this.maxSegmentLength = void 0;
    _this.toPath = void 0;
    _this.interpolator = void 0;
    _this.pointsArray = void 0;
    _this.getPointVars = function(d2) {
      if (Array.isArray(d2)) {
        return d2;
      }
      return d2.replace(/\,\s+/g, ",").split(/\s+/).map(function(item) {
        return item.split(",").map(function(_item) {
          return parseFloat(_item.replace(/[a-z]/gi, ""));
        });
      });
    };
    _this.polygonPoints = function(start, end) {
      var startArray = _this.getPointVars(start);
      var endArray = _this.getPointVars(end);
      if (startArray.length !== endArray.length) {
        var t3 = startArray.length > endArray.length;
        var long = t3 ? startArray : endArray;
        var short = long === startArray ? endArray : startArray;
        for (var i2 = short.length; i2 < long.length; i2++) {
          short[i2] = short[short.length - 1];
        }
        return t3 ? [long, short] : [short, long];
      }
      return [startArray, endArray];
    };
    _this.getAnimStart = function() {
      var _assertThisInitialize = _assertThisInitialized(_this), target = _assertThisInitialize.target, _assertThisInitialize2 = _assertThisInitialize.startAt, startAt = _assertThisInitialize2 === void 0 ? {} : _assertThisInitialize2, key = _assertThisInitialize.key;
      var tagName = target.tagName;
      if (startAt[key]) {
        if (_typeof(startAt[key]) === "object") {
          _this.attr = startAt[key].attr || _this.attr;
          _this.start = startAt[key].path;
          _this.maxSegmentLength = startAt[key].maxSegmentLength;
        } else if (typeof startAt[key] === "string") {
          _this.start = startAt[key];
        }
      }
      _this.attr = tagName === "polygon" ? "points" : _this.attr;
      _this.attr = tagName === "path" ? "d" : _this.attr;
      _this.start = _this.start || (target.getAttribute ? target.getAttribute(_this.attr) : target[_this.attr]);
      _this.start = _this.start || "M0,0Z";
      if (tagName === "polygon" || _this.attr === "points") {
        _this.pointsArray = _this.polygonPoints(_this.start, _this.toPath);
      } else {
        _this.interpolator = interpolate_default(_this.start, _this.toPath, {
          maxSegmentLength: _this.maxSegmentLength
        });
      }
      return _this.start;
    };
    _this.setArrayRatio = function(ratio, start, item, i2) {
      if (typeof item === "string") {
        return item;
      }
      var startData = start[i2];
      return (item - startData) * ratio + startData;
    };
    _this.render = function(r2) {
      var _assertThisInitialize3 = _assertThisInitialized(_this), target = _assertThisInitialize3.target;
      var tagName = target.tagName;
      var s2;
      if (tagName === "polygon" || _this.attr === "points") {
        var start = _this.pointsArray[0];
        s2 = _this.pointsArray[1].map(function(item, i2) {
          return item.map(function(c2, ci) {
            return _this.setArrayRatio(r2, start[i2], c2, ci);
          }).join(", ");
        }).join(" ");
      } else {
        s2 = _this.interpolator(r2);
      }
      return {
        path: s2,
        attr: _this.attr
      };
    };
    _this.value = value;
    _this.key = _key;
    _this.attr = value.attr || "";
    _this.toPath = value.path;
    _this.maxSegmentLength = typeof value.maxSegmentLength === "undefined" ? 0.5 : value.maxSegmentLength;
    return _this;
  }
  return _createClass(SvgMorph2);
})(PluginMixins);
SvgMorph.key = "setAttribute";
SvgMorph.className = "SVGMorph";

// node_modules/tween-one/es/animate/ticker.js
var import_raf = __toESM(require_raf());
var Ticker = (function() {
  function Ticker2() {
    var _this = this;
    _classCallCheck(this, Ticker2);
    this.lagThreshold = 150;
    this.adjustedLag = 33;
    this.emptyTime = 0;
    this.elapsed = 0;
    this.frameFPS = 1e3 / 240;
    this.startTime = 0;
    this.prevTime = 0;
    this.useTimeout = false;
    this.lastUpdate = this.startTime;
    this.nextTime = this.frameFPS;
    this.req = void 0;
    this.id = -1;
    this.tweenId = 0;
    this.tickFn = [];
    this.state = "sleep";
    this.time = 0;
    this.frame = 0;
    this.removeReq = function(id) {
      return _this.useTimeout ? clearTimeout(id) : (0, import_raf.cancel)(id);
    };
    this.tick = function() {
      var tickFn = _this.tickFn;
      if (!_this.startTime) {
        _this.startTime = getTime() - _this.frameFPS;
        _this.lastUpdate = _this.startTime;
      }
      _this.elapsed = getTime() - _this.lastUpdate;
      if (_this.elapsed > _this.lagThreshold) {
        _this.startTime += _this.elapsed - _this.adjustedLag;
      }
      _this.lastUpdate += _this.elapsed;
      _this.time = _this.lastUpdate - _this.startTime;
      var overlap = _this.time - _this.nextTime;
      if (overlap > 0) {
        _this.frame++;
        _this.nextTime += overlap + (overlap >= _this.frameFPS ? 4 : _this.frameFPS - overlap);
        var f2 = _this.time - _this.prevTime;
        for (var i2 = 0; i2 < tickFn.length; i2++) {
          tickFn[i2].fn({
            time: _this.time,
            elapsed: f2 < _this.frameFPS ? _this.frameFPS : f2
          });
        }
        _this.prevTime = _this.time;
      }
      if (!_this.tickFn.length) {
        if (!_this.emptyTime) {
          _this.emptyTime = _this.time + 500;
        }
        if (_this.time >= _this.emptyTime) {
          _this.emptyTime = 0;
          _this.sleep();
          return;
        }
      }
      if (_this.req) {
        _this.id = _this.req(_this.tick);
      }
    };
    this.wake = function() {
      if (_this.id) {
        _this.sleep();
      }
      _this.req = _this.useTimeout ? function(f2) {
        return setTimeout(f2, _this.frameFPS);
      } : import_raf.default;
      _this.tick();
      _this.state = "wake";
    };
    this.sleep = function() {
      _this.removeReq(_this.id);
      _this.id = -1;
      _this.req = void 0;
      _this.state = "sleep";
    };
    this.add = function(fn) {
      var key = "TweenOneTicker_".concat(_this.tweenId);
      _this.tweenId += 1;
      if (_this.tickFn.findIndex(function(c2) {
        return c2.key === key;
      }) === -1) {
        _this.tickFn.push({
          key,
          fn
        });
      }
      _this.emptyTime = 0;
      if (!_this.req) {
        _this.wake();
      }
      return key;
    };
    this.clear = function(f2) {
      _this.tickFn = _this.tickFn.filter(function(c2) {
        return c2.key !== f2 && c2.fn !== f2;
      });
    };
    this.timeout = function(fn, time) {
      if (!(typeof fn === "function")) {
        return console.warn("not function");
      }
      var startTime = _this.time;
      var timeoutID = _this.add(function() {
        var moment = _this.time - startTime;
        if (moment >= (time || 0)) {
          _this.clear(timeoutID);
          fn();
        }
      });
      return timeoutID;
    };
    this.interval = function(fn, time) {
      if (!(typeof fn === "function")) {
        console.warn("not function");
        return null;
      }
      var starTime = _this.time;
      return _this.add(function() {
        var moment = _this.time - starTime;
        if (moment >= (time || 0)) {
          starTime = _this.time;
          fn();
        }
      });
    };
  }
  _createClass(Ticker2, [{
    key: "fps",
    value: function fps(_fps, useTimeout) {
      this.frameFPS = 1e3 / (_fps || 240);
      this.nextTime = this.time + this.frameFPS;
      this.useTimeout = typeof useTimeout === "undefined" ? this.useTimeout : useTimeout;
      if (this.useTimeout) {
        this.req = function(f2) {
          return setTimeout(f2, _fps);
        };
      }
    }
  }]);
  return Ticker2;
})();
var ticker = new Ticker();
var ticker_default = ticker;

// node_modules/tween-one/es/animate/ease.js
var import_tween_functions = __toESM(require_tween_functions());
import_tween_functions.default.path = function(_path, _param) {
  var param = _param || {};
  if (windowIsUndefined) {
    return "linear";
  }
  var pathNode = parsePath(_path);
  var pathLength = pathNode.getTotalLength();
  var rect = param.rect || 100;
  var lengthPixel = param.lengthPixel || 200;
  var points = [];
  for (var i2 = 0; i2 < lengthPixel - 1; i2++) {
    points.push(pathNode.getPointAtLength(pathLength / (lengthPixel - 1) * i2));
  }
  points.push(pathNode.getPointAtLength(lengthPixel));
  return function path(t3, b2, _c, d2) {
    var p2 = import_tween_functions.default.linear(t3, b2, _c, d2);
    var timePointX = rect * p2;
    var point = points.filter(function(item) {
      return item.x >= timePointX;
    })[0] || pathNode.getPointAtLength(p2 * pathLength);
    return 1 - point.y / rect;
  };
};
var ease_default = import_tween_functions.default;

// node_modules/tween-one/es/TweenOne.js
var import_regenerator = __toESM(require_regenerator2());

// node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(n2, t3, e3, r2, o2, a2, c2) {
  try {
    var i2 = n2[a2](c2), u2 = i2.value;
  } catch (n3) {
    return void e3(n3);
  }
  i2.done ? t3(u2) : Promise.resolve(u2).then(r2, o2);
}
function _asyncToGenerator(n2) {
  return function() {
    var t3 = this, e3 = arguments;
    return new Promise(function(r2, o2) {
      var a2 = n2.apply(t3, e3);
      function _next(n3) {
        asyncGeneratorStep(a2, r2, o2, _next, _throw, "next", n3);
      }
      function _throw(n3) {
        asyncGeneratorStep(a2, r2, o2, _next, _throw, "throw", n3);
      }
      _next(void 0);
    });
  };
}

// node_modules/tween-one/es/animate/timeline.js
var Timeline = (function() {
  function Timeline2() {
    var _this = this;
    _classCallCheck(this, Timeline2);
    this.children = [];
    this.autoSleep = 200;
    this.tickerKey = void 0;
    this.startTime = void 0;
    this.addChild = function(animate) {
      if (_this.children.indexOf(animate) === -1) {
        _this.children.push(animate);
        _this.updateTickerState();
      } else {
        _this.start();
      }
    };
    this.removeChild = function(animate) {
      _this.children = _this.children.filter(function(c2) {
        return c2 !== animate;
      });
      _this.updateTickerState();
    };
    this.kill = function(targets) {
      _this.children = _this.children.filter(function(c2) {
        var currentTargets = c2.root.targets;
        var newTargets = currentTargets.map(function(d2, i2) {
          if (targets.indexOf(d2) === -1) {
            return d2;
          }
          delete d2._tweenOneVars;
          return;
        });
        c2.root.targets = newTargets;
        var v2 = !!newTargets.filter(function(a2) {
          return a2;
        }).length;
        if (!v2) {
          c2.kill();
        }
        return v2;
      });
      _this.updateTickerState();
    };
    this.killAll = function(clearChild) {
      if (clearChild) {
        _this.children.forEach(function(c2) {
          c2 === null || c2 === void 0 ? void 0 : c2.root.targets.forEach(function(d2) {
            if (!d2) {
              return;
            }
            delete d2._tweenOneVars;
          });
        });
        _this.children = [];
      }
      ticker_default.clear(_this.tickerKey);
      _this.tickerKey = void 0;
    };
    this.getTotalTime = function() {
      var totalTime = 0;
      for (var i2 = 0; i2 < _this.children.length; i2++) {
        var item = _this.children[i2];
        var itemTime = item.pausedState ? 0 : item.startTime + item.totalTime;
        if (!totalTime) {
          totalTime = itemTime;
        } else {
          totalTime = Math.max(itemTime, totalTime);
        }
      }
      return totalTime;
    };
    this.updateTickerState = function() {
      if (!_this.children.length || !_this.children.some(function(c2) {
        return !(c2 === null || c2 === void 0 ? void 0 : c2.pausedState) && (!(c2 === null || c2 === void 0 ? void 0 : c2.reverseState) && c2.progressTime < c2.totalTime || (c2 === null || c2 === void 0 ? void 0 : c2.reverseState) && c2.progressTime > 0);
      })) {
        _this.killAll(!_this.children.length);
      } else {
        _this.start();
      }
    };
    this.start = function() {
      if (!_this.tickerKey) {
        _this.tickerKey = ticker_default.add(_this.render);
      }
    };
    this.render = function(_ref) {
      var time = _ref.time, _ref$elapsed = _ref.elapsed, elapsed = _ref$elapsed === void 0 ? 0 : _ref$elapsed;
      var children = _this.children;
      var length2 = children.length;
      for (var i2 = 0; i2 < length2; i2++) {
        var animate = children[i2];
        if (!animate) {
          continue;
        }
        var startTime = animate.startTime - elapsed;
        var totalTime = animate.startTime + animate.totalTime + elapsed;
        if (time > startTime && time < totalTime && !animate.pausedState) {
          animate.render({
            time,
            elapsed
          });
        }
      }
    };
  }
  _createClass(Timeline2, [{
    key: "totalTime",
    get: function get() {
      return this.getTotalTime();
    }
  }]);
  return Timeline2;
})();
var timeline_default = Timeline;

// node_modules/tween-one/es/animate/animateElement.js
var Element2 = (function() {
  function Element3(_item) {
    var _this = this;
    _classCallCheck(this, Element3);
    this.item = void 0;
    this.vars = {};
    this.start = void 0;
    this.parent = void 0;
    this.root = void 0;
    this.startAt = {};
    this.mode = void 0;
    this.appearTo = 0;
    this.props = {};
    this.index = void 0;
    this.register = void 0;
    this.reverseStart = void 0;
    this.repeatNum = 0;
    this.prevMoment = void 0;
    this.easing = void 0;
    this.changeValueToVars = function(k2, value2, skipPlugin) {
      var isArray = (Array.isArray(value2) || k2.match(/color|fill|stroke|.*shadow/i) && typeof value2 === "string" || typeof value2 === "string" && value2.split(/[\s|,]/).length > 1) && !(k2 in plugins_default);
      if (k2 in plugins_default || isArray) {
        if (skipPlugin) {
          return value2;
        }
        return {
          value: value2,
          plugins: [],
          array: isArray
        };
      }
      var vars = parseFloat(value2.toString().replace(/=/g, ""));
      var unit = value2.toString().replace(/[^a-z|%]/g, "");
      var count = value2.toString().charAt(1) === "=" ? value2.toString().replace(/[^\+\=|\-\=]/gi, "") : "";
      return {
        vars,
        unit,
        count
      };
    };
    this.setEase = function(e3) {
      if (typeof e3 === "function") {
        _this.easing = e3;
        return;
      } else if (e3.match(/,/g)) {
        _this.easing = ease_default.path(e3);
        return;
      }
      _this.easing = ease_default[e3];
    };
    this.getTotalTime = function() {
      var _this$props = _this.props, _this$props$duration = _this$props.duration, duration = _this$props$duration === void 0 ? 450 : _this$props$duration, _this$props$delay = _this$props.delay, delay = _this$props$delay === void 0 ? 0 : _this$props$delay, _this$props$repeat = _this$props.repeat, repeat = _this$props$repeat === void 0 ? 0 : _this$props$repeat, _this$props$repeatDel = _this$props.repeatDelay, repeatDelay = _this$props$repeatDel === void 0 ? 0 : _this$props$repeatDel;
      return repeat === -1 ? Number.MAX_VALUE : delay + duration * (repeat + 1) + repeatDelay * repeat;
    };
    this.getEaseToRatio = function(r2, isFrom) {
      var _this$props$ease = _this.props.ease, ease = _this$props$ease === void 0 ? "" : _this$props$ease;
      return (r2 === 0 || r2 === 1) && !(typeof ease === "function" || ease.match(/,/g)) ? r2 : _this.easing(isFrom ? 1 - r2 : r2, isFrom ? 1 : 0, isFrom ? 0 : 1, 1);
    };
    this.setRatioToVars = function(ratio) {
      var vars = _this.vars, root = _this.root;
      for (var i2 = 0; i2 < root.targets.length; i2++) {
        if (!root.targets[i2]) {
          continue;
        }
        for (var key in vars) {
          var item = vars[key];
          if (item.plugins) {
            if (key === "PathMotion") {
              root.vars[i2].style = item.plugins[i2].render(ratio);
            } else {
              root.vars[i2][key] = item.plugins[i2].render(ratio);
            }
            continue;
          }
          var endVars = item.vars, count = item.count, unit = item.unit;
          var startVars = _this.start[i2][key];
          root.vars[i2][key] = getValue(startVars, endVars, ratio, count, unit);
        }
      }
    };
    this.onRegisterAnimate = function() {
      _this.register = true;
      var root = _this.root, parent2 = _this.parent, startAt = _this.startAt;
      var start = [];
      for (var i2 = 0; i2 < root.targets.length; i2++) {
        var target = root.targets[i2];
        var vars = root.vars[i2];
        var s2 = {};
        for (var key in _this.vars) {
          var cItem = _this.vars[key];
          if (cItem.plugins) {
            var plugin = new plugins_default[cItem.array ? "ArrayPlugin" : key](cItem.value, key);
            plugin.target = target;
            plugin.root = root;
            plugin.parent = parent2;
            plugin.targetIndex = i2;
            plugin.tweenVars = vars;
            plugin.index = _this.index;
            plugin.startAt = startAt;
            s2[key] = plugin.getAnimStart();
            cItem.plugins.push(plugin);
          } else {
            var _ref, _startAt$key;
            var targetValue = (_ref = root.attr ? target.getAttribute(key) : vars[key] || target[key]) !== null && _ref !== void 0 ? _ref : getDefaultStart(key);
            var startData = (_startAt$key = startAt[key]) !== null && _startAt$key !== void 0 ? _startAt$key : targetValue;
            var isStartAt = _typeof(startData) === "object" && "vars" in startData && "count" in startData;
            var unit = isStartAt ? startData.unit : "".concat(startData).replace(/[^a-z|%]/g, "");
            var varsUnit = cItem.unit;
            if (unit && unit !== varsUnit) {
              console.warn("Different units, start unit ".concat(unit, ", to value unit ").concat(varsUnit, ", remove start unit."));
            }
            s2[key] = isStartAt ? getStartAtValue(targetValue, startData) : parseFloat(startData);
          }
        }
        start.push(s2);
      }
      _this.start = start;
    };
    this.overflowRatio = function(ratio) {
      var r2 = ratio < 0 ? 0 : ratio;
      var duration = _this.props.duration;
      r2 = r2 > duration ? duration : r2;
      return r2;
    };
    this.render = function(_ref2) {
      var moment = _ref2.moment, _ref2$fps = _ref2.fps, fps = _ref2$fps === void 0 ? 0 : _ref2$fps, silence = _ref2.silence, render = _ref2.render;
      var parent2 = _this.parent, root = _this.root, props = _this.props;
      var targets = flatArray(root.targets);
      var onChange = parent2.onChange;
      var _props$repeat = props.repeat, repeat = _props$repeat === void 0 ? 0 : _props$repeat;
      var _props$type = props.type, type = _props$type === void 0 ? "to" : _props$type, _props$duration = props.duration, duration = _props$duration === void 0 ? 450 : _props$duration, _props$delay = props.delay, delay = _props$delay === void 0 ? 0 : _props$delay, _props$repeatDelay = props.repeatDelay, repeatDelay = _props$repeatDelay === void 0 ? 0 : _props$repeatDelay, yoyo = props.yoyo;
      repeat = repeat === -1 ? Number.MAX_VALUE : repeat;
      var ratio = moment - delay;
      var repeatNum = Math.floor(ratio / (duration + repeatDelay)) || 0;
      repeatNum = repeatNum > repeat ? repeat : repeatNum;
      repeatNum = repeatNum < 0 ? 0 : repeatNum;
      ratio = ratio - (duration + repeatDelay) * repeatNum;
      var yoyoReverse = !!(yoyo && repeatNum % 2);
      var isFrom = type === "from";
      var backwards = yoyoReverse && isFrom ? false : yoyoReverse || isFrom;
      ratio = backwards ? duration - ratio : ratio;
      var fromDelay = isFrom ? 0 : delay;
      var r2 = backwards ? 1 : 0;
      if (!_this.register && moment >= fromDelay) {
        _this.onRegisterAnimate();
        if (backwards && ratio <= 0 || !backwards && ratio >= duration && duration) {
          _this.prevMoment = moment;
          r2 = backwards ? 0 : 1;
        }
        _this.setRatioToVars(r2);
        onChange({
          index: _this.index,
          vars: root.vars
        });
      }
      if (_this.register && moment > delay - fps && moment < _this.totalTime + fps) {
        ratio = _this.overflowRatio(ratio);
        r2 = backwards ? 1 : 0;
        if (moment >= _this.totalTime && _this.mode !== "onComplete" && _this.prevMoment !== void 0 || _this.prevMoment === void 0 && moment >= _this.totalTime && duration) {
          r2 = backwards ? 0 : 1;
          _this.mode = "onComplete";
          if (_this.props.onComplete) {
            _this.props.onComplete({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r2,
              targets,
              vars: flatArray(root.vars)
            });
          }
        } else if (_this.prevMoment === void 0 || moment <= 0 && moment > -fps && _this.mode !== "onStart" && _this.prevMoment > moment) {
          _this.mode = "onStart";
          if (_this.props.onStart) {
            _this.props.onStart({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r2,
              targets,
              vars: flatArray(root.vars)
            });
          }
        } else {
          r2 = ratio && duration ? ratio / duration : 0;
          _this.mode = "onUpdate";
          if (_this.props.onUpdate) {
            _this.props.onUpdate({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r2,
              targets,
              vars: flatArray(root.vars)
            });
          }
        }
        if (repeat && repeatNum !== _this.repeatNum && moment && _this.mode === "onUpdate") {
          _this.mode = "onRepeat";
          if (_this.props.onRepeat) {
            _this.props.onRepeat({
              mode: _this.mode,
              index: _this.index,
              moment: ratio,
              ratio: r2,
              targets,
              vars: flatArray(_this.root.vars)
            });
          }
        }
        _this.setRatioToVars(_this.getEaseToRatio(r2, isFrom));
        if (repeat) {
          _this.repeatNum = repeatNum;
        }
        var cb = {
          mode: _this.mode,
          moment: ratio,
          repeat: repeatNum,
          ratio: r2,
          targets: root.targets,
          vars: root.vars,
          index: _this.index
        };
        if (silence) {
          cb.silence = silence;
        }
        if (render) {
          cb.render = render;
        }
        onChange(cb);
        _this.prevMoment = moment;
      }
    };
    this.item = _item;
    this.startAt = _objectSpread2({}, _item.startAt);
    Object.keys(this.startAt).forEach(function(c2) {
      _this.startAt[c2] = _this.changeValueToVars(c2, _this.startAt[c2], true);
    });
    var _props = {};
    for (var k in _item) {
      var value = _item[k];
      if (!(k in initAnimProps)) {
        this.vars[k] = this.changeValueToVars(k, value);
      } else {
        _props[k] = value;
      }
    }
    this.props = _objectSpread2(_objectSpread2({}, initAnimProps), _props);
    this.setEase(this.props.ease);
  }
  _createClass(Element3, [{
    key: "totalTime",
    get: (
      // parentBackwards?: boolean;
      function get() {
        return this.getTotalTime();
      }
    )
  }]);
  return Element3;
})();

// node_modules/tween-one/es/animate/animate.js
var AnimateGroup = _createClass(function AnimateGroup2(_props) {
  var _this = this;
  _classCallCheck(this, AnimateGroup2);
  this.props = void 0;
  this.id = void 0;
  this.children = [];
  this.totalTime = 0;
  this.totalTimeRegion = 0;
  this.childTotalTime = 0;
  this.childRegionTotalTime = 0;
  this.prevMoment = void 0;
  this.progressTime = 0;
  this.progressMoment = -1;
  this.startMoment = 0;
  this.startTime = 0;
  this.repeatNum = 0;
  this.mode = "onTimelineStart";
  this.pausedState = void 0;
  this.reverseState = void 0;
  this.root = void 0;
  this.parent = void 0;
  this.regionStartTime = 0;
  this.regionEndTime = void 0;
  this.onChangeChild = void 0;
  this.onChangeTimeline = void 0;
  this.init = function() {
    var _this$props = _this.props, reverse = _this$props.reverse, animation = _this$props.animation, moment = _this$props.moment;
    var animateArray = dataToArray(animation);
    for (var i2 = 0; i2 < animateArray.length; i2++) {
      var item = animateArray[i2];
      if (item.type === "set") {
        item.duration = 0;
      }
      var animate = new Element2(item);
      animate.index = i2;
      var pos = i2 ? getAnimatePos(item, animateArray[i2 - 1]) : 0;
      item.appearTo = pos;
      animate.appearTo = pos;
      _this.addChild(animate);
    }
    _this.render({
      time: (reverse ? _this.totalTime : 0) + _this.startTime,
      elapsed: 16.67
    });
    if (!_this.totalTime) {
      _this.render({
        time: (reverse ? _this.totalTime : 0) + _this.startTime,
        elapsed: 16.67
      });
    }
    if (moment) {
      _this.goto(moment);
    } else {
      _this.play();
    }
  };
  this.addChild = function(animate) {
    animate.parent = _this;
    animate.root = _this.root;
    if (_this.children.indexOf(animate) === -1) {
      _this.children.push(animate);
      _this.setTotalTime();
    }
  };
  this.setTotalTime = function() {
    _this.childTotalTime = 0;
    _this.childRegionTotalTime = 0;
    for (var i2 = 0; i2 < _this.children.length; i2++) {
      var item = _this.children[i2];
      if (item.appearTo !== _this.childTotalTime) {
        var itemTime = item.appearTo + item.totalTime;
        if (itemTime > _this.childTotalTime) {
          _this.childTotalTime = itemTime;
          _this.childRegionTotalTime = itemTime;
        }
      } else {
        _this.childTotalTime += item.totalTime;
        _this.childRegionTotalTime += item.totalTime;
      }
    }
    if (_this.regionStartTime) {
      _this.childRegionTotalTime -= _this.regionStartTime;
    }
    if (_this.regionEndTime) {
      _this.childRegionTotalTime = _this.regionEndTime - _this.regionStartTime;
    }
    var _this$props2 = _this.props, _this$props2$repeat = _this$props2.repeat, repeat = _this$props2$repeat === void 0 ? 0 : _this$props2$repeat, _this$props2$repeatDe = _this$props2.repeatDelay, repeatDelay = _this$props2$repeatDe === void 0 ? 0 : _this$props2$repeatDe, delay = _this$props2.delay;
    _this.totalTime = repeat === -1 ? Number.MAX_VALUE : delay + _this.childTotalTime * (repeat + 1) + repeatDelay * repeat;
    _this.totalTimeRegion = repeat === -1 ? Number.MAX_VALUE : delay + _this.childRegionTotalTime * (repeat + 1) + repeatDelay * repeat;
  };
  this.setStartTimeOrMoment = function(start) {
    _this.startTime = ticker_default.time;
    _this.startMoment = start || _this.progressMoment;
  };
  this.reRenderCall = function() {
    _this.render({
      time: _this.startTime,
      elapsed: ticker_default.elapsed || ticker_default.frameFPS
    });
  };
  this.play = function(v2) {
    if (!v2) {
      var _this$parent;
      (_this$parent = _this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.addChild(_this);
    } else {
      var _this$parent2;
      (_this$parent2 = _this.parent) === null || _this$parent2 === void 0 ? void 0 : _this$parent2.updateTickerState();
    }
  };
  this.paused = function() {
    var v2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    _this.pausedState = v2;
    _this.setStartTimeOrMoment();
    _this.play(v2);
  };
  this.reverse = function(v2) {
    _this.reverseState = v2;
    _this.setStartTimeOrMoment();
    _this.play(_this.pausedState);
  };
  this.goto = function($moment, paused) {
    var moment = $moment - _this.regionStartTime;
    _this.startTime = ticker_default.time;
    _this.startMoment = moment > _this.totalTime ? _this.totalTime : moment;
    _this.progressMoment = _this.startMoment;
    _this.progressTime = moment;
    _this.play(_this.pausedState);
    _this.reRenderCall();
    if (!!paused !== _this.pausedState) {
      _this.paused(paused);
    }
  };
  this.kill = function(index) {
    if (typeof index === "number") {
      _this.paused();
      delete _this.children[index];
      _this.setTotalTime();
      _this.paused(false);
    } else {
      var _this$parent3;
      _this.children = [];
      (_this$parent3 = _this.parent) === null || _this$parent3 === void 0 ? void 0 : _this$parent3.removeChild(_this);
    }
  };
  this.onChange = function(e3) {
    e3.timelineMoment = _this.progressMoment;
    _this.onChangeChild(e3);
  };
  this.render = function(_ref) {
    var time = _ref.time, elapsed = _ref.elapsed;
    var fps = elapsed || ticker_default.frameFPS || 0;
    var totalTime = _this.totalTime, totalTimeRegion = _this.totalTimeRegion, childTotalTime = _this.childTotalTime, childRegionTotalTime = _this.childRegionTotalTime, children = _this.children, props = _this.props, startTime = _this.startTime, reverseState = _this.reverseState, pausedState = _this.pausedState, startMoment = _this.startMoment, onChangeTimeline = _this.onChangeTimeline, parent2 = _this.parent, root = _this.root, prevMoment = _this.prevMoment, regionStartTime = _this.regionStartTime;
    var _props$repeatDelay = props.repeatDelay, repeatDelay = _props$repeatDelay === void 0 ? 0 : _props$repeatDelay, yoyo = props.yoyo, delay = props.delay;
    var _props$repeat = props.repeat, repeat = _props$repeat === void 0 ? 0 : _props$repeat;
    repeat = repeat === -1 ? Number.MAX_VALUE : repeat;
    var t3 = time - startTime - delay;
    var m2 = reverseState ? startMoment - t3 : t3 + startMoment;
    if (m2 < -fps) {
      return;
    }
    var moment = m2 < 0 ? 0 : m2;
    moment = moment > totalTime ? totalTime : moment;
    moment = startMoment < regionStartTime ? m2 : moment;
    moment = startMoment > totalTimeRegion ? startMoment : moment;
    var repeatNum = repeat ? Math.floor(moment / (childRegionTotalTime + repeatDelay)) : 0;
    repeatNum = repeat && repeatNum > repeat ? repeat : repeatNum;
    var tweenMoment = moment - (childRegionTotalTime + repeatDelay) * repeatNum;
    var yoyoReverse = !!(yoyo && repeatNum % 2);
    tweenMoment = yoyoReverse ? childRegionTotalTime - tweenMoment : tweenMoment;
    tweenMoment = regionStartTime + tweenMoment;
    var reverse = reverseState ? !yoyoReverse : yoyoReverse;
    _this.mode = "onTimelineUpdate";
    if (typeof prevMoment !== "number") {
      _this.mode = "onTimelineStart";
    }
    if (moment >= totalTimeRegion - delay && typeof prevMoment === "number") {
      _this.mode = "onTimelineComplete";
    }
    if (repeatNum !== _this.repeatNum) {
      _this.mode = "onTimelineRepeat";
      if (moment > childTotalTime * repeatNum && moment < childTotalTime * repeatNum + fps) {
        for (var i2 = reverse ? 0 : children.length - 1; reverse ? i2 <= children.length - 1 : i2 >= 0; reverse ? i2++ : i2--) {
          var item = children[i2];
          if (!reverse) {
            item.prevMoment = void 0;
          }
          item.render({
            moment: reverse ? item.totalTime : 0,
            fps
          });
        }
        onChangeTimeline({
          moment,
          totalTime,
          repeat: repeatNum,
          mode: _this.mode,
          targets: root.targets
        });
        _this.mode = "onTimelineUpdate";
      }
    }
    if (repeat) {
      _this.repeatNum = repeatNum;
    }
    _this.progressMoment = moment;
    _this.prevMoment = moment;
    _this.progressTime = t3;
    for (var _i = 0; _i < children.length; _i++) {
      var _item = children[_i];
      var duration = _item.totalTime + _item.appearTo;
      var tweenTime = tweenMoment >= _item.appearTo - fps && tweenMoment < duration + fps;
      if (_item.mode !== "onComplete" && tweenMoment > duration + fps && !yoyoReverse && _item.totalTime || typeof _item.mode === "undefined" && !_item.totalTime) {
        _item.render({
          moment: _item.totalTime,
          fps
        });
        _item.prevMoment = void 0;
      }
      if (tweenMoment < _item.appearTo - fps && _item.mode && _item.mode !== "onStart") {
        _item.render({
          moment: _item.appearTo,
          fps,
          silence: true
        });
        _item.prevMoment = void 0;
        _item.mode = void 0;
      }
      if (tweenTime) {
        var _t = tweenMoment < 0 ? 0 : tweenMoment;
        if (tweenMoment > duration && _item.mode === "onComplete" && !yoyoReverse) {
          return;
        }
        _t = tweenMoment > duration ? duration : tweenMoment;
        _item.render({
          moment: _t - _item.appearTo,
          fps
        });
        if (!duration) {
          _item.render({
            moment: _item.totalTime,
            fps,
            render: true
          });
          _item.prevMoment = void 0;
        }
      }
    }
    onChangeTimeline({
      moment,
      totalTime,
      repeat: repeatNum,
      mode: _this.mode,
      targets: root.targets
    });
    if (pausedState || totalTimeRegion && m2 + delay >= totalTimeRegion && !reverseState || reverseState && m2 + delay <= 0 || !children.length) {
      parent2 === null || parent2 === void 0 ? void 0 : parent2.removeChild(_this);
    }
  };
  this.props = _props;
  var _this$props3 = this.props, _paused = _this$props3.paused, _reverse = _this$props3.reverse;
  this.reverseState = _reverse;
  this.pausedState = _paused;
  this.regionStartTime = _props.regionStartTime || 0;
  this.regionEndTime = _props.regionEndTime;
});

// node_modules/tween-one/es/TweenOne.js
plugins_default.push(ArrayPlugin_default);
plugins_default.push(GradientsPlugin);
plugins_default.push(StylePlugin_default);
var tweenId = 0;
var globalTimeline = new timeline_default();
var Tween = (function() {
  function Tween2(targets, _props) {
    var _this = this;
    _classCallCheck(this, Tween2);
    this.targets = void 0;
    this.props = void 0;
    this.timeline = void 0;
    this.animate = void 0;
    this.$reverse = false;
    this.vars = [];
    this.initTime = void 0;
    this.attr = void 0;
    this.init = (function() {
      var _ref = _asyncToGenerator(import_regenerator.default.mark(function _callee(vars) {
        var props;
        return import_regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                props = getInitProps(vars);
                if (_this.targets[0].tagName && !_this.attr) {
                  props.animation = dataToArray(props.animation).map(function(item) {
                    var c2 = {
                      style: {}
                    };
                    for (var k in item) {
                      if (k in plugins_default || k in initAnimProps) {
                        c2[k] = item[k];
                      } else {
                        c2.style[k] = item[k];
                      }
                    }
                    if (!Object.keys(c2.style).length) {
                      delete c2.style;
                    }
                    if (item.duration) {
                      item.duration = Math.round(item.duration);
                    }
                    if (item.delay) {
                      item.delay = Math.round(item.delay);
                    }
                    if (item.appearTo) {
                      item.appearTo = Math.round(item.appearTo);
                    }
                    if (item.repeatDelay) {
                      item.repeatDelay = Math.round(item.repeatDelay);
                    }
                    return c2;
                  });
                }
                _this.animate = new AnimateGroup(props);
                _this.animate.id = "TweenOne_".concat(tweenId);
                tweenId++;
                _this.animate.startTime = _this.initTime;
                _this.animate.onChangeChild = _this.onChange;
                _this.animate.onChangeTimeline = _this.onChangeTimeline;
                _this.animate.root = _this;
                _this.animate.parent = _this.timeline;
                _this.animate.init();
              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function(_x) {
        return _ref.apply(this, arguments);
      };
    })();
    this.renderToDom = function() {
      for (var i2 = 0; i2 < _this.vars.length; i2++) {
        var item = _this.vars[i2];
        for (var key in item) {
          var value = item[key];
          var target = _this.targets[i2];
          if (!target) {
            continue;
          }
          if (_this.props.attr && target.tagName && target.setAttribute) {
            if (key === "style") {
              for (var ck in value) {
                target.style[ck] = value[key];
              }
            }
            target.setAttribute(key, value);
          } else if (key in plugins_default) {
            var $key = plugins_default[key].key;
            if (typeof target[$key] === "function") {
              target[$key](value.attr, value.path);
            } else if (_typeof(value) === "object" && _typeof(target[$key]) === "object" && $key) {
              for (var _ck in value) {
                var va = value[_ck];
                if ($key === "__self") {
                  target[_ck] = va;
                } else {
                  target[$key][_ck] = _typeof(va) === "object" && va.text || va;
                }
              }
            } else {
              target[$key || key] = value;
            }
          } else {
            target[key] = value;
          }
        }
      }
    };
    this.onChange = function(e3) {
      if (e3.mode === "onComplete" && e3.render) {
        _this.renderToDom();
      }
      if (e3.mode && _this.props.onChange && !e3.silence) {
        e3.targets = flatArray(e3.targets);
        e3.vars = flatArray(e3.vars);
        _this.props.onChange(e3);
      }
    };
    this.onChangeTimeline = function(e3) {
      _this.renderToDom();
      if (e3.mode === "onTimelineComplete") {
        var _e$targets;
        (_e$targets = e3.targets) === null || _e$targets === void 0 ? void 0 : _e$targets.forEach(function(item) {
          delete item._tweenOneVars;
        });
      }
      if (e3.mode && _this.props.onChangeTimeline) {
        e3.targets = flatArray(e3.targets);
        e3.vars = flatArray(_this.vars);
        _this.props.onChangeTimeline(e3);
      }
    };
    this.goto = function(moment, paused) {
      _this.targets.forEach(function(item) {
        if (!item) {
          return;
        }
        Object.keys(item._tweenOneVars || {}).forEach(function(key) {
          delete item._tweenOneVars[key];
        });
      });
      _this.animate.goto(moment, paused);
    };
    this.kill = function(index) {
      _this.animate.kill(index);
    };
    this.targets = targets;
    this.props = _props;
    this.timeline = globalTimeline;
    this.initTime = ticker_default.time;
    this.attr = _props.attr;
    targets.forEach(function(item) {
      _this.vars.push(item._tweenOneVars);
    });
    this.init(_props);
  }
  _createClass(Tween2, [{
    key: "paused",
    get: function get() {
      return this.animate.pausedState;
    },
    set: function set(v2) {
      this.animate.paused(v2);
    }
  }, {
    key: "reverse",
    get: function get() {
      return this.$reverse;
    },
    set: function set(v2) {
      this.$reverse = v2;
      this.animate.reverse(v2);
    }
  }, {
    key: "regionStartTime",
    get: function get() {
      return this.animate.regionStartTime;
    },
    set: function set(v2) {
      this.animate.regionStartTime = v2;
      this.animate.setTotalTime();
    }
  }, {
    key: "regionEndTime",
    get: function get() {
      return this.animate.regionEndTime || this.animate.totalTime;
    },
    set: function set(v2) {
      this.animate.regionEndTime = v2;
      this.animate.setTotalTime();
    }
  }]);
  return Tween2;
})();
var TweenOne = function TweenOne2(targets, vars) {
  if (!targets) {
    console.error("Error: targets is undefined.");
    return void 0;
  }
  if (ticker_default.state !== "wake") {
    ticker_default.wake();
  }
  var t3 = dataToArray(targets).map(function(item) {
    item._tweenOneVars = item._tweenOneVars || {};
    return item;
  });
  var doms = t3.filter(function(c2) {
    return c2.tagName;
  });
  var objs = t3.filter(function(c2) {
    return !c2.tagName;
  });
  var tween = [];
  if (doms.length) {
    tween.push(new Tween(doms, vars));
  }
  if (objs.length) {
    tween.push(new Tween(objs, vars));
  }
  return flatArray(tween);
};
TweenOne.kill = function(targets) {
  if (typeof targets === "undefined") {
    globalTimeline.killAll(true);
  } else {
    globalTimeline.kill(dataToArray(targets));
  }
};
TweenOne.plugins = plugins_default;
var TweenOne_default = TweenOne;

// node_modules/tween-one/es/index.js
var es_default = TweenOne_default;

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r2, e3) {
  if (null == r2) return {};
  var t3 = {};
  for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
    if (-1 !== e3.indexOf(n2)) continue;
    t3[n2] = r2[n2];
  }
  return t3;
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
function _objectWithoutProperties(e3, t3) {
  if (null == e3) return {};
  var o2, r2, i2 = _objectWithoutPropertiesLoose(e3, t3);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e3);
    for (r2 = 0; r2 < n2.length; r2++) o2 = n2[r2], -1 === t3.indexOf(o2) && {}.propertyIsEnumerable.call(e3, o2) && (i2[o2] = e3[o2]);
  }
  return i2;
}

// node_modules/rc-tween-one/es/TweenOne.js
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var import_style_utils6 = __toESM(require_main2());

// node_modules/rc-tween-one/es/utils/index.js
function dataToArray3(vars) {
  if (!vars && vars !== 0) {
    return [];
  }
  if (Array.isArray(vars)) {
    return vars;
  }
  return [vars];
}
function deepEql(a2, b2) {
  if (!a2 || !b2) {
    return false;
  }
  var $a = Object.keys(a2);
  var $b = Object.keys(b2);
  if ($a.length && $b.length && $a.length === $b.length) {
    return !$a.some(function(key) {
      var aa = a2[key];
      var bb = b2[key];
      if (Array.isArray(aa) && Array.isArray(bb)) {
        var aaa = aa.join();
        var bbb = bb.join();
        if (aaa === bbb && !aaa.match(/\[object object\]/gi)) {
          aa = aaa;
          bb = bbb;
        }
      }
      return aa !== bb;
    });
  }
  return false;
}
function objectEqual(obj1, obj2) {
  if (obj1 === obj2 || deepEql(obj1, obj2)) {
    return true;
  }
  if (!obj1 || !obj2 || Object.keys(obj1).length !== Object.keys(obj2).length) {
    return false;
  }
  var equalBool = true;
  var setEqualBool = function setEqualBool2($a, $b) {
    var objA = Object.keys($a).length > Object.keys($b).length ? $a : $b;
    var objB = Object.keys($a).length > Object.keys($b).length ? $b : $a;
    Object.keys(objA).forEach(function(key) {
      if (!equalBool) {
        return;
      }
      if (!(key in objB)) {
        equalBool = false;
      }
      if (_typeof(objA[key]) === "object" && _typeof(objB[key]) === "object") {
        equalBool = objectEqual(objA[key], objB[key]);
      } else if (typeof objA[key] === "function" && typeof objB[key] === "function") {
        if (objA[key].toString().replace(/\s+/g, "") !== objB[key].toString().replace(/\s+/g, "")) {
          equalBool = false;
        }
      } else if (objA[key] !== objB[key]) {
        equalBool = false;
      }
    });
  };
  if (Array.isArray(obj1) && Array.isArray(obj2)) {
    obj1.forEach(function(item, i2) {
      setEqualBool(item, obj2[i2]);
    });
  } else {
    setEqualBool(obj1, obj2);
  }
  return equalBool;
}

// node_modules/rc-tween-one/es/utils/common.js
var import_react = __toESM(require_react());
var windowIsUndefined2 = !(typeof window !== "undefined" && window.document && window.document.createElement);
var useIsomorphicLayoutEffect = windowIsUndefined2 ? import_react.default.useEffect : import_react.default.useLayoutEffect;

// node_modules/rc-tween-one/es/TweenOne.js
var _excluded = ["component", "componentProps", "animation", "attr", "paused", "reverse", "repeat", "repeatDelay", "yoyo", "moment", "onChange", "onChangeTimeline", "resetStyle", "killPrevAnim"];
var TweenOne3 = import_react2.default.forwardRef(function(_ref, ref) {
  var _ref$component = _ref.component, component = _ref$component === void 0 ? "div" : _ref$component, componentProps = _ref.componentProps, animation = _ref.animation, attr = _ref.attr, paused = _ref.paused, reverse = _ref.reverse, repeat = _ref.repeat, repeatDelay = _ref.repeatDelay, yoyo = _ref.yoyo, moment = _ref.moment, onChange = _ref.onChange, onChangeTimeline = _ref.onChangeTimeline, resetStyle = _ref.resetStyle, _ref$killPrevAnim = _ref.killPrevAnim, killPrevAnim = _ref$killPrevAnim === void 0 ? true : _ref$killPrevAnim, props = _objectWithoutProperties(_ref, _excluded);
  var _ref2 = props || {}, children = _ref2.children, className = _ref2.className, _ref2$style = _ref2.style, style3 = _ref2$style === void 0 ? {} : _ref2$style;
  var domRef = (0, import_react2.useRef)();
  var prevAnim = (0, import_react2.useRef)();
  var animRef = (0, import_react2.useRef)();
  var commonFunc = function commonFunc2(key, value) {
    var tween = animRef.current;
    if (tween) {
      if (key === "moment") {
        if (typeof value === "number") {
          tween.goto(value, paused);
        }
        return;
      }
      tween[key] = !!value;
    }
  };
  useIsomorphicLayoutEffect(function() {
    commonFunc("paused", paused);
  }, [paused]);
  useIsomorphicLayoutEffect(function() {
    commonFunc("moment", moment);
  }, [moment]);
  useIsomorphicLayoutEffect(function() {
    commonFunc("reverse", reverse);
  }, [reverse]);
  useIsomorphicLayoutEffect(function() {
    if (!domRef.current) {
      return console.warn("Warning: TweenOne domRef is error.");
    }
    if (!objectEqual(animation, prevAnim.current)) {
      var doms = dataToArray3(domRef.current).map(function(item) {
        return item instanceof Element || !(item instanceof import_react2.default.Component) ? item : (0, import_react_dom.findDOMNode)(item);
      }).filter(function(item, i2) {
        if (!(item instanceof Element)) {
          console.warn("Warning: TweenOne tag[".concat(i2, "] is not dom."));
          return false;
        }
        return item;
      });
      if (animRef.current && killPrevAnim) {
        animRef.current.kill();
      }
      if (resetStyle && animRef.current) {
        var s2 = !component ? _objectSpread2(_objectSpread2({}, style3), children.props.style) : style3;
        var styleStr = Object.keys(s2).map(function(key) {
          return "".concat((0, import_style_utils6.toStyleUpperCase)(key), ":").concat((0, import_style_utils6.stylesToCss)(key, s2[key]));
        }).join(";");
        doms.forEach(function(item) {
          item.setAttribute("style", styleStr);
          delete item._tweenOneVars;
        });
      }
      animRef.current = animation && es_default(doms, {
        animation,
        attr,
        yoyo,
        moment,
        repeat,
        reverse,
        paused,
        repeatDelay,
        onChange,
        onChangeTimeline
      });
      prevAnim.current = animation;
    }
  }, [animation]);
  (0, import_react2.useEffect)(function() {
    return function() {
      if (animRef.current && animRef.current.kill) {
        animRef.current.kill();
      }
    };
  }, []);
  var refFunc = function refFunc2(c2) {
    domRef.current = c2;
    if (ref && "current" in ref) {
      ref.current = c2;
    } else if (typeof ref === "function") {
      ref(c2);
    }
  };
  if (!component && children && typeof children !== "string" && typeof children !== "boolean" && typeof children !== "number") {
    var childrenProps = children.props;
    var _ref3 = childrenProps || {}, childStyle = _ref3.style, _ref3$className = _ref3.className, childClass = _ref3$className === void 0 ? "" : _ref3$className;
    var newStyle = _objectSpread2(_objectSpread2({}, childStyle), style3);
    var newClassName = className ? "".concat(className, " ").concat(childClass).trim() : childClass;
    return import_react2.default.cloneElement(children, {
      style: newStyle,
      ref: refFunc,
      className: _toConsumableArray(new Set(newClassName.split(/\s+/))).join(" ").trim() || void 0
    });
  }
  if (!component) {
    console.warn("Warning: component is null, children must be ReactElement.");
    return children;
  }
  return (0, import_react2.createElement)(component, _objectSpread2(_objectSpread2({
    ref: refFunc
  }, props), componentProps));
});
TweenOne3.isTweenOne = true;
TweenOne3.displayName = "TweenOne";
var TweenOne_default2 = TweenOne3;

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(r2) {
  if (Array.isArray(r2)) return r2;
}

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r2, l2) {
  var t3 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t3) {
    var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t3 = t3.call(r2)).next, 0 === l2) {
        if (Object(t3) !== t3) return;
        f2 = false;
      } else for (; !(f2 = (e3 = i2.call(t3)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t3["return"] && (u2 = t3["return"](), Object(u2) !== u2)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(r2, e3) {
  return _arrayWithHoles(r2) || _iterableToArrayLimit(r2, e3) || _unsupportedIterableToArray(r2, e3) || _nonIterableRest();
}

// node_modules/rc-tween-one/es/TweenOneGroup.js
var import_react4 = __toESM(require_react());
var import_react5 = __toESM(require_react());

// node_modules/rc-tween-one/es/utils/group.js
var import_react3 = __toESM(require_react());
function toArrayChildren(children) {
  var ret = [];
  import_react3.default.Children.forEach(children, function(c2) {
    ret.push(c2);
  });
  return ret;
}
function findChildInChildrenByKey(children, key) {
  var ret = null;
  if (children) {
    children.forEach(function(c2) {
      if (ret || !c2) {
        return;
      }
      if (c2.key === key) {
        ret = c2;
      }
    });
  }
  return ret;
}
function mergeChildren(prev, next) {
  var ret = [];
  var nextChildrenPending = {};
  var pendingChildren = [];
  var followChildrenKey = null;
  prev.forEach(function(c2) {
    if (!c2) {
      return;
    }
    if (c2.key && findChildInChildrenByKey(next, c2.key)) {
      if (pendingChildren.length) {
        nextChildrenPending[c2.key] = pendingChildren;
        pendingChildren = [];
      }
      followChildrenKey = c2.key;
    } else if (c2.key) {
      pendingChildren.push(c2);
    }
  });
  if (!followChildrenKey) {
    ret = ret.concat(pendingChildren);
  }
  next.forEach(function(c2) {
    if (!c2) {
      return;
    }
    if (c2.key && nextChildrenPending.hasOwnProperty(c2.key)) {
      ret = ret.concat(nextChildrenPending[c2.key]);
    }
    ret.push(c2);
    if (c2.key === followChildrenKey) {
      ret = ret.concat(pendingChildren);
    }
  });
  return ret;
}
function transformArguments(arg, key, i2) {
  var result;
  if (typeof arg === "function") {
    result = arg({
      key,
      index: i2
    });
  } else {
    result = arg;
  }
  return result;
}
function getChildrenFromProps(props) {
  return props && props.children;
}

// node_modules/rc-tween-one/es/TweenOneGroup.js
var _excluded2 = ["component", "componentProps", "leave", "enter", "appear", "resetStyle", "animatingClassName", "onEnd", "exclusive"];
var TweenOneGroup = import_react5.default.forwardRef(function(props, ref) {
  var _props$component = props.component, component = _props$component === void 0 ? "div" : _props$component, _props$componentProps = props.componentProps, componentProps = _props$componentProps === void 0 ? {} : _props$componentProps, _props$leave = props.leave, leaveAnim = _props$leave === void 0 ? {
    x: -50,
    opacity: 0
  } : _props$leave, _props$enter = props.enter, enterAnim = _props$enter === void 0 ? {
    x: 50,
    opacity: 0,
    type: "from"
  } : _props$enter, _props$appear = props.appear, appearBool = _props$appear === void 0 ? true : _props$appear, _props$resetStyle = props.resetStyle, resetStyle = _props$resetStyle === void 0 ? true : _props$resetStyle, _props$animatingClass = props.animatingClassName, animatingClassName = _props$animatingClass === void 0 ? ["tween-one-entering", "tween-one-leaving"] : _props$animatingClass, _props$onEnd = props.onEnd, onEnd = _props$onEnd === void 0 ? function() {
  } : _props$onEnd, _props$exclusive = props.exclusive, exclusive = _props$exclusive === void 0 ? false : _props$exclusive, tagProps = _objectWithoutProperties(props, _excluded2);
  var keysToEnter = (0, import_react5.useRef)([]);
  var keysToLeave = (0, import_react5.useRef)([]);
  var saveTweenTag = (0, import_react5.useRef)({});
  var oneEnter = (0, import_react5.useRef)(false);
  var animQueue = (0, import_react5.useRef)([]);
  var isTween = (0, import_react5.useRef)({});
  var cChild = toArrayChildren(getChildrenFromProps(props));
  var currentChildren = (0, import_react5.useRef)(cChild);
  var _useState = (0, import_react5.useState)(cChild), _useState2 = _slicedToArray(_useState, 2), children = _useState2[0], setChild = _useState2[1];
  var getTweenChild = function getTweenChild2(child) {
    var p2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var key = child.key;
    saveTweenTag.current[key] = import_react5.default.createElement(TweenOne_default2, _objectSpread2(_objectSpread2({}, p2), {}, {
      key,
      component: null
    }), child);
    return saveTweenTag.current[key];
  };
  var setClassName = function setClassName2(name, isEnter) {
    var className = name.replace(animatingClassName[isEnter ? 1 : 0], "").trim();
    if (className.indexOf(animatingClassName[isEnter ? 0 : 1]) === -1) {
      className = "".concat(className, " ").concat(animatingClassName[isEnter ? 0 : 1]).trim();
    }
    return className;
  };
  var changeChildren = function changeChildren2(nextChildren, currentChild) {
    var newChildren = mergeChildren(currentChild, nextChildren);
    keysToEnter.current = [];
    keysToLeave.current = [];
    nextChildren.forEach(function(c2) {
      if (!c2) {
        return;
      }
      var key = c2.key;
      var hasPrev = findChildInChildrenByKey(currentChild, key);
      if (key && saveTweenTag.current[key]) {
        saveTweenTag.current[key] = import_react5.default.cloneElement(saveTweenTag.current[key], {}, c2);
      }
      if (!hasPrev && key) {
        keysToEnter.current.push(key);
      }
    });
    currentChild.forEach(function(c2) {
      if (!c2) {
        return;
      }
      var key = c2.key;
      var hasNext = findChildInChildrenByKey(nextChildren, key);
      if (!hasNext && key) {
        keysToLeave.current.push(key);
        delete saveTweenTag.current[key];
      }
    });
    return newChildren;
  };
  var reAnimQueue = function reAnimQueue2() {
    if (!Object.keys(isTween.current).length && animQueue.current.length) {
      var child = changeChildren(animQueue.current[animQueue.current.length - 1], currentChildren.current);
      setChild(child);
      animQueue.current = [];
    }
  };
  var onChange = function onChange2(key, type, obj) {
    var tag = obj.targets;
    var classIsSvg = _typeof(tag.className) === "object" && "baseVal" in tag.className;
    var isEnter = type === "enter" || type === "appear";
    if (key && obj.mode === "onTimelineComplete") {
      delete isTween.current[key];
      if (classIsSvg) {
        tag.className.baseVal = tag.className.baseVal.replace(animatingClassName[isEnter ? 0 : 1], "").trim();
      } else {
        tag.className = tag.className.replace(animatingClassName[isEnter ? 0 : 1], "").trim();
      }
      if (isEnter) {
        keysToEnter.current.splice(keysToEnter.current.indexOf(key), 1);
        if (!keysToEnter.current.length) {
          reAnimQueue();
        }
      } else if (type === "leave") {
        keysToLeave.current.splice(keysToLeave.current.indexOf(key), 1);
        currentChildren.current = currentChildren.current.filter(function(child) {
          return key !== child.key;
        });
        if (!keysToLeave.current.length) {
          var currentChildrenKeys = currentChildren.current.map(function(item) {
            return item.key;
          });
          Object.keys(saveTweenTag.current).forEach(function($key) {
            if (currentChildrenKeys.indexOf($key) === -1) {
              delete saveTweenTag.current[$key];
            }
          });
          setChild(currentChildren.current);
        }
      }
      onEnd({
        key,
        type,
        target: obj.targets
      });
    }
  };
  var getCoverAnimation = function getCoverAnimation2(child, i2, type) {
    var animation = type === "leave" ? leaveAnim : enterAnim;
    if (type === "appear") {
      var appear = transformArguments(appearBool, child.key, i2);
      animation = appear && enterAnim || null;
    }
    var animate = transformArguments(animation, child.key, i2);
    var onChangeCb = function onChangeCb2(obj) {
      onChange(child.key, type, obj);
    };
    var className = type === "appear" && !appearBool ? child.props.className : setClassName(child.props.className || "", type === "enter" || type === "appear") || void 0;
    var p2 = {
      key: child.key,
      animation: animate,
      onChangeTimeline: onChangeCb,
      resetStyle,
      className
    };
    if (child.key && keysToEnter.current.concat(keysToLeave.current).indexOf(child.key) >= 0 || !oneEnter.current && animation) {
      if (child.key && !saveTweenTag.current[child.key]) {
        isTween.current[child.key] = type;
      }
    }
    return getTweenChild(child, p2);
  };
  useIsomorphicLayoutEffect(function() {
    if (oneEnter.current) {
      var nextChild = toArrayChildren(props.children).filter(function(c2) {
        return c2;
      });
      var currentChild = toArrayChildren(currentChildren.current);
      if (Object.keys(isTween.current).length && !exclusive) {
        animQueue.current.push(nextChild);
      } else {
        setChild(changeChildren(nextChild, currentChild));
      }
    }
  }, [props.children]);
  useIsomorphicLayoutEffect(function() {
    reAnimQueue();
  });
  (0, import_react5.useEffect)(function() {
    oneEnter.current = true;
  }, []);
  currentChildren.current = children;
  var childrenToRender = children.map(function(child, i2) {
    if (!child || !child.key) {
      return child;
    }
    var key = child.key;
    if (keysToLeave.current.indexOf(key) >= 0) {
      return getCoverAnimation(child, keysToLeave.current.indexOf(key), "leave");
    }
    if ((keysToEnter.current.indexOf(key) >= 0 || isTween.current[key] && keysToLeave.current.indexOf(key) === -1) && !(isTween.current[key] === "enter" && saveTweenTag.current[key])) {
      return getCoverAnimation(child, keysToEnter.current.indexOf(key), "enter");
    }
    if (!oneEnter.current) {
      return getCoverAnimation(child, i2, "appear");
    }
    return saveTweenTag.current[key];
  });
  if (windowIsUndefined2) {
    if (!component) {
      return import_react5.default.createElement(import_react5.default.Fragment, null, props.children);
    }
    return (0, import_react5.createElement)(component, _objectSpread2(_objectSpread2(_objectSpread2({}, tagProps), componentProps), {}, {
      ref
    }), props.children);
  }
  if (!component) {
    return childrenToRender[0] ? (0, import_react4.cloneElement)(childrenToRender[0], {
      ref
    }) : null;
  }
  return (0, import_react5.createElement)(component, _objectSpread2(_objectSpread2(_objectSpread2({}, tagProps), componentProps), {}, {
    ref
  }), childrenToRender);
});
TweenOneGroup.displayName = "TweenOneGroup";
TweenOneGroup.isTweenOneGroup = true;
var TweenOneGroup_default = TweenOneGroup;

// node_modules/rc-tween-one/es/plugin/ChildrenPlugin.js
var ChildrenPlugin = _createClass(
  // eslint-disable-next-line no-useless-constructor,no-empty-function
  function ChildrenPlugin2(_vars, _key) {
    var _this = this;
    _classCallCheck(this, ChildrenPlugin2);
    this.start = void 0;
    this.startAt = void 0;
    this.target = void 0;
    this.vars = void 0;
    this.key = void 0;
    this.getAnimStart = function() {
      var target = _this.target, vars = _this.vars, startAt = _this.startAt, key = _this.key;
      var formatMoney = vars.formatMoney;
      var opts = {
        thousand: formatMoney && formatMoney.thousand || ",",
        decimal: formatMoney && formatMoney.decimal || "."
      };
      var rep = new RegExp("\\".concat(opts.thousand), "g");
      _this.start = startAt[key] || {
        value: parseFloat(target.innerHTML.replace(rep, "").replace(opts.decimal, ".")) || 0
      };
      return _this.start;
    };
    this.toMoney = function(v2, _opts) {
      var opts = {
        thousand: _opts.thousand || ",",
        decimal: _opts.decimal || "."
      };
      var negative = parseFloat(v2) < 0 ? "-" : "";
      var numberArray = v2.split(".");
      var base = Math.abs(parseInt(numberArray[0], 10)).toString();
      var mod = base.length > 3 ? base.length % 3 : 0;
      var decimal = numberArray[1];
      return "".concat(negative).concat(mod ? "".concat(base.substr(0, mod)).concat(opts.thousand) : "").concat(base.substr(mod).replace(/(\d{3})(?=\d)/g, "$1".concat(opts.thousand))).concat(decimal ? "".concat(opts.decimal).concat(decimal) : "");
    };
    this.render = function(ratio) {
      var _this$vars = _this.vars, value = _this$vars.value, floatLength = _this$vars.floatLength, formatMoney = _this$vars.formatMoney;
      var v2 = (value - _this.start.value) * ratio + _this.start.value;
      if (typeof floatLength === "number") {
        if (floatLength) {
          v2 = v2.toFixed(floatLength);
          var numberArray = v2.toString().split(".");
          var decimal = numberArray[1] || "";
          decimal = decimal.length > floatLength ? decimal.substring(0, floatLength) : decimal;
          var l2 = floatLength - decimal.length;
          if (l2) {
            Array(l2).fill(0).forEach(function(num) {
              decimal += "".concat(num);
            });
          }
          v2 = "".concat(numberArray[0], ".").concat(decimal);
        } else {
          v2 = Math.round(v2);
        }
      }
      v2 = formatMoney ? _this.toMoney("".concat(v2), formatMoney) : v2;
      return v2;
    };
    this.vars = _vars;
    this.key = _key;
  }
);
ChildrenPlugin.key = "innerHTML";
ChildrenPlugin.className = "Children";
var ChildrenPlugin_default = ChildrenPlugin;

// node_modules/rc-tween-one/es/plugin/PathMotionPlugin.js
var PathMotionPlugin_default = PathMotion;

// node_modules/rc-tween-one/es/plugin/SvgDrawPlugin.js
var SvgDrawPlugin_default = SvgDraw;

// node_modules/rc-tween-one/es/plugin/SvgMorphPlugin.js
var SvgMorphPlugin_default = SvgMorph;

// node_modules/rc-tween-one/es/index.js
TweenOne_default2.plugins = plugins_default;
TweenOne_default2.ticker = ticker_default;
TweenOne_default2.easing = ease_default;
var es_default2 = TweenOne_default2;
export {
  ChildrenPlugin_default as ChildrenPlugin,
  ease_default as Easing,
  PathMotionPlugin_default as PathMotionPlugin,
  plugins_default as Plugins,
  SvgDrawPlugin_default as SvgDrawPlugin,
  SvgMorphPlugin_default as SvgMorphPlugin,
  ticker_default as Ticker,
  TweenOneGroup_default as TweenOneGroup,
  es_default2 as default
};
/*! Bundled license information:

@babel/runtime/helpers/regenerator.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE *)
*/
//# sourceMappingURL=rc-tween-one.js.map
